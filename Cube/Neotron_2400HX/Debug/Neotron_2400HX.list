
Neotron_2400HX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000acc4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800af5c  0800af5c  0001af5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af7c  0800af7c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af84  0800af84  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af84  0800af84  0001af84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af88  0800af88  0001af88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800af8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c48  24000010  0800af9c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000c58  0800af9c  00020c58  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e385  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000460d  00000000  00000000  0004e3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ba0  00000000  00000000  000529d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019f8  00000000  00000000  00054570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039d29  00000000  00000000  00055f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019637  00000000  00000000  0008fc91  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00167e15  00000000  00000000  000a92c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002110dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007790  00000000  00000000  00211158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800af44 	.word	0x0800af44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800af44 	.word	0x0800af44

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005e0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <SCB_EnableICache+0x3c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80005f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <SCB_EnableICache+0x3c>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <SCB_EnableICache+0x3c>)
 80005fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000600:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000604:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000620:	2200      	movs	r2, #0
 8000622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000626:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <SCB_EnableDCache+0x7c>)
 800062c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000630:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	0b5b      	lsrs	r3, r3, #13
 8000636:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800063a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	08db      	lsrs	r3, r3, #3
 8000640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000644:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	015a      	lsls	r2, r3, #5
 800064a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800064e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000654:	490f      	ldr	r1, [pc, #60]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000656:	4313      	orrs	r3, r2
 8000658:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	1e5a      	subs	r2, r3, #1
 8000660:	60ba      	str	r2, [r7, #8]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ef      	bne.n	8000646 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1e5      	bne.n	800063c <SCB_EnableDCache+0x24>
 8000670:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <SCB_EnableDCache+0x7c>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <SCB_EnableDCache+0x7c>)
 800067a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067e:	6153      	str	r3, [r2, #20]
 8000680:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000684:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800069c:	f7ff ff9c 	bl	80005d8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006a0:	f7ff ffba 	bl	8000618 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f001 fbe2 	bl	8001e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f820 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f000 fd1e 	bl	80010ec <MX_GPIO_Init>
  MX_DMA2D_Init();
 80006b0:	f000 f91e 	bl	80008f0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80006b4:	f000 fccc 	bl	8001050 <MX_FMC_Init>
  MX_I2C1_Init();
 80006b8:	f000 f94e 	bl	8000958 <MX_I2C1_Init>
  MX_I2C4_Init();
 80006bc:	f000 f98c 	bl	80009d8 <MX_I2C4_Init>
  MX_I2S3_Init();
 80006c0:	f000 f9ca 	bl	8000a58 <MX_I2S3_Init>
  MX_LTDC_Init();
 80006c4:	f000 f9fa 	bl	8000abc <MX_LTDC_Init>
  MX_SDMMC1_SD_Init();
 80006c8:	f000 faaa 	bl	8000c20 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80006cc:	f000 facc 	bl	8000c68 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006d0:	f000 fb20 	bl	8000d14 <MX_SPI2_Init>
  MX_SPI4_Init();
 80006d4:	f000 fb74 	bl	8000dc0 <MX_SPI4_Init>
  MX_USART2_UART_Init();
 80006d8:	f000 fbc8 	bl	8000e6c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80006dc:	f000 fc12 	bl	8000f04 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006e0:	f000 fc5c 	bl	8000f9c <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_HCD_Init();
 80006e4:	f000 fc8c 	bl	8001000 <MX_USB_OTG_HS_HCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x50>
	...

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0cc      	sub	sp, #304	; 0x130
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006f6:	224c      	movs	r2, #76	; 0x4c
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f00a fc1a 	bl	800af34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000704:	2220      	movs	r2, #32
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f00a fc13 	bl	800af34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	4618      	mov	r0, r3
 8000714:	23bc      	movs	r3, #188	; 0xbc
 8000716:	461a      	mov	r2, r3
 8000718:	2100      	movs	r1, #0
 800071a:	f00a fc0b 	bl	800af34 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800071e:	2002      	movs	r0, #2
 8000720:	f002 fe9c 	bl	800345c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	4b6d      	ldr	r3, [pc, #436]	; (80008e0 <SystemClock_Config+0x1f4>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	4a6c      	ldr	r2, [pc, #432]	; (80008e0 <SystemClock_Config+0x1f4>)
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000736:	4b6a      	ldr	r3, [pc, #424]	; (80008e0 <SystemClock_Config+0x1f4>)
 8000738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073a:	f003 0201 	and.w	r2, r3, #1
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	4b68      	ldr	r3, [pc, #416]	; (80008e4 <SystemClock_Config+0x1f8>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074a:	4a66      	ldr	r2, [pc, #408]	; (80008e4 <SystemClock_Config+0x1f8>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b64      	ldr	r3, [pc, #400]	; (80008e4 <SystemClock_Config+0x1f8>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000762:	bf00      	nop
 8000764:	4b5f      	ldr	r3, [pc, #380]	; (80008e4 <SystemClock_Config+0x1f8>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000770:	d1f8      	bne.n	8000764 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000772:	4b5d      	ldr	r3, [pc, #372]	; (80008e8 <SystemClock_Config+0x1fc>)
 8000774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000776:	4a5c      	ldr	r2, [pc, #368]	; (80008e8 <SystemClock_Config+0x1fc>)
 8000778:	f023 0303 	bic.w	r3, r3, #3
 800077c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800077e:	2322      	movs	r3, #34	; 0x22
 8000780:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000784:	2301      	movs	r3, #1
 8000786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078a:	2320      	movs	r3, #32
 800078c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 80007a2:	2320      	movs	r3, #32
 80007a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 80007a8:	2381      	movs	r3, #129	; 0x81
 80007aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80007c0:	2304      	movs	r3, #4
 80007c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 fe88 	bl	80034ec <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80007e2:	f000 fcf7 	bl	80011d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	233f      	movs	r3, #63	; 0x3f
 80007e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000816:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f003 fa1d 	bl	8003c5c <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x140>
  {
    Error_Handler();
 8000828:	f000 fcd4 	bl	80011d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART3
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	4a2e      	ldr	r2, [pc, #184]	; (80008ec <SystemClock_Config+0x200>)
 8000832:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_SPI4
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C4
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_FMC;
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2220      	movs	r2, #32
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3N = 129;
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2281      	movs	r2, #129	; 0x81
 8000842:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	2202      	movs	r2, #2
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	2202      	movs	r2, #2
 8000852:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	2202      	movs	r2, #2
 800085a:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000864:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2200      	movs	r2, #0
 800086c:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2200      	movs	r2, #0
 8000874:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	2200      	movs	r2, #0
 800087c:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	2200      	movs	r2, #0
 8000884:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	2200      	movs	r2, #0
 800088c:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2200      	movs	r2, #0
 8000894:	661a      	str	r2, [r3, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	2200      	movs	r2, #0
 800089c:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	2200      	movs	r2, #0
 80008a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80008b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	2200      	movs	r2, #0
 80008ba:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 fd28 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x1e6>
  {
    Error_Handler();
 80008ce:	f000 fc81 	bl	80011d4 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80008d2:	f002 fdfb 	bl	80034cc <HAL_PWREx_EnableUSBVoltageDetector>
}
 80008d6:	bf00      	nop
 80008d8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	58000400 	.word	0x58000400
 80008e4:	58024800 	.word	0x58024800
 80008e8:	58024400 	.word	0x58024400
 80008ec:	2105301a 	.word	0x2105301a

080008f0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_DMA2D_Init+0x60>)
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <MX_DMA2D_Init+0x64>)
 80008f8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_DMA2D_Init+0x60>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_DMA2D_Init+0x60>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_DMA2D_Init+0x60>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_DMA2D_Init+0x60>)
 800090e:	2200      	movs	r2, #0
 8000910:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_DMA2D_Init+0x60>)
 8000914:	2200      	movs	r2, #0
 8000916:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_DMA2D_Init+0x60>)
 800091a:	2200      	movs	r2, #0
 800091c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_DMA2D_Init+0x60>)
 8000920:	2200      	movs	r2, #0
 8000922:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_DMA2D_Init+0x60>)
 8000926:	2200      	movs	r2, #0
 8000928:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <MX_DMA2D_Init+0x60>)
 800092c:	f001 fc3e 	bl	80021ac <HAL_DMA2D_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_DMA2D_Init+0x4a>
  {
    Error_Handler();
 8000936:	f000 fc4d 	bl	80011d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800093a:	2101      	movs	r1, #1
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_DMA2D_Init+0x60>)
 800093e:	f001 fc8f 	bl	8002260 <HAL_DMA2D_ConfigLayer>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000948:	f000 fc44 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000a58 	.word	0x24000a58
 8000954:	52001000 	.word	0x52001000

08000958 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_I2C1_Init+0x74>)
 800095e:	4a1c      	ldr	r2, [pc, #112]	; (80009d0 <MX_I2C1_Init+0x78>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_I2C1_Init+0x74>)
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <MX_I2C1_Init+0x7c>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_I2C1_Init+0x74>)
 8000970:	2201      	movs	r2, #1
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_I2C1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_I2C1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_I2C1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000992:	480e      	ldr	r0, [pc, #56]	; (80009cc <MX_I2C1_Init+0x74>)
 8000994:	f001 ff2a 	bl	80027ec <HAL_I2C_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800099e:	f000 fc19 	bl	80011d4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <MX_I2C1_Init+0x74>)
 80009a6:	f001 ffb1 	bl	800290c <HAL_I2CEx_ConfigAnalogFilter>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009b0:	f000 fc10 	bl	80011d4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_I2C1_Init+0x74>)
 80009b8:	f001 fff3 	bl	80029a2 <HAL_I2CEx_ConfigDigitalFilter>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009c2:	f000 fc07 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	24000190 	.word	0x24000190
 80009d0:	40005400 	.word	0x40005400
 80009d4:	10707dbc 	.word	0x10707dbc

080009d8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <MX_I2C4_Init+0x74>)
 80009de:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <MX_I2C4_Init+0x78>)
 80009e0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_I2C4_Init+0x74>)
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <MX_I2C4_Init+0x7c>)
 80009e6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <MX_I2C4_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_I2C4_Init+0x74>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_I2C4_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_I2C4_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_I2C4_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_I2C4_Init+0x74>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_I2C4_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a12:	480e      	ldr	r0, [pc, #56]	; (8000a4c <MX_I2C4_Init+0x74>)
 8000a14:	f001 feea 	bl	80027ec <HAL_I2C_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a1e:	f000 fbd9 	bl	80011d4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <MX_I2C4_Init+0x74>)
 8000a26:	f001 ff71 	bl	800290c <HAL_I2CEx_ConfigAnalogFilter>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a30:	f000 fbd0 	bl	80011d4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_I2C4_Init+0x74>)
 8000a38:	f001 ffb3 	bl	80029a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a42:	f000 fbc7 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	24000030 	.word	0x24000030
 8000a50:	58001c00 	.word	0x58001c00
 8000a54:	10707dbc 	.word	0x10707dbc

08000a58 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a5e:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <MX_I2S3_Init+0x60>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_FULLDUPLEX;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a64:	220a      	movs	r2, #10
 8000a66:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a7c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a80:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  hi2s3.Init.FirstBit = I2S_FIRSTBIT_MSB;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.WSInversion = I2S_WS_INVERSION_DISABLE;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  hi2s3.Init.Data24BitAlignment = I2S_DATA_24BIT_ALIGNMENT_RIGHT;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s3.Init.MasterKeepIOState = I2S_MASTER_KEEP_IO_STATE_DISABLE;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_I2S3_Init+0x5c>)
 8000aa2:	f001 ffcb 	bl	8002a3c <HAL_I2S_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2S3_Init+0x58>
  {
    Error_Handler();
 8000aac:	f000 fb92 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000c00 	.word	0x24000c00
 8000ab8:	40003c00 	.word	0x40003c00

08000abc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09a      	sub	sp, #104	; 0x68
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ac2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ac6:	2234      	movs	r2, #52	; 0x34
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00a fa32 	bl	800af34 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2234      	movs	r2, #52	; 0x34
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f00a fa2c 	bl	800af34 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000adc:	4b4e      	ldr	r3, [pc, #312]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000ade:	4a4f      	ldr	r2, [pc, #316]	; (8000c1c <MX_LTDC_Init+0x160>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ae2:	4b4d      	ldr	r3, [pc, #308]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ae8:	4b4b      	ldr	r3, [pc, #300]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000aee:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000af4:	4b48      	ldr	r3, [pc, #288]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000afa:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000b00:	4b45      	ldr	r3, [pc, #276]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b02:	2203      	movs	r2, #3
 8000b04:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000b06:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b08:	220e      	movs	r2, #14
 8000b0a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000b0c:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b0e:	2205      	movs	r2, #5
 8000b10:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000b12:	4b41      	ldr	r3, [pc, #260]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b14:	f240 228e 	movw	r2, #654	; 0x28e
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000b1a:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b1c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000b20:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000b22:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b24:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000b28:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000b2a:	4b3b      	ldr	r3, [pc, #236]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b2c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000b30:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b32:	4b39      	ldr	r3, [pc, #228]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b42:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b4a:	4833      	ldr	r0, [pc, #204]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000b4c:	f002 f896 	bl	8002c7c <HAL_LTDC_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000b56:	f000 fb3d 	bl	80011d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	481c      	ldr	r0, [pc, #112]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000ba8:	f002 f938 	bl	8002e1c <HAL_LTDC_ConfigLayer>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000bb2:	f000 fb0f 	bl	80011d4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_LTDC_Init+0x15c>)
 8000c02:	f002 f90b 	bl	8002e1c <HAL_LTDC_ConfigLayer>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000c0c:	f000 fae2 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3768      	adds	r7, #104	; 0x68
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000664 	.word	0x24000664
 8000c1c:	50001000 	.word	0x50001000

08000c20 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_SDMMC1_SD_Init+0x40>)
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <MX_SDMMC1_SD_Init+0x44>)
 8000c28:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <MX_SDMMC1_SD_Init+0x40>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_SDMMC1_SD_Init+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <MX_SDMMC1_SD_Init+0x40>)
 8000c38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c3c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_SDMMC1_SD_Init+0x40>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_SDMMC1_SD_Init+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_SDMMC1_SD_Init+0x40>)
 8000c4c:	f005 fa04 	bl	8006058 <HAL_SD_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000c56:	f000 fabd 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	240005e4 	.word	0x240005e4
 8000c64:	52007000 	.word	0x52007000

08000c68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000c6e:	4a28      	ldr	r2, [pc, #160]	; (8000d10 <MX_SPI1_Init+0xa8>)
 8000c70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000c74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7a:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000c82:	2203      	movs	r2, #3
 8000c84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000c94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cac:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000cba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cbe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_SPI1_Init+0xa4>)
 8000cf8:	f006 fa1e 	bl	8007138 <HAL_SPI_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000d02:	f000 fa67 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	24000ab8 	.word	0x24000ab8
 8000d10:	40013000 	.word	0x40013000

08000d14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d18:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d1a:	4a28      	ldr	r2, [pc, #160]	; (8000dbc <MX_SPI2_Init+0xa8>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d26:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d2e:	2203      	movs	r2, #3
 8000d30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d38:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d3e:	4b1e      	ldr	r3, [pc, #120]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d40:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d96:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <MX_SPI2_Init+0xa4>)
 8000da4:	f006 f9c8 	bl	8007138 <HAL_SPI_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000dae:	f000 fa11 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2400007c 	.word	0x2400007c
 8000dbc:	40003800 	.word	0x40003800

08000dc0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000dc6:	4a28      	ldr	r2, [pc, #160]	; (8000e68 <MX_SPI4_Init+0xa8>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000dcc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dd0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000dd2:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000dda:	2203      	movs	r2, #3
 8000ddc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000dec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000df0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e16:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_SPI4_Init+0xa4>)
 8000e50:	f006 f972 	bl	8007138 <HAL_SPI_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000e5a:	f000 f9bb 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	240009d0 	.word	0x240009d0
 8000e68:	40013400 	.word	0x40013400

08000e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e72:	4a23      	ldr	r2, [pc, #140]	; (8000f00 <MX_USART2_UART_Init+0x94>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb4:	4811      	ldr	r0, [pc, #68]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000eb6:	f006 fa52 	bl	800735e <HAL_UART_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ec0:	f000 f988 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000ec8:	f008 fdbb 	bl	8009a42 <HAL_UARTEx_SetTxFifoThreshold>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ed2:	f000 f97f 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4808      	ldr	r0, [pc, #32]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000eda:	f008 fdf0 	bl	8009abe <HAL_UARTEx_SetRxFifoThreshold>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ee4:	f000 f976 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <MX_USART2_UART_Init+0x90>)
 8000eea:	f008 fd71 	bl	80099d0 <HAL_UARTEx_DisableFifoMode>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ef4:	f000 f96e 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	24000b40 	.word	0x24000b40
 8000f00:	40004400 	.word	0x40004400

08000f04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <MX_USART3_UART_Init+0x94>)
 8000f0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f4c:	4811      	ldr	r0, [pc, #68]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f4e:	f006 fa06 	bl	800735e <HAL_UART_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f58:	f000 f93c 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f60:	f008 fd6f 	bl	8009a42 <HAL_UARTEx_SetTxFifoThreshold>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f6a:	f000 f933 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4808      	ldr	r0, [pc, #32]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f72:	f008 fda4 	bl	8009abe <HAL_UARTEx_SetRxFifoThreshold>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f7c:	f000 f92a 	bl	80011d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_USART3_UART_Init+0x90>)
 8000f82:	f008 fd25 	bl	80099d0 <HAL_UARTEx_DisableFifoMode>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f8c:	f000 f922 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	24000104 	.word	0x24000104
 8000f98:	40004800 	.word	0x40004800

08000f9c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fa2:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000fa4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fa8:	2209      	movs	r2, #9
 8000faa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fba:	2202      	movs	r2, #2
 8000fbc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fe4:	f002 f8f2 	bl	80031cc <HAL_PCD_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000fee:	f000 f8f1 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	240001dc 	.word	0x240001dc
 8000ffc:	40080000 	.word	0x40080000

08001000 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <MX_USB_OTG_HS_HCD_Init+0x4c>)
 8001008:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800100c:	2210      	movs	r2, #16
 800100e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001010:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001012:	2201      	movs	r2, #1
 8001014:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800101e:	2202      	movs	r2, #2
 8001020:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <MX_USB_OTG_HS_HCD_Init+0x48>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001030:	2200      	movs	r2, #0
 8001032:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <MX_USB_OTG_HS_HCD_Init+0x48>)
 8001036:	f001 fb77 	bl	8002728 <HAL_HCD_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_USB_OTG_HS_HCD_Init+0x44>
  {
    Error_Handler();
 8001040:	f000 f8c8 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2400070c 	.word	0x2400070c
 800104c:	40040000 	.word	0x40040000

08001050 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	615a      	str	r2, [r3, #20]
 8001066:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_FMC_Init+0x94>)
 800106a:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <MX_FMC_Init+0x98>)
 800106c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_FMC_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_FMC_Init+0x94>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_FMC_Init+0x94>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_FMC_Init+0x94>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_FMC_Init+0x94>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_FMC_Init+0x94>)
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_FMC_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_FMC_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_FMC_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_FMC_Init+0x94>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80010aa:	2310      	movs	r3, #16
 80010ac:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80010ae:	2310      	movs	r3, #16
 80010b0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80010b2:	2310      	movs	r3, #16
 80010b4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80010b6:	2310      	movs	r3, #16
 80010b8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80010ba:	2310      	movs	r3, #16
 80010bc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80010be:	2310      	movs	r3, #16
 80010c0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80010c2:	2310      	movs	r3, #16
 80010c4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_FMC_Init+0x94>)
 80010cc:	f005 fff8 	bl	80070c0 <HAL_SDRAM_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80010d6:	f000 f87d 	bl	80011d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	24000bcc 	.word	0x24000bcc
 80010e8:	52004140 	.word	0x52004140

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <MX_GPIO_Init+0xe4>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4a35      	ldr	r2, [pc, #212]	; (80011d0 <MX_GPIO_Init+0xe4>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <MX_GPIO_Init+0xe4>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 0310 	and.w	r3, r3, #16
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <MX_GPIO_Init+0xe4>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	4a2e      	ldr	r2, [pc, #184]	; (80011d0 <MX_GPIO_Init+0xe4>)
 8001118:	f043 0320 	orr.w	r3, r3, #32
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <MX_GPIO_Init+0xe4>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	f003 0320 	and.w	r3, r3, #32
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <MX_GPIO_Init+0xe4>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <MX_GPIO_Init+0xe4>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113e:	4b24      	ldr	r3, [pc, #144]	; (80011d0 <MX_GPIO_Init+0xe4>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_GPIO_Init+0xe4>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <MX_GPIO_Init+0xe4>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_GPIO_Init+0xe4>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_GPIO_Init+0xe4>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	4a17      	ldr	r2, [pc, #92]	; (80011d0 <MX_GPIO_Init+0xe4>)
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_GPIO_Init+0xe4>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_GPIO_Init+0xe4>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <MX_GPIO_Init+0xe4>)
 8001190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_GPIO_Init+0xe4>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_GPIO_Init+0xe4>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <MX_GPIO_Init+0xe4>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_GPIO_Init+0xe4>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

}
 80011c4:	bf00      	nop
 80011c6:	3724      	adds	r7, #36	; 0x24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	58024400 	.word	0x58024400

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_MspInit+0x30>)
 80011ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x30>)
 80011f2:	f043 0302 	orr.w	r3, r3, #2
 80011f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x30>)
 80011fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <HAL_DMA2D_MspInit+0x3c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10e      	bne.n	8001248 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_DMA2D_MspInit+0x40>)
 800122c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001230:	4a09      	ldr	r2, [pc, #36]	; (8001258 <HAL_DMA2D_MspInit+0x40>)
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <HAL_DMA2D_MspInit+0x40>)
 800123c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	52001000 	.word	0x52001000
 8001258:	58024400 	.word	0x58024400

0800125c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a34      	ldr	r2, [pc, #208]	; (800134c <HAL_I2C_MspInit+0xf0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d12e      	bne.n	80012dc <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	4a32      	ldr	r2, [pc, #200]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128e:	4b30      	ldr	r3, [pc, #192]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800129c:	23c0      	movs	r3, #192	; 0xc0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a0:	2312      	movs	r3, #18
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ac:	2304      	movs	r3, #4
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4827      	ldr	r0, [pc, #156]	; (8001354 <HAL_I2C_MspInit+0xf8>)
 80012b8:	f001 f886 	bl	80023c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 80012be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c2:	4a23      	ldr	r2, [pc, #140]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 80012c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 80012ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80012da:	e033      	b.n	8001344 <HAL_I2C_MspInit+0xe8>
  else if(hi2c->Instance==I2C4)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_I2C_MspInit+0xfc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d12e      	bne.n	8001344 <HAL_I2C_MspInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a18      	ldr	r2, [pc, #96]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001304:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130a:	2312      	movs	r3, #18
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001316:	2304      	movs	r3, #4
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <HAL_I2C_MspInit+0x100>)
 8001322:	f001 f851 	bl	80023c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 8001328:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800132c:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 800132e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001332:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_I2C_MspInit+0xf4>)
 8001338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800133c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40005400 	.word	0x40005400
 8001350:	58024400 	.word	0x58024400
 8001354:	58020400 	.word	0x58020400
 8001358:	58001c00 	.word	0x58001c00
 800135c:	58020c00 	.word	0x58020c00

08001360 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a32      	ldr	r2, [pc, #200]	; (8001448 <HAL_I2S_MspInit+0xe8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d15d      	bne.n	800143e <HAL_I2S_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001382:	4b32      	ldr	r3, [pc, #200]	; (800144c <HAL_I2S_MspInit+0xec>)
 8001384:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001388:	4a30      	ldr	r2, [pc, #192]	; (800144c <HAL_I2S_MspInit+0xec>)
 800138a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <HAL_I2S_MspInit+0xec>)
 8001394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_I2S_MspInit+0xec>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a6:	4a29      	ldr	r2, [pc, #164]	; (800144c <HAL_I2S_MspInit+0xec>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_I2S_MspInit+0xec>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_I2S_MspInit+0xec>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a21      	ldr	r2, [pc, #132]	; (800144c <HAL_I2S_MspInit+0xec>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <HAL_I2S_MspInit+0xec>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
    PB2     ------> I2S3_SDO
    PA15 (JTDI)     ------> I2S3_WS
    PB3 (JTDO/TRACESWO)     ------> I2S3_CK
    PB4 (NJTRST)     ------> I2S3_SDI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013dc:	2304      	movs	r3, #4
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80013ec:	2307      	movs	r3, #7
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4816      	ldr	r0, [pc, #88]	; (8001450 <HAL_I2S_MspInit+0xf0>)
 80013f8:	f000 ffe6 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800140e:	2306      	movs	r3, #6
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	480e      	ldr	r0, [pc, #56]	; (8001454 <HAL_I2S_MspInit+0xf4>)
 800141a:	f000 ffd5 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800141e:	2318      	movs	r3, #24
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800142e:	2306      	movs	r3, #6
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <HAL_I2S_MspInit+0xf0>)
 800143a:	f000 ffc5 	bl	80023c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40003c00 	.word	0x40003c00
 800144c:	58024400 	.word	0x58024400
 8001450:	58020400 	.word	0x58020400
 8001454:	58020000 	.word	0x58020000

08001458 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b090      	sub	sp, #64	; 0x40
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a82      	ldr	r2, [pc, #520]	; (8001680 <HAL_LTDC_MspInit+0x228>)
 8001476:	4293      	cmp	r3, r2
 8001478:	f040 80fe 	bne.w	8001678 <HAL_LTDC_MspInit+0x220>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800147c:	4b81      	ldr	r3, [pc, #516]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 800147e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001482:	4a80      	ldr	r2, [pc, #512]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800148c:	4b7d      	ldr	r3, [pc, #500]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 800148e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
 8001498:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800149a:	4b7a      	ldr	r3, [pc, #488]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 800149c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a0:	4a78      	ldr	r2, [pc, #480]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014aa:	4b76      	ldr	r3, [pc, #472]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b8:	4b72      	ldr	r3, [pc, #456]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 80014ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014be:	4a71      	ldr	r2, [pc, #452]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c8:	4b6e      	ldr	r3, [pc, #440]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	623b      	str	r3, [r7, #32]
 80014d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	4b6b      	ldr	r3, [pc, #428]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014dc:	4a69      	ldr	r2, [pc, #420]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e6:	4b67      	ldr	r3, [pc, #412]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	4b63      	ldr	r3, [pc, #396]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fa:	4a62      	ldr	r2, [pc, #392]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001504:	4b5f      	ldr	r3, [pc, #380]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
 8001510:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	4b5c      	ldr	r3, [pc, #368]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001518:	4a5a      	ldr	r2, [pc, #360]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 800151a:	f043 0302 	orr.w	r3, r3, #2
 800151e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001522:	4b58      	ldr	r3, [pc, #352]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001530:	4b54      	ldr	r3, [pc, #336]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001536:	4a53      	ldr	r2, [pc, #332]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001540:	4b50      	ldr	r3, [pc, #320]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800154e:	4b4d      	ldr	r3, [pc, #308]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001554:	4a4b      	ldr	r2, [pc, #300]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 8001556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800155a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155e:	4b49      	ldr	r3, [pc, #292]	; (8001684 <HAL_LTDC_MspInit+0x22c>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
    PG10     ------> LTDC_B2
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11 
 800156c:	f649 0370 	movw	r3, #39024	; 0x9870
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800157e:	230e      	movs	r3, #14
 8001580:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001586:	4619      	mov	r1, r3
 8001588:	483f      	ldr	r0, [pc, #252]	; (8001688 <HAL_LTDC_MspInit+0x230>)
 800158a:	f000 ff1d 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800158e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015a0:	230e      	movs	r3, #14
 80015a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015a8:	4619      	mov	r1, r3
 80015aa:	4838      	ldr	r0, [pc, #224]	; (800168c <HAL_LTDC_MspInit+0x234>)
 80015ac:	f000 ff0c 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 80015b0:	23c1      	movs	r3, #193	; 0xc1
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015c0:	230e      	movs	r3, #14
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c8:	4619      	mov	r1, r3
 80015ca:	4831      	ldr	r0, [pc, #196]	; (8001690 <HAL_LTDC_MspInit+0x238>)
 80015cc:	f000 fefc 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 80015d0:	f240 437e 	movw	r3, #1150	; 0x47e
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015e2:	230e      	movs	r3, #14
 80015e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ea:	4619      	mov	r1, r3
 80015ec:	4829      	ldr	r0, [pc, #164]	; (8001694 <HAL_LTDC_MspInit+0x23c>)
 80015ee:	f000 feeb 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015f2:	2303      	movs	r3, #3
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001602:	2309      	movs	r3, #9
 8001604:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800160a:	4619      	mov	r1, r3
 800160c:	4822      	ldr	r0, [pc, #136]	; (8001698 <HAL_LTDC_MspInit+0x240>)
 800160e:	f000 fedb 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001612:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001624:	230e      	movs	r3, #14
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800162c:	4619      	mov	r1, r3
 800162e:	481a      	ldr	r0, [pc, #104]	; (8001698 <HAL_LTDC_MspInit+0x240>)
 8001630:	f000 feca 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001634:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001638:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001646:	230e      	movs	r3, #14
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800164e:	4619      	mov	r1, r3
 8001650:	4812      	ldr	r0, [pc, #72]	; (800169c <HAL_LTDC_MspInit+0x244>)
 8001652:	f000 feb9 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_13;
 8001656:	f44f 5312 	mov.w	r3, #9344	; 0x2480
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001668:	230e      	movs	r3, #14
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800166c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001670:	4619      	mov	r1, r3
 8001672:	480b      	ldr	r0, [pc, #44]	; (80016a0 <HAL_LTDC_MspInit+0x248>)
 8001674:	f000 fea8 	bl	80023c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001678:	bf00      	nop
 800167a:	3740      	adds	r7, #64	; 0x40
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	50001000 	.word	0x50001000
 8001684:	58024400 	.word	0x58024400
 8001688:	58021000 	.word	0x58021000
 800168c:	58021400 	.word	0x58021400
 8001690:	58020800 	.word	0x58020800
 8001694:	58020000 	.word	0x58020000
 8001698:	58020400 	.word	0x58020400
 800169c:	58020c00 	.word	0x58020c00
 80016a0:	58021800 	.word	0x58021800

080016a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a2a      	ldr	r2, [pc, #168]	; (800176c <HAL_SD_MspInit+0xc8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d14d      	bne.n	8001762 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016c6:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_SD_MspInit+0xcc>)
 80016c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016cc:	4a28      	ldr	r2, [pc, #160]	; (8001770 <HAL_SD_MspInit+0xcc>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <HAL_SD_MspInit+0xcc>)
 80016d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80016dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e4:	4b22      	ldr	r3, [pc, #136]	; (8001770 <HAL_SD_MspInit+0xcc>)
 80016e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ea:	4a21      	ldr	r2, [pc, #132]	; (8001770 <HAL_SD_MspInit+0xcc>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_SD_MspInit+0xcc>)
 80016f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_SD_MspInit+0xcc>)
 8001704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001708:	4a19      	ldr	r2, [pc, #100]	; (8001770 <HAL_SD_MspInit+0xcc>)
 800170a:	f043 0308 	orr.w	r3, r3, #8
 800170e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_SD_MspInit+0xcc>)
 8001714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001720:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001724:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001732:	230c      	movs	r3, #12
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	480d      	ldr	r0, [pc, #52]	; (8001774 <HAL_SD_MspInit+0xd0>)
 800173e:	f000 fe43 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001742:	2304      	movs	r3, #4
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001752:	230c      	movs	r3, #12
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4806      	ldr	r0, [pc, #24]	; (8001778 <HAL_SD_MspInit+0xd4>)
 800175e:	f000 fe33 	bl	80023c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	52007000 	.word	0x52007000
 8001770:	58024400 	.word	0x58024400
 8001774:	58020800 	.word	0x58020800
 8001778:	58020c00 	.word	0x58020c00

0800177c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b090      	sub	sp, #64	; 0x40
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a6e      	ldr	r2, [pc, #440]	; (8001954 <HAL_SPI_MspInit+0x1d8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d14e      	bne.n	800183c <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800179e:	4b6e      	ldr	r3, [pc, #440]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017a4:	4a6c      	ldr	r2, [pc, #432]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017ae:	4b6a      	ldr	r3, [pc, #424]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	4b66      	ldr	r3, [pc, #408]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c2:	4a65      	ldr	r2, [pc, #404]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017cc:	4b62      	ldr	r3, [pc, #392]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017da:	4b5f      	ldr	r3, [pc, #380]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	4a5d      	ldr	r2, [pc, #372]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ea:	4b5b      	ldr	r3, [pc, #364]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f4:	623b      	str	r3, [r7, #32]
 80017f6:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration    
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001808:	2305      	movs	r3, #5
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001810:	4619      	mov	r1, r3
 8001812:	4852      	ldr	r0, [pc, #328]	; (800195c <HAL_SPI_MspInit+0x1e0>)
 8001814:	f000 fdd8 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001818:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182a:	2305      	movs	r3, #5
 800182c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800182e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001832:	4619      	mov	r1, r3
 8001834:	484a      	ldr	r0, [pc, #296]	; (8001960 <HAL_SPI_MspInit+0x1e4>)
 8001836:	f000 fdc7 	bl	80023c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800183a:	e087      	b.n	800194c <HAL_SPI_MspInit+0x1d0>
  else if(hspi->Instance==SPI2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a48      	ldr	r2, [pc, #288]	; (8001964 <HAL_SPI_MspInit+0x1e8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d14e      	bne.n	80018e4 <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001846:	4b44      	ldr	r3, [pc, #272]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 8001848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800184c:	4a42      	ldr	r2, [pc, #264]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 800184e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001852:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001856:	4b40      	ldr	r3, [pc, #256]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 8001858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001864:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186a:	4a3b      	ldr	r2, [pc, #236]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001874:	4b38      	ldr	r3, [pc, #224]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	4b35      	ldr	r3, [pc, #212]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	4a33      	ldr	r2, [pc, #204]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001892:	4b31      	ldr	r3, [pc, #196]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80018a0:	2306      	movs	r3, #6
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b0:	2305      	movs	r3, #5
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b8:	4619      	mov	r1, r3
 80018ba:	482b      	ldr	r0, [pc, #172]	; (8001968 <HAL_SPI_MspInit+0x1ec>)
 80018bc:	f000 fd84 	bl	80023c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d2:	2305      	movs	r3, #5
 80018d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018da:	4619      	mov	r1, r3
 80018dc:	4823      	ldr	r0, [pc, #140]	; (800196c <HAL_SPI_MspInit+0x1f0>)
 80018de:	f000 fd73 	bl	80023c8 <HAL_GPIO_Init>
}
 80018e2:	e033      	b.n	800194c <HAL_SPI_MspInit+0x1d0>
  else if(hspi->Instance==SPI4)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a21      	ldr	r2, [pc, #132]	; (8001970 <HAL_SPI_MspInit+0x1f4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d12e      	bne.n	800194c <HAL_SPI_MspInit+0x1d0>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80018ee:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 80018f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018f4:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 80018f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 8001900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001912:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 8001914:	f043 0310 	orr.w	r3, r3, #16
 8001918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_SPI_MspInit+0x1dc>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 800192a:	f246 0304 	movw	r3, #24580	; 0x6004
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800193c:	2305      	movs	r3, #5
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	480b      	ldr	r0, [pc, #44]	; (8001974 <HAL_SPI_MspInit+0x1f8>)
 8001948:	f000 fd3e 	bl	80023c8 <HAL_GPIO_Init>
}
 800194c:	bf00      	nop
 800194e:	3740      	adds	r7, #64	; 0x40
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40013000 	.word	0x40013000
 8001958:	58024400 	.word	0x58024400
 800195c:	58020c00 	.word	0x58020c00
 8001960:	58021800 	.word	0x58021800
 8001964:	40003800 	.word	0x40003800
 8001968:	58020800 	.word	0x58020800
 800196c:	58020000 	.word	0x58020000
 8001970:	40013400 	.word	0x40013400
 8001974:	58021000 	.word	0x58021000

08001978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a34      	ldr	r2, [pc, #208]	; (8001a68 <HAL_UART_MspInit+0xf0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d12e      	bne.n	80019f8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800199a:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 800199c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019a0:	4a32      	ldr	r2, [pc, #200]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 80019a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019aa:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 80019ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b8:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 80019ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019be:	4a2b      	ldr	r2, [pc, #172]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019d6:	2360      	movs	r3, #96	; 0x60
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e6:	2307      	movs	r3, #7
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	481f      	ldr	r0, [pc, #124]	; (8001a70 <HAL_UART_MspInit+0xf8>)
 80019f2:	f000 fce9 	bl	80023c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019f6:	e033      	b.n	8001a60 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1d      	ldr	r2, [pc, #116]	; (8001a74 <HAL_UART_MspInit+0xfc>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d12e      	bne.n	8001a60 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 8001a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a08:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 8001a0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 8001a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a26:	4a11      	ldr	r2, [pc, #68]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_UART_MspInit+0xf4>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a50:	2307      	movs	r3, #7
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <HAL_UART_MspInit+0xf8>)
 8001a5c:	f000 fcb4 	bl	80023c8 <HAL_GPIO_Init>
}
 8001a60:	bf00      	nop
 8001a62:	3730      	adds	r7, #48	; 0x30
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40004400 	.word	0x40004400
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	58020c00 	.word	0x58020c00
 8001a74:	40004800 	.word	0x40004800

08001a78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <HAL_PCD_MspInit+0x88>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12e      	bne.n	8001af8 <HAL_PCD_MspInit+0x80>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <HAL_PCD_MspInit+0x8c>)
 8001a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa0:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <HAL_PCD_MspInit+0x8c>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <HAL_PCD_MspInit+0x8c>)
 8001aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ab8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001aca:	230a      	movs	r3, #10
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <HAL_PCD_MspInit+0x90>)
 8001ad6:	f000 fc77 	bl	80023c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_PCD_MspInit+0x8c>)
 8001adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ae0:	4a08      	ldr	r2, [pc, #32]	; (8001b04 <HAL_PCD_MspInit+0x8c>)
 8001ae2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ae6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_PCD_MspInit+0x8c>)
 8001aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	; 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40080000 	.word	0x40080000
 8001b04:	58024400 	.word	0x58024400
 8001b08:	58020000 	.word	0x58020000

08001b0c <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <HAL_HCD_MspInit+0xa4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d13b      	bne.n	8001ba6 <HAL_HCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_HCD_MspInit+0xa8>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_HCD_MspInit+0xa8>)
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_HCD_MspInit+0xa8>)
 8001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration    
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4815      	ldr	r0, [pc, #84]	; (8001bb8 <HAL_HCD_MspInit+0xac>)
 8001b62:	f000 fc31 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001b66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8001b78:	230c      	movs	r3, #12
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <HAL_HCD_MspInit+0xac>)
 8001b84:	f000 fc20 	bl	80023c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_HCD_MspInit+0xa8>)
 8001b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b8e:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <HAL_HCD_MspInit+0xa8>)
 8001b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_HCD_MspInit+0xa8>)
 8001b9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	; 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40040000 	.word	0x40040000
 8001bb4:	58024400 	.word	0x58024400
 8001bb8:	58020400 	.word	0x58020400

08001bbc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <HAL_FMC_MspInit+0x108>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d170      	bne.n	8001cba <HAL_FMC_MspInit+0xfe>
    return;
  }
  FMC_Initialized = 1;
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <HAL_FMC_MspInit+0x108>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001bde:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <HAL_FMC_MspInit+0x10c>)
 8001be0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001be4:	4a38      	ldr	r2, [pc, #224]	; (8001cc8 <HAL_FMC_MspInit+0x10c>)
 8001be6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001bee:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_FMC_MspInit+0x10c>)
 8001bf0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
  PG8   ------> FMC_SDCLK
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8001bfc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001c00:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c0e:	230c      	movs	r3, #12
 8001c10:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	482d      	ldr	r0, [pc, #180]	; (8001ccc <HAL_FMC_MspInit+0x110>)
 8001c18:	f000 fbd6 	bl	80023c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001c1c:	2318      	movs	r3, #24
 8001c1e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c2c:	230c      	movs	r3, #12
 8001c2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4826      	ldr	r0, [pc, #152]	; (8001cd0 <HAL_FMC_MspInit+0x114>)
 8001c36:	f000 fbc7 	bl	80023c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c4a:	230c      	movs	r3, #12
 8001c4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <HAL_FMC_MspInit+0x118>)
 8001c54:	f000 fbb8 	bl	80023c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 8001c58:	f248 1311 	movw	r3, #33041	; 0x8111
 8001c5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c6a:	230c      	movs	r3, #12
 8001c6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4819      	ldr	r0, [pc, #100]	; (8001cd8 <HAL_FMC_MspInit+0x11c>)
 8001c74:	f000 fba8 	bl	80023c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001c78:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001c7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c8a:	230c      	movs	r3, #12
 8001c8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4812      	ldr	r0, [pc, #72]	; (8001cdc <HAL_FMC_MspInit+0x120>)
 8001c94:	f000 fb98 	bl	80023c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
 8001c98:	f24c 0303 	movw	r3, #49155	; 0xc003
 8001c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001caa:	230c      	movs	r3, #12
 8001cac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <HAL_FMC_MspInit+0x124>)
 8001cb4:	f000 fb88 	bl	80023c8 <HAL_GPIO_Init>
 8001cb8:	e000      	b.n	8001cbc <HAL_FMC_MspInit+0x100>
    return;
 8001cba:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	2400002c 	.word	0x2400002c
 8001cc8:	58024400 	.word	0x58024400
 8001ccc:	58021400 	.word	0x58021400
 8001cd0:	58020800 	.word	0x58020800
 8001cd4:	58020000 	.word	0x58020000
 8001cd8:	58021800 	.word	0x58021800
 8001cdc:	58021000 	.word	0x58021000
 8001ce0:	58020c00 	.word	0x58020c00

08001ce4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001cec:	f7ff ff66 	bl	8001bbc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <MemManage_Handler+0x4>

08001d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4c:	f000 f8fc 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <SystemInit+0xac>)
 8001d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5e:	4a28      	ldr	r2, [pc, #160]	; (8001e00 <SystemInit+0xac>)
 8001d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <SystemInit+0xb0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a25      	ldr	r2, [pc, #148]	; (8001e04 <SystemInit+0xb0>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <SystemInit+0xb0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <SystemInit+0xb0>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4921      	ldr	r1, [pc, #132]	; (8001e04 <SystemInit+0xb0>)
 8001d80:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <SystemInit+0xb4>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <SystemInit+0xb0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <SystemInit+0xb0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d92:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <SystemInit+0xb0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <SystemInit+0xb0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <SystemInit+0xb0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <SystemInit+0xb0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <SystemInit+0xb0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <SystemInit+0xb0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001db6:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <SystemInit+0xb0>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <SystemInit+0xb0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <SystemInit+0xb0>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <SystemInit+0xb0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <SystemInit+0xb0>)
 8001dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <SystemInit+0xb0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <SystemInit+0xb8>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <SystemInit+0xbc>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001de6:	d202      	bcs.n	8001dee <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <SystemInit+0xc0>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SystemInit+0xac>)
 8001df0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00
 8001e04:	58024400 	.word	0x58024400
 8001e08:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e0c:	5c001000 	.word	0x5c001000
 8001e10:	ffff0000 	.word	0xffff0000
 8001e14:	51008108 	.word	0x51008108

08001e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e1e:	e003      	b.n	8001e28 <LoopCopyDataInit>

08001e20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e26:	3104      	adds	r1, #4

08001e28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e28:	480b      	ldr	r0, [pc, #44]	; (8001e58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e30:	d3f6      	bcc.n	8001e20 <CopyDataInit>
  ldr  r2, =_sbss
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e34:	e002      	b.n	8001e3c <LoopFillZerobss>

08001e36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e38:	f842 3b04 	str.w	r3, [r2], #4

08001e3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e40:	d3f9      	bcc.n	8001e36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e42:	f7ff ff87 	bl	8001d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e46:	f009 f851 	bl	800aeec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4a:	f7fe fc25 	bl	8000698 <main>
  bx  lr    
 8001e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e50:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001e54:	0800af8c 	.word	0x0800af8c
  ldr  r0, =_sdata
 8001e58:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001e5c:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001e60:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8001e64:	24000c58 	.word	0x24000c58

08001e68 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC3_IRQHandler>
	...

08001e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 f969 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e76:	f002 f895 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_Init+0x60>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <HAL_Init+0x64>)
 8001e88:	5cd3      	ldrb	r3, [r2, r3]
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e92:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <HAL_Init+0x68>)
 8001e94:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_Init+0x68>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_Init+0x60>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	490b      	ldr	r1, [pc, #44]	; (8001ed0 <HAL_Init+0x64>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	f003 031f 	and.w	r3, r3, #31
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_Init+0x6c>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f000 f812 	bl	8001edc <HAL_InitTick>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e002      	b.n	8001ec8 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ec2:	f7ff f98f 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	0800af6c 	.word	0x0800af6c
 8001ed4:	24000000 	.word	0x24000000
 8001ed8:	24000004 	.word	0x24000004

08001edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_InitTick+0x60>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e021      	b.n	8001f34 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_InitTick+0x64>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_InitTick+0x60>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f943 	bl	8002192 <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00e      	b.n	8001f34 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d80a      	bhi.n	8001f32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f24:	f000 f91b 	bl	800215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <HAL_InitTick+0x68>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	2400000c 	.word	0x2400000c
 8001f40:	24000000 	.word	0x24000000
 8001f44:	24000008 	.word	0x24000008

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	2400000c 	.word	0x2400000c
 8001f6c:	24000c54 	.word	0x24000c54

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	24000c54 	.word	0x24000c54

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_Delay+0x40>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	2400000c 	.word	0x2400000c

08001fcc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetREVID+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	5c001000 	.word	0x5c001000

08001fe4 <__NVIC_SetPriorityGrouping>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <__NVIC_SetPriorityGrouping+0x40>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	4313      	orrs	r3, r2
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	; (8002024 <__NVIC_SetPriorityGrouping+0x40>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00
 8002028:	05fa0000 	.word	0x05fa0000

0800202c <__NVIC_GetPriorityGrouping>:
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_SetPriority>:
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002128:	f7ff ff8e 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff47 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800216c:	f7ff ff5e 	bl	800202c <__NVIC_GetPriorityGrouping>
 8002170:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7ff ff90 	bl	800209c <NVIC_EncodePriority>
 800217c:	4602      	mov	r2, r0
 800217e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5f 	bl	8002048 <__NVIC_SetPriority>
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffb2 	bl	8002104 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e049      	b.n	8002252 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff f820 	bl	8001218 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fc:	f023 0107 	bic.w	r1, r3, #7
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_DMA2D_Init+0xb0>)
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68d1      	ldr	r1, [r2, #12]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	430b      	orrs	r3, r1
 8002220:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002228:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	051a      	lsls	r2, r3, #20
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	055b      	lsls	r3, r3, #21
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	635a      	str	r2, [r3, #52]	; 0x34


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	ffffc000 	.word	0xffffc000

08002260 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d104      	bne.n	8002282 <HAL_DMA2D_ConfigLayer+0x22>
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_DMA2D_ConfigLayer+0x30>
 800228c:	2302      	movs	r3, #2
 800228e:	e092      	b.n	80023b6 <HAL_DMA2D_ConfigLayer+0x156>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	3320      	adds	r3, #32
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	041b      	lsls	r3, r3, #16
 80022bc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80022c4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 80022cc:	4313      	orrs	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80022d0:	4b3c      	ldr	r3, [pc, #240]	; (80023c4 <HAL_DMA2D_ConfigLayer+0x164>)
 80022d2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b0a      	cmp	r3, #10
 80022da:	d003      	beq.n	80022e4 <HAL_DMA2D_ConfigLayer+0x84>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b09      	cmp	r3, #9
 80022e2:	d107      	bne.n	80022f4 <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	e005      	b.n	8002300 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	061b      	lsls	r3, r3, #24
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d120      	bne.n	8002348 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	43db      	mvns	r3, r3
 8002310:	ea02 0103 	and.w	r1, r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	430a      	orrs	r2, r1
 800231c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b0a      	cmp	r3, #10
 800232e:	d003      	beq.n	8002338 <HAL_DMA2D_ConfigLayer+0xd8>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b09      	cmp	r3, #9
 8002336:	d135      	bne.n	80023a4 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002344:	629a      	str	r2, [r3, #40]	; 0x28
 8002346:	e02d      	b.n	80023a4 <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if(pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b0b      	cmp	r3, #11
 800234e:	d109      	bne.n	8002364 <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	049b      	lsls	r3, r3, #18
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8002362:	617b      	str	r3, [r7, #20]
    }

     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	43db      	mvns	r3, r3
 800236e:	ea02 0103 	and.w	r1, r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	430a      	orrs	r2, r1
 800237a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b0a      	cmp	r3, #10
 800238c:	d003      	beq.n	8002396 <HAL_DMA2D_ConfigLayer+0x136>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b09      	cmp	r3, #9
 8002394:	d106      	bne.n	80023a4 <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80023a2:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	ff33000f 	.word	0xff33000f

080023c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023d6:	4b89      	ldr	r3, [pc, #548]	; (80025fc <HAL_GPIO_Init+0x234>)
 80023d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023da:	e194      	b.n	8002706 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2101      	movs	r1, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8186 	beq.w	8002700 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x3c>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b12      	cmp	r3, #18
 8002402:	d123      	bne.n	800244c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	08da      	lsrs	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3208      	adds	r2, #8
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	08da      	lsrs	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3208      	adds	r2, #8
 8002446:	69b9      	ldr	r1, [r7, #24]
 8002448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0203 	and.w	r2, r3, #3
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d00b      	beq.n	80024a0 <HAL_GPIO_Init+0xd8>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d007      	beq.n	80024a0 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002494:	2b11      	cmp	r3, #17
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b12      	cmp	r3, #18
 800249e:	d130      	bne.n	8002502 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024d6:	2201      	movs	r2, #1
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f003 0201 	and.w	r2, r3, #1
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80e0 	beq.w	8002700 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002540:	4b2f      	ldr	r3, [pc, #188]	; (8002600 <HAL_GPIO_Init+0x238>)
 8002542:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002546:	4a2e      	ldr	r2, [pc, #184]	; (8002600 <HAL_GPIO_Init+0x238>)
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <HAL_GPIO_Init+0x238>)
 8002552:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255e:	4a29      	ldr	r2, [pc, #164]	; (8002604 <HAL_GPIO_Init+0x23c>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a20      	ldr	r2, [pc, #128]	; (8002608 <HAL_GPIO_Init+0x240>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d052      	beq.n	8002630 <HAL_GPIO_Init+0x268>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_GPIO_Init+0x244>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d031      	beq.n	80025f6 <HAL_GPIO_Init+0x22e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a1e      	ldr	r2, [pc, #120]	; (8002610 <HAL_GPIO_Init+0x248>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d02b      	beq.n	80025f2 <HAL_GPIO_Init+0x22a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <HAL_GPIO_Init+0x24c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d025      	beq.n	80025ee <HAL_GPIO_Init+0x226>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a1c      	ldr	r2, [pc, #112]	; (8002618 <HAL_GPIO_Init+0x250>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d01f      	beq.n	80025ea <HAL_GPIO_Init+0x222>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a1b      	ldr	r2, [pc, #108]	; (800261c <HAL_GPIO_Init+0x254>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d019      	beq.n	80025e6 <HAL_GPIO_Init+0x21e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1a      	ldr	r2, [pc, #104]	; (8002620 <HAL_GPIO_Init+0x258>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0x21a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a19      	ldr	r2, [pc, #100]	; (8002624 <HAL_GPIO_Init+0x25c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00d      	beq.n	80025de <HAL_GPIO_Init+0x216>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_GPIO_Init+0x260>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d007      	beq.n	80025da <HAL_GPIO_Init+0x212>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_GPIO_Init+0x264>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_GPIO_Init+0x20e>
 80025d2:	2309      	movs	r3, #9
 80025d4:	e02d      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025d6:	230a      	movs	r3, #10
 80025d8:	e02b      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025da:	2308      	movs	r3, #8
 80025dc:	e029      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025de:	2307      	movs	r3, #7
 80025e0:	e027      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025e2:	2306      	movs	r3, #6
 80025e4:	e025      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025e6:	2305      	movs	r3, #5
 80025e8:	e023      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025ea:	2304      	movs	r3, #4
 80025ec:	e021      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025ee:	2303      	movs	r3, #3
 80025f0:	e01f      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e01d      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e01b      	b.n	8002632 <HAL_GPIO_Init+0x26a>
 80025fa:	bf00      	nop
 80025fc:	58000080 	.word	0x58000080
 8002600:	58024400 	.word	0x58024400
 8002604:	58000400 	.word	0x58000400
 8002608:	58020000 	.word	0x58020000
 800260c:	58020400 	.word	0x58020400
 8002610:	58020800 	.word	0x58020800
 8002614:	58020c00 	.word	0x58020c00
 8002618:	58021000 	.word	0x58021000
 800261c:	58021400 	.word	0x58021400
 8002620:	58021800 	.word	0x58021800
 8002624:	58021c00 	.word	0x58021c00
 8002628:	58022000 	.word	0x58022000
 800262c:	58022400 	.word	0x58022400
 8002630:	2300      	movs	r3, #0
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	f002 0203 	and.w	r2, r2, #3
 8002638:	0092      	lsls	r2, r2, #2
 800263a:	4093      	lsls	r3, r2
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002642:	4938      	ldr	r1, [pc, #224]	; (8002724 <HAL_GPIO_Init+0x35c>)
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3302      	adds	r3, #2
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80026ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	3301      	adds	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	f47f ae63 	bne.w	80023dc <HAL_GPIO_Init+0x14>
  }
}
 8002716:	bf00      	nop
 8002718:	3724      	adds	r7, #36	; 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	58000400 	.word	0x58000400

08002728 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272a:	b08f      	sub	sp, #60	; 0x3c
 800272c:	af0a      	add	r7, sp, #40	; 0x28
 800272e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e054      	b.n	80027e4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff f9d9 	bl	8001b0c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2203      	movs	r2, #3
 800275e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f008 f871 	bl	800a860 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	687e      	ldr	r6, [r7, #4]
 8002786:	466d      	mov	r5, sp
 8002788:	f106 0410 	add.w	r4, r6, #16
 800278c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002794:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002798:	e885 0003 	stmia.w	r5, {r0, r1}
 800279c:	1d33      	adds	r3, r6, #4
 800279e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a0:	6838      	ldr	r0, [r7, #0]
 80027a2:	f007 fffb 	bl	800a79c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f008 f868 	bl	800a882 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	687e      	ldr	r6, [r7, #4]
 80027ba:	466d      	mov	r5, sp
 80027bc:	f106 0410 	add.w	r4, r6, #16
 80027c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80027d0:	1d33      	adds	r3, r6, #4
 80027d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d4:	6838      	ldr	r0, [r7, #0]
 80027d6:	f008 fa99 	bl	800ad0c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07f      	b.n	80028fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe fd22 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2224      	movs	r2, #36	; 0x24
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800283c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800284c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	e006      	b.n	8002874 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002872:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d104      	bne.n	8002886 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002884:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_I2C_Init+0x11c>)
 8002892:	430b      	orrs	r3, r1
 8002894:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	ea42 0103 	orr.w	r1, r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	021a      	lsls	r2, r3, #8
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69d9      	ldr	r1, [r3, #28]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1a      	ldr	r2, [r3, #32]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	02008000 	.word	0x02008000

0800290c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b20      	cmp	r3, #32
 8002920:	d138      	bne.n	8002994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800292c:	2302      	movs	r3, #2
 800292e:	e032      	b.n	8002996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2224      	movs	r2, #36	; 0x24
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0201 	bic.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800295e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6819      	ldr	r1, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e000      	b.n	8002996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002994:	2302      	movs	r3, #2
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d139      	bne.n	8002a2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e033      	b.n	8002a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2224      	movs	r2, #36	; 0x24
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e000      	b.n	8002a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
  }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t i2sclk;
  uint32_t ispcm;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e10b      	b.n	8002c66 <HAL_I2S_Init+0x22a>
  assert_param(IS_I2S_FIRST_BIT(hi2s->Init.FirstBit));
  assert_param(IS_I2S_WS_INVERSION(hi2s->Init.WSInversion));
  assert_param(IS_I2S_DATA_24BIT_ALIGNMENT(hi2s->Init.Data24BitAlignment));
  assert_param(IS_I2S_MASTER_KEEP_IO_STATE(hi2s->Init.MasterKeepIOState));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fc7c 	bl	8001360 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Disable the selected I2S peripheral */
  if ((hi2s->Instance->CR1 & SPI_CR1_SPE) == SPI_CR1_SPE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d107      	bne.n	8002a8e <HAL_I2S_Init+0x52>
  {
    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  /* Clear I2S configuration register */
  CLEAR_REG(hi2s->Instance->I2SCFGR);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	651a      	str	r2, [r3, #80]	; 0x50

  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d008      	beq.n	8002ab0 <HAL_I2S_Init+0x74>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d004      	beq.n	8002ab0 <HAL_I2S_Init+0x74>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b0a      	cmp	r3, #10
 8002aac:	f040 8085 	bne.w	8002bba <HAL_I2S_Init+0x17e>
  {
    /*------------------------- I2SDIV and ODD Calculation ---------------------*/
    /* If the requested audio frequency is not the default, compute the prescaler */
    if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d058      	beq.n	8002b6a <HAL_I2S_Init+0x12e>
    {
      /* Check the frame length (For the Prescaler computing) ********************/
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_I2S_Init+0x8a>
      {
        /* Channel length is 32 bits */
        packetlength = 2UL;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e001      	b.n	8002aca <HAL_I2S_Init+0x8e>
      }
      else
      {
        /* Channel length is 16 bits */
        packetlength = 1UL;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
      }

      /* Check if PCM standard is used */
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b30      	cmp	r3, #48	; 0x30
 8002ad0:	d003      	beq.n	8002ada <HAL_I2S_Init+0x9e>
          (hi2s->Init.Standard == I2S_STANDARD_PCM_LONG))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
      if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) ||
 8002ad6:	2bb0      	cmp	r3, #176	; 0xb0
 8002ad8:	d102      	bne.n	8002ae0 <HAL_I2S_Init+0xa4>
      {
        ispcm = 1UL;
 8002ada:	2301      	movs	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e001      	b.n	8002ae4 <HAL_I2S_Init+0xa8>
      }
      else
      {
        ispcm = 0UL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
      }

      /* Get the source clock value: based on System Clock value */
      /* SPI1,SPI2 and SPI3 share the same source clock */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SPI123);
 8002ae4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ae8:	f002 fb06 	bl	80050f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002aec:	60b8      	str	r0, [r7, #8]

      /* Compute the Real divider depending on the MCLK output state, with a floating point */
      if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002af6:	d113      	bne.n	8002b20 <HAL_I2S_Init+0xe4>
      {
        /* MCLK output is enabled */
        tmp = (uint32_t)((((i2sclk / (256UL >> ispcm)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002af8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	3305      	adds	r3, #5
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	e014      	b.n	8002b4a <HAL_I2S_Init+0x10e>
      }
      else
      {
        /* MCLK output is disabled */
        tmp = (uint32_t)((((i2sclk / ((32UL >> ispcm) * packetlength)) * 10UL) / hi2s->Init.AudioFreq) + 5UL);
 8002b20:	2220      	movs	r2, #32
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b46:	3305      	adds	r3, #5
 8002b48:	613b      	str	r3, [r7, #16]
      }

      /* Remove the flatting point */
      tmp = tmp / 10UL;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4a48      	ldr	r2, [pc, #288]	; (8002c70 <HAL_I2S_Init+0x234>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	08db      	lsrs	r3, r3, #3
 8002b54:	613b      	str	r3, [r7, #16]

      /* Check the parity of the divider */
      i2sodd = (uint32_t)(tmp & (uint32_t)1UL);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	61bb      	str	r3, [r7, #24]

      /* Compute the i2sdiv prescaler */
      i2sdiv = (uint32_t)((tmp - i2sodd) / 2UL);
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	e003      	b.n	8002b72 <HAL_I2S_Init+0x136>
    }
    else
    {
      /* Set the default values */
      i2sdiv = 2UL;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	61fb      	str	r3, [r7, #28]
      i2sodd = 0UL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
    }

    /* Test if the obtain values are forbidden or out of range */
    if (((i2sodd == 1UL) && (i2sdiv == 1UL)) || (i2sdiv > 0xFFUL))
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d102      	bne.n	8002b7e <HAL_I2S_Init+0x142>
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d002      	beq.n	8002b84 <HAL_I2S_Init+0x148>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2bff      	cmp	r3, #255	; 0xff
 8002b82:	d907      	bls.n	8002b94 <HAL_I2S_Init+0x158>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b88:	f043 0210 	orr.w	r2, r3, #16
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	651a      	str	r2, [r3, #80]	; 0x50
      return  HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e068      	b.n	8002c66 <HAL_I2S_Init+0x22a>
    }

    /* Force i2smod to 1 just to be sure that (2xi2sdiv + i2sodd) is always higher than 0 */
    if (i2sdiv == 0UL)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_I2S_Init+0x162>
    {
      i2sodd = 1UL;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61bb      	str	r3, [r7, #24]
    }

    MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SDIV                 | SPI_I2SCFGR_ODD),
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ba4:	4b33      	ldr	r3, [pc, #204]	; (8002c74 <HAL_I2S_Init+0x238>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	0411      	lsls	r1, r2, #16
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	0612      	lsls	r2, r2, #24
 8002bb0:	4311      	orrs	r1, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6812      	ldr	r2, [r2, #0]
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  /*-------------------------- I2Sx I2SCFGR Configuration --------------------*/
  /* Configure I2SMOD, I2SCFG, I2SSTD, PCMSYNC, DATLEN ,CHLEN ,CKPOL, WSINV, DATAFMT, I2SDIV, ODD and MCKOE bits bits */
  /* And configure the I2S with the I2S_InitStruct values */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_I2SMOD   | SPI_I2SCFGR_I2SCFG     | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <HAL_I2S_Init+0x23c>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6851      	ldr	r1, [r2, #4]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6892      	ldr	r2, [r2, #8]
 8002bcc:	4311      	orrs	r1, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68d2      	ldr	r2, [r2, #12]
 8002bd2:	4311      	orrs	r1, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6992      	ldr	r2, [r2, #24]
 8002bd8:	4311      	orrs	r1, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6a12      	ldr	r2, [r2, #32]
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002be4:	4311      	orrs	r1, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6912      	ldr	r2, [r2, #16]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	651a      	str	r2, [r3, #80]	; 0x50
                                      (SPI_I2SCFGR_I2SMOD   | hi2s->Init.Mode        | \
                                       hi2s->Init.Standard  | hi2s->Init.DataFormat  | \
                                       hi2s->Init.CPOL      | hi2s->Init.WSInversion | \
                                       hi2s->Init.Data24BitAlignment | hi2s->Init.MCLKOutput));
  /*Clear status register*/
  WRITE_REG(hi2s->Instance->IFCR, 0x0FF8);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f640 72f8 	movw	r2, #4088	; 0xff8
 8002c00:	619a      	str	r2, [r3, #24]

  /*---------------------------- I2Sx CFG2 Configuration ----------------------*/

  /* Unlock the AF configuration to configure CFG2 register*/
  CLEAR_BIT(hi2s->Instance->CR1, SPI_CR1_IOLOCK);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c10:	601a      	str	r2, [r3, #0]

  MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_LSBFRST, hi2s->Init.FirstBit);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f423 0100 	bic.w	r1, r3, #8388608	; 0x800000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	60da      	str	r2, [r3, #12]

  /* Insure that AFCNTR is managed only by Master */
  if (IS_I2S_MASTER(hi2s->Init.Mode))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d007      	beq.n	8002c40 <HAL_I2S_Init+0x204>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d003      	beq.n	8002c40 <HAL_I2S_Init+0x204>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b0a      	cmp	r3, #10
 8002c3e:	d10a      	bne.n	8002c56 <HAL_I2S_Init+0x21a>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hi2s->Instance->CFG2, SPI_CFG2_AFCNTR, (hi2s->Init.MasterKeepIOState));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	60da      	str	r2, [r3, #12]
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	651a      	str	r2, [r3, #80]	; 0x50
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	cccccccd 	.word	0xcccccccd
 8002c74:	fe00ffff 	.word	0xfe00ffff
 8002c78:	fdff9040 	.word	0xfdff9040

08002c7c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0bf      	b.n	8002e0e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fbd8 	bl	8001458 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002cbe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6999      	ldr	r1, [r3, #24]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002cd4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b4a      	ldr	r3, [pc, #296]	; (8002e18 <HAL_LTDC_Init+0x19c>)
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6899      	ldr	r1, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68d9      	ldr	r1, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <HAL_LTDC_Init+0x19c>)
 8002d1e:	400b      	ands	r3, r1
 8002d20:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	041b      	lsls	r3, r3, #16
 8002d28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68d9      	ldr	r1, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1a      	ldr	r2, [r3, #32]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6919      	ldr	r1, [r3, #16]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b33      	ldr	r3, [pc, #204]	; (8002e18 <HAL_LTDC_Init+0x19c>)
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	041b      	lsls	r3, r3, #16
 8002d56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6919      	ldr	r1, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6959      	ldr	r1, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <HAL_LTDC_Init+0x19c>)
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	041b      	lsls	r3, r3, #16
 8002d84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6959      	ldr	r1, [r3, #20]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002dac:	041b      	lsls	r3, r3, #16
 8002dae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0206 	orr.w	r2, r2, #6
 8002dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	f000f800 	.word	0xf000f800

08002e1c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e1c:	b5b0      	push	{r4, r5, r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_LTDC_ConfigLayer+0x1a>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e02c      	b.n	8002e90 <HAL_LTDC_ConfigLayer+0x74>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2202      	movs	r2, #2
 8002e42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2134      	movs	r1, #52	; 0x34
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	4614      	mov	r4, r2
 8002e5a:	461d      	mov	r5, r3
 8002e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f811 	bl	8002e98 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bdb0      	pop	{r4, r5, r7, pc}

08002e98 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	0c1b      	lsrs	r3, r3, #16
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	4413      	add	r3, r2
 8002eb6:	041b      	lsls	r3, r3, #16
 8002eb8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	01db      	lsls	r3, r3, #7
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3384      	adds	r3, #132	; 0x84
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	01d2      	lsls	r2, r2, #7
 8002ed4:	440a      	add	r2, r1
 8002ed6:	3284      	adds	r2, #132	; 0x84
 8002ed8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002edc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eee:	4413      	add	r3, r2
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	01db      	lsls	r3, r3, #7
 8002efc:	440b      	add	r3, r1
 8002efe:	3384      	adds	r3, #132	; 0x84
 8002f00:	4619      	mov	r1, r3
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f16:	4413      	add	r3, r2
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	01db      	lsls	r3, r3, #7
 8002f26:	4413      	add	r3, r2
 8002f28:	3384      	adds	r3, #132	; 0x84
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	4611      	mov	r1, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	01d2      	lsls	r2, r2, #7
 8002f36:	440a      	add	r2, r1
 8002f38:	3284      	adds	r2, #132	; 0x84
 8002f3a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002f3e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f4e:	4413      	add	r3, r2
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4619      	mov	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	01db      	lsls	r3, r3, #7
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3384      	adds	r3, #132	; 0x84
 8002f60:	4619      	mov	r1, r3
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	01db      	lsls	r3, r3, #7
 8002f72:	4413      	add	r3, r2
 8002f74:	3384      	adds	r3, #132	; 0x84
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	01d2      	lsls	r2, r2, #7
 8002f82:	440a      	add	r2, r1
 8002f84:	3284      	adds	r2, #132	; 0x84
 8002f86:	f023 0307 	bic.w	r3, r3, #7
 8002f8a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	01db      	lsls	r3, r3, #7
 8002f96:	4413      	add	r3, r2
 8002f98:	3384      	adds	r3, #132	; 0x84
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002fb2:	041b      	lsls	r3, r3, #16
 8002fb4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	061b      	lsls	r3, r3, #24
 8002fbc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	01db      	lsls	r3, r3, #7
 8002fc8:	4413      	add	r3, r2
 8002fca:	3384      	adds	r3, #132	; 0x84
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	01db      	lsls	r3, r3, #7
 8002fd8:	4413      	add	r3, r2
 8002fda:	3384      	adds	r3, #132	; 0x84
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2300      	movs	r3, #0
 8002fe0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fe8:	461a      	mov	r2, r3
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	01db      	lsls	r3, r3, #7
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3384      	adds	r3, #132	; 0x84
 8003000:	4619      	mov	r1, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	01db      	lsls	r3, r3, #7
 8003012:	4413      	add	r3, r2
 8003014:	3384      	adds	r3, #132	; 0x84
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	4611      	mov	r1, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	01d2      	lsls	r2, r2, #7
 8003022:	440a      	add	r2, r1
 8003024:	3284      	adds	r2, #132	; 0x84
 8003026:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800302a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	01db      	lsls	r3, r3, #7
 8003036:	4413      	add	r3, r2
 8003038:	3384      	adds	r3, #132	; 0x84
 800303a:	461a      	mov	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	01db      	lsls	r3, r3, #7
 800304c:	4413      	add	r3, r2
 800304e:	3384      	adds	r3, #132	; 0x84
 8003050:	69da      	ldr	r2, [r3, #28]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4619      	mov	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	01db      	lsls	r3, r3, #7
 800305c:	440b      	add	r3, r1
 800305e:	3384      	adds	r3, #132	; 0x84
 8003060:	4619      	mov	r1, r3
 8003062:	4b58      	ldr	r3, [pc, #352]	; (80031c4 <LTDC_SetConfig+0x32c>)
 8003064:	4013      	ands	r3, r2
 8003066:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	68f9      	ldr	r1, [r7, #12]
 8003072:	6809      	ldr	r1, [r1, #0]
 8003074:	4608      	mov	r0, r1
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	01c9      	lsls	r1, r1, #7
 800307a:	4401      	add	r1, r0
 800307c:	3184      	adds	r1, #132	; 0x84
 800307e:	4313      	orrs	r3, r2
 8003080:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	01db      	lsls	r3, r3, #7
 800308c:	4413      	add	r3, r2
 800308e:	3384      	adds	r3, #132	; 0x84
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	01db      	lsls	r3, r3, #7
 800309c:	4413      	add	r3, r2
 800309e:	3384      	adds	r3, #132	; 0x84
 80030a0:	461a      	mov	r2, r3
 80030a2:	2300      	movs	r3, #0
 80030a4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	01db      	lsls	r3, r3, #7
 80030b0:	4413      	add	r3, r2
 80030b2:	3384      	adds	r3, #132	; 0x84
 80030b4:	461a      	mov	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80030c4:	2304      	movs	r3, #4
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e01b      	b.n	8003102 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d102      	bne.n	80030d8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80030d2:	2303      	movs	r3, #3
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	e014      	b.n	8003102 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d00b      	beq.n	80030f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d007      	beq.n	80030f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d003      	beq.n	80030f8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80030f4:	2b07      	cmp	r3, #7
 80030f6:	d102      	bne.n	80030fe <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80030f8:	2302      	movs	r3, #2
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	e001      	b.n	8003102 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80030fe:	2301      	movs	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	01db      	lsls	r3, r3, #7
 800310c:	4413      	add	r3, r2
 800310e:	3384      	adds	r3, #132	; 0x84
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	4611      	mov	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	01d2      	lsls	r2, r2, #7
 800311c:	440a      	add	r2, r1
 800311e:	3284      	adds	r2, #132	; 0x84
 8003120:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003124:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	fb02 f303 	mul.w	r3, r2, r3
 8003130:	041a      	lsls	r2, r3, #16
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	1acb      	subs	r3, r1, r3
 800313c:	69f9      	ldr	r1, [r7, #28]
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	3307      	adds	r3, #7
 8003144:	68f9      	ldr	r1, [r7, #12]
 8003146:	6809      	ldr	r1, [r1, #0]
 8003148:	4608      	mov	r0, r1
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	01c9      	lsls	r1, r1, #7
 800314e:	4401      	add	r1, r0
 8003150:	3184      	adds	r1, #132	; 0x84
 8003152:	4313      	orrs	r3, r2
 8003154:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	01db      	lsls	r3, r3, #7
 8003160:	4413      	add	r3, r2
 8003162:	3384      	adds	r3, #132	; 0x84
 8003164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4619      	mov	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	01db      	lsls	r3, r3, #7
 8003170:	440b      	add	r3, r1
 8003172:	3384      	adds	r3, #132	; 0x84
 8003174:	4619      	mov	r1, r3
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <LTDC_SetConfig+0x330>)
 8003178:	4013      	ands	r3, r2
 800317a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	01db      	lsls	r3, r3, #7
 8003186:	4413      	add	r3, r2
 8003188:	3384      	adds	r3, #132	; 0x84
 800318a:	461a      	mov	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	01db      	lsls	r3, r3, #7
 800319c:	4413      	add	r3, r2
 800319e:	3384      	adds	r3, #132	; 0x84
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	4611      	mov	r1, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	01d2      	lsls	r2, r2, #7
 80031ac:	440a      	add	r2, r1
 80031ae:	3284      	adds	r2, #132	; 0x84
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6013      	str	r3, [r2, #0]
}
 80031b6:	bf00      	nop
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	fffff8f8 	.word	0xfffff8f8
 80031c8:	fffff800 	.word	0xfffff800

080031cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ce:	b08f      	sub	sp, #60	; 0x3c
 80031d0:	af0a      	add	r7, sp, #40	; 0x28
 80031d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e116      	b.n	800340c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fe fc3d 	bl	8001a78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2203      	movs	r2, #3
 8003202:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d102      	bne.n	8003218 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f007 fb1f 	bl	800a860 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	687e      	ldr	r6, [r7, #4]
 800322a:	466d      	mov	r5, sp
 800322c:	f106 0410 	add.w	r4, r6, #16
 8003230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003238:	e894 0003 	ldmia.w	r4, {r0, r1}
 800323c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003240:	1d33      	adds	r3, r6, #4
 8003242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003244:	6838      	ldr	r0, [r7, #0]
 8003246:	f007 faa9 	bl	800a79c <USB_CoreInit>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0d7      	b.n	800340c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f007 fb0d 	bl	800a882 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003268:	2300      	movs	r3, #0
 800326a:	73fb      	strb	r3, [r7, #15]
 800326c:	e04a      	b.n	8003304 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	333d      	adds	r3, #61	; 0x3d
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	333c      	adds	r3, #60	; 0x3c
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	b298      	uxth	r0, r3
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	3342      	adds	r3, #66	; 0x42
 80032aa:	4602      	mov	r2, r0
 80032ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	333f      	adds	r3, #63	; 0x3f
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3344      	adds	r3, #68	; 0x44
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	3348      	adds	r3, #72	; 0x48
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	3350      	adds	r3, #80	; 0x50
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	3301      	adds	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	d3af      	bcc.n	800326e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	e044      	b.n	800339e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	3301      	adds	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d3b5      	bcc.n	8003314 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	687e      	ldr	r6, [r7, #4]
 80033b0:	466d      	mov	r5, sp
 80033b2:	f106 0410 	add.w	r4, r6, #16
 80033b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80033c6:	1d33      	adds	r3, r6, #4
 80033c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ca:	6838      	ldr	r0, [r7, #0]
 80033cc:	f007 fa84 	bl	800a8d8 <USB_DevInit>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e014      	b.n	800340c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d102      	bne.n	8003400 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f80a 	bl	8003414 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f007 fc34 	bl	800ac72 <USB_DevDisconnect>

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003414 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_PCDEx_ActivateLPM+0x44>)
 8003444:	4313      	orrs	r3, r2
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	10000003 	.word	0x10000003

0800345c <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8003464:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <HAL_PWREx_ConfigSupply+0x6c>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b04      	cmp	r3, #4
 800346e:	d008      	beq.n	8003482 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003470:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <HAL_PWREx_ConfigSupply+0x6c>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	d001      	beq.n	8003482 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e01d      	b.n	80034be <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_PWREx_ConfigSupply+0x6c>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f023 0207 	bic.w	r2, r3, #7
 800348a:	490f      	ldr	r1, [pc, #60]	; (80034c8 <HAL_PWREx_ConfigSupply+0x6c>)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4313      	orrs	r3, r2
 8003490:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003492:	f7fe fd6d 	bl	8001f70 <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003498:	e009      	b.n	80034ae <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 800349a:	f7fe fd69 	bl	8001f70 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034a8:	d901      	bls.n	80034ae <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e007      	b.n	80034be <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_PWREx_ConfigSupply+0x6c>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ba:	d1ee      	bne.n	800349a <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	58024800 	.word	0x58024800

080034cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80034d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034da:	60d3      	str	r3, [r2, #12]
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	58024800 	.word	0x58024800

080034ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	; 0x28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e3a4      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8087 	beq.w	800361a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800350c:	4b9a      	ldr	r3, [pc, #616]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003516:	4b98      	ldr	r3, [pc, #608]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	2b10      	cmp	r3, #16
 8003520:	d007      	beq.n	8003532 <HAL_RCC_OscConfig+0x46>
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	2b18      	cmp	r3, #24
 8003526:	d110      	bne.n	800354a <HAL_RCC_OscConfig+0x5e>
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d10b      	bne.n	800354a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003532:	4b91      	ldr	r3, [pc, #580]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d06c      	beq.n	8003618 <HAL_RCC_OscConfig+0x12c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d168      	bne.n	8003618 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e37e      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003552:	d106      	bne.n	8003562 <HAL_RCC_OscConfig+0x76>
 8003554:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a87      	ldr	r2, [pc, #540]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 800355a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	e02e      	b.n	80035c0 <HAL_RCC_OscConfig+0xd4>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x98>
 800356a:	4b83      	ldr	r3, [pc, #524]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a82      	ldr	r2, [pc, #520]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b80      	ldr	r3, [pc, #512]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a7f      	ldr	r2, [pc, #508]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 800357c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e01d      	b.n	80035c0 <HAL_RCC_OscConfig+0xd4>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0xbc>
 800358e:	4b7a      	ldr	r3, [pc, #488]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a79      	ldr	r2, [pc, #484]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b77      	ldr	r3, [pc, #476]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a76      	ldr	r2, [pc, #472]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0xd4>
 80035a8:	4b73      	ldr	r3, [pc, #460]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a72      	ldr	r2, [pc, #456]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80035ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4b70      	ldr	r3, [pc, #448]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a6f      	ldr	r2, [pc, #444]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80035ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d013      	beq.n	80035f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fcd2 	bl	8001f70 <HAL_GetTick>
 80035cc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fcce 	bl	8001f70 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e332      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035e2:	4b65      	ldr	r3, [pc, #404]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0xe4>
 80035ee:	e014      	b.n	800361a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe fcbe 	bl	8001f70 <HAL_GetTick>
 80035f4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fcba 	bl	8001f70 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e31e      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800360a:	4b5b      	ldr	r3, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x10c>
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 80b0 	beq.w	8003788 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003628:	4b53      	ldr	r3, [pc, #332]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003630:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003632:	4b51      	ldr	r3, [pc, #324]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <HAL_RCC_OscConfig+0x162>
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b18      	cmp	r3, #24
 8003642:	d149      	bne.n	80036d8 <HAL_RCC_OscConfig+0x1ec>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d144      	bne.n	80036d8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800364e:	4b4a      	ldr	r3, [pc, #296]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x17a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e2f0      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003666:	4b44      	ldr	r3, [pc, #272]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 0219 	bic.w	r2, r3, #25
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	4941      	ldr	r1, [pc, #260]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe fc7a 	bl	8001f70 <HAL_GetTick>
 800367c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003680:	f7fe fc76 	bl	8001f70 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e2da      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003692:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	f7fe fc95 	bl	8001fcc <HAL_GetREVID>
 80036a2:	4602      	mov	r2, r0
 80036a4:	f241 0303 	movw	r3, #4099	; 0x1003
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d80a      	bhi.n	80036c2 <HAL_RCC_OscConfig+0x1d6>
 80036ac:	4b32      	ldr	r3, [pc, #200]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	031b      	lsls	r3, r3, #12
 80036ba:	492f      	ldr	r1, [pc, #188]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c0:	e062      	b.n	8003788 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	4929      	ldr	r1, [pc, #164]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d6:	e057      	b.n	8003788 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d038      	beq.n	8003752 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036e0:	4b25      	ldr	r3, [pc, #148]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 0219 	bic.w	r2, r3, #25
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4922      	ldr	r1, [pc, #136]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fe fc3d 	bl	8001f70 <HAL_GetTick>
 80036f6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fa:	f7fe fc39 	bl	8001f70 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e29d      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	f7fe fc58 	bl	8001fcc <HAL_GetREVID>
 800371c:	4602      	mov	r2, r0
 800371e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003722:	429a      	cmp	r2, r3
 8003724:	d80a      	bhi.n	800373c <HAL_RCC_OscConfig+0x250>
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	031b      	lsls	r3, r3, #12
 8003734:	4910      	ldr	r1, [pc, #64]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]
 800373a:	e025      	b.n	8003788 <HAL_RCC_OscConfig+0x29c>
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	490b      	ldr	r1, [pc, #44]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
 8003750:	e01a      	b.n	8003788 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <HAL_RCC_OscConfig+0x28c>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fe fc07 	bl	8001f70 <HAL_GetTick>
 8003762:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003766:	f7fe fc03 	bl	8001f70 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d903      	bls.n	800377c <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e267      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
 8003778:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800377c:	4ba0      	ldr	r3, [pc, #640]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ee      	bne.n	8003766 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 808f 	beq.w	80038b4 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003796:	4b9a      	ldr	r3, [pc, #616]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800379e:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037a0:	4b97      	ldr	r3, [pc, #604]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d007      	beq.n	80037bc <HAL_RCC_OscConfig+0x2d0>
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	2b18      	cmp	r3, #24
 80037b0:	d12d      	bne.n	800380e <HAL_RCC_OscConfig+0x322>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d128      	bne.n	800380e <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037bc:	4b90      	ldr	r3, [pc, #576]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_OscConfig+0x2e8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e239      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037d4:	f7fe fbfa 	bl	8001fcc <HAL_GetREVID>
 80037d8:	4602      	mov	r2, r0
 80037da:	f241 0303 	movw	r3, #4099	; 0x1003
 80037de:	429a      	cmp	r2, r3
 80037e0:	d80a      	bhi.n	80037f8 <HAL_RCC_OscConfig+0x30c>
 80037e2:	4b87      	ldr	r3, [pc, #540]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	069b      	lsls	r3, r3, #26
 80037f0:	4983      	ldr	r1, [pc, #524]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037f6:	e05d      	b.n	80038b4 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037f8:	4b81      	ldr	r3, [pc, #516]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	497e      	ldr	r1, [pc, #504]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003808:	4313      	orrs	r3, r2
 800380a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800380c:	e052      	b.n	80038b4 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d035      	beq.n	8003882 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003816:	4b7a      	ldr	r3, [pc, #488]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a79      	ldr	r2, [pc, #484]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 800381c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003822:	f7fe fba5 	bl	8001f70 <HAL_GetTick>
 8003826:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800382a:	f7fe fba1 	bl	8001f70 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e205      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800383c:	4b70      	ldr	r3, [pc, #448]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f0      	beq.n	800382a <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003848:	f7fe fbc0 	bl	8001fcc <HAL_GetREVID>
 800384c:	4602      	mov	r2, r0
 800384e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003852:	429a      	cmp	r2, r3
 8003854:	d80a      	bhi.n	800386c <HAL_RCC_OscConfig+0x380>
 8003856:	4b6a      	ldr	r3, [pc, #424]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	069b      	lsls	r3, r3, #26
 8003864:	4966      	ldr	r1, [pc, #408]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
 800386a:	e023      	b.n	80038b4 <HAL_RCC_OscConfig+0x3c8>
 800386c:	4b64      	ldr	r3, [pc, #400]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	4961      	ldr	r1, [pc, #388]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 800387c:	4313      	orrs	r3, r2
 800387e:	60cb      	str	r3, [r1, #12]
 8003880:	e018      	b.n	80038b4 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003882:	4b5f      	ldr	r3, [pc, #380]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a5e      	ldr	r2, [pc, #376]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800388c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388e:	f7fe fb6f 	bl	8001f70 <HAL_GetTick>
 8003892:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003896:	f7fe fb6b 	bl	8001f70 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e1cf      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038a8:	4b55      	ldr	r3, [pc, #340]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d036      	beq.n	800392e <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d019      	beq.n	80038fc <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c8:	4b4d      	ldr	r3, [pc, #308]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80038ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038cc:	4a4c      	ldr	r2, [pc, #304]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe fb4c 	bl	8001f70 <HAL_GetTick>
 80038d8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fe fb48 	bl	8001f70 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e1ac      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038ee:	4b44      	ldr	r3, [pc, #272]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80038f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x3f0>
 80038fa:	e018      	b.n	800392e <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038fc:	4b40      	ldr	r3, [pc, #256]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80038fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003900:	4a3f      	ldr	r2, [pc, #252]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003908:	f7fe fb32 	bl	8001f70 <HAL_GetTick>
 800390c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003910:	f7fe fb2e 	bl	8001f70 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e192      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003922:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d036      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d019      	beq.n	8003976 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003942:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a2e      	ldr	r2, [pc, #184]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800394c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800394e:	f7fe fb0f 	bl	8001f70 <HAL_GetTick>
 8003952:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003956:	f7fe fb0b 	bl	8001f70 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e16f      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003968:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x46a>
 8003974:	e018      	b.n	80039a8 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003976:	4b22      	ldr	r3, [pc, #136]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 800397c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003980:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003982:	f7fe faf5 	bl	8001f70 <HAL_GetTick>
 8003986:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800398a:	f7fe faf1 	bl	8001f70 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e155      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800399c:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8086 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <HAL_RCC_OscConfig+0x518>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a12      	ldr	r2, [pc, #72]	; (8003a04 <HAL_RCC_OscConfig+0x518>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039c2:	f7fe fad5 	bl	8001f70 <HAL_GetTick>
 80039c6:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039ca:	f7fe fad1 	bl	8001f70 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e135      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_OscConfig+0x518>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10b      	bne.n	8003a08 <HAL_RCC_OscConfig+0x51c>
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a02      	ldr	r2, [pc, #8]	; (8003a00 <HAL_RCC_OscConfig+0x514>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70
 80039fc:	e032      	b.n	8003a64 <HAL_RCC_OscConfig+0x578>
 80039fe:	bf00      	nop
 8003a00:	58024400 	.word	0x58024400
 8003a04:	58024800 	.word	0x58024800
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x53e>
 8003a10:	4b8f      	ldr	r3, [pc, #572]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a8e      	ldr	r2, [pc, #568]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1c:	4b8c      	ldr	r3, [pc, #560]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	4a8b      	ldr	r2, [pc, #556]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a22:	f023 0304 	bic.w	r3, r3, #4
 8003a26:	6713      	str	r3, [r2, #112]	; 0x70
 8003a28:	e01c      	b.n	8003a64 <HAL_RCC_OscConfig+0x578>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x560>
 8003a32:	4b87      	ldr	r3, [pc, #540]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a86      	ldr	r2, [pc, #536]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3e:	4b84      	ldr	r3, [pc, #528]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a83      	ldr	r2, [pc, #524]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0x578>
 8003a4c:	4b80      	ldr	r3, [pc, #512]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	4a7f      	ldr	r2, [pc, #508]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	6713      	str	r3, [r2, #112]	; 0x70
 8003a58:	4b7d      	ldr	r3, [pc, #500]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	4a7c      	ldr	r2, [pc, #496]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a5e:	f023 0304 	bic.w	r3, r3, #4
 8003a62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d015      	beq.n	8003a98 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6c:	f7fe fa80 	bl	8001f70 <HAL_GetTick>
 8003a70:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fe fa7c 	bl	8001f70 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0de      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a8a:	4b71      	ldr	r3, [pc, #452]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0ee      	beq.n	8003a74 <HAL_RCC_OscConfig+0x588>
 8003a96:	e014      	b.n	8003ac2 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fe fa6a 	bl	8001f70 <HAL_GetTick>
 8003a9c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fa66 	bl	8001f70 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e0c8      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ab6:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1ee      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80bd 	beq.w	8003c46 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003acc:	4b60      	ldr	r3, [pc, #384]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ad4:	2b18      	cmp	r3, #24
 8003ad6:	f000 80b4 	beq.w	8003c42 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	f040 8095 	bne.w	8003c0e <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae4:	4b5a      	ldr	r3, [pc, #360]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a59      	ldr	r2, [pc, #356]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe fa3e 	bl	8001f70 <HAL_GetTick>
 8003af4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fe fa3a 	bl	8001f70 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e09e      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b0a:	4b51      	ldr	r3, [pc, #324]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b16:	4b4e      	ldr	r3, [pc, #312]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b1a:	4b4e      	ldr	r3, [pc, #312]	; (8003c54 <HAL_RCC_OscConfig+0x768>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b26:	0112      	lsls	r2, r2, #4
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	4949      	ldr	r1, [pc, #292]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	628b      	str	r3, [r1, #40]	; 0x28
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	3b01      	subs	r3, #1
 8003b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	025b      	lsls	r3, r3, #9
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	041b      	lsls	r3, r3, #16
 8003b4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	061b      	lsls	r3, r3, #24
 8003b5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b60:	493b      	ldr	r1, [pc, #236]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003b66:	4b3a      	ldr	r3, [pc, #232]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	4a39      	ldr	r2, [pc, #228]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b72:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b76:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <HAL_RCC_OscConfig+0x76c>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b7e:	00d2      	lsls	r2, r2, #3
 8003b80:	4933      	ldr	r1, [pc, #204]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b86:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f023 020c 	bic.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	492f      	ldr	r1, [pc, #188]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b98:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	f023 0202 	bic.w	r2, r3, #2
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	492a      	ldr	r1, [pc, #168]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003baa:	4b29      	ldr	r3, [pc, #164]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	4a28      	ldr	r2, [pc, #160]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb6:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	4a25      	ldr	r2, [pc, #148]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003bc2:	4b23      	ldr	r3, [pc, #140]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003bce:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	4a1f      	ldr	r2, [pc, #124]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bda:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fe f9c3 	bl	8001f70 <HAL_GetTick>
 8003bea:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fe f9bf 	bl	8001f70 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e023      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x702>
 8003c0c:	e01b      	b.n	8003c46 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a0f      	ldr	r2, [pc, #60]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fe f9a9 	bl	8001f70 <HAL_GetTick>
 8003c1e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fe f9a5 	bl	8001f70 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e009      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCC_OscConfig+0x764>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x736>
 8003c40:	e001      	b.n	8003c46 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3728      	adds	r7, #40	; 0x28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	58024400 	.word	0x58024400
 8003c54:	fffffc0c 	.word	0xfffffc0c
 8003c58:	ffff0007 	.word	0xffff0007

08003c5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e18d      	b.n	8003f8c <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c70:	4b8a      	ldr	r3, [pc, #552]	; (8003e9c <HAL_RCC_ClockConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d910      	bls.n	8003ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c7e:	4b87      	ldr	r3, [pc, #540]	; (8003e9c <HAL_RCC_ClockConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 020f 	bic.w	r2, r3, #15
 8003c86:	4985      	ldr	r1, [pc, #532]	; (8003e9c <HAL_RCC_ClockConfig+0x240>)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b83      	ldr	r3, [pc, #524]	; (8003e9c <HAL_RCC_ClockConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e175      	b.n	8003f8c <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d010      	beq.n	8003cce <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	4b7b      	ldr	r3, [pc, #492]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d908      	bls.n	8003cce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cbc:	4b78      	ldr	r3, [pc, #480]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	4975      	ldr	r1, [pc, #468]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d010      	beq.n	8003cfc <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	4b70      	ldr	r3, [pc, #448]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d908      	bls.n	8003cfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cea:	4b6d      	ldr	r3, [pc, #436]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	496a      	ldr	r1, [pc, #424]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d010      	beq.n	8003d2a <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	4b64      	ldr	r3, [pc, #400]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d908      	bls.n	8003d2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d18:	4b61      	ldr	r3, [pc, #388]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	495e      	ldr	r1, [pc, #376]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d010      	beq.n	8003d58 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d908      	bls.n	8003d58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d46:	4b56      	ldr	r3, [pc, #344]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	4953      	ldr	r1, [pc, #332]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d010      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d908      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	4b4a      	ldr	r3, [pc, #296]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f023 020f 	bic.w	r2, r3, #15
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4947      	ldr	r1, [pc, #284]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d055      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d92:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	4940      	ldr	r1, [pc, #256]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d107      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dac:	4b3c      	ldr	r3, [pc, #240]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d121      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e0e7      	b.n	8003f8c <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d115      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e0db      	b.n	8003f8c <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d107      	bne.n	8003dec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ddc:	4b30      	ldr	r3, [pc, #192]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0cf      	b.n	8003f8c <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dec:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0c7      	b.n	8003f8c <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dfc:	4b28      	ldr	r3, [pc, #160]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f023 0207 	bic.w	r2, r3, #7
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4925      	ldr	r1, [pc, #148]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0e:	f7fe f8af 	bl	8001f70 <HAL_GetTick>
 8003e12:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e16:	f7fe f8ab 	bl	8001f70 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e0af      	b.n	8003f8c <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d1eb      	bne.n	8003e16 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	4b14      	ldr	r3, [pc, #80]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d208      	bcs.n	8003e6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5a:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f023 020f 	bic.w	r2, r3, #15
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	490e      	ldr	r1, [pc, #56]	; (8003ea0 <HAL_RCC_ClockConfig+0x244>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_ClockConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d214      	bcs.n	8003ea4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_RCC_ClockConfig+0x240>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 020f 	bic.w	r2, r3, #15
 8003e82:	4906      	ldr	r1, [pc, #24]	; (8003e9c <HAL_RCC_ClockConfig+0x240>)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <HAL_RCC_ClockConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e077      	b.n	8003f8c <HAL_RCC_ClockConfig+0x330>
 8003e9c:	52002000 	.word	0x52002000
 8003ea0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d010      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691a      	ldr	r2, [r3, #16]
 8003eb4:	4b37      	ldr	r3, [pc, #220]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d208      	bcs.n	8003ed2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ec0:	4b34      	ldr	r3, [pc, #208]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	4931      	ldr	r1, [pc, #196]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d010      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	4b2c      	ldr	r3, [pc, #176]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d208      	bcs.n	8003f00 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003eee:	4b29      	ldr	r3, [pc, #164]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4926      	ldr	r1, [pc, #152]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d010      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699a      	ldr	r2, [r3, #24]
 8003f10:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d208      	bcs.n	8003f2e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	491a      	ldr	r1, [pc, #104]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d010      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d208      	bcs.n	8003f5c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	490f      	ldr	r1, [pc, #60]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f5c:	f000 f822 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f60:	4601      	mov	r1, r0
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <HAL_RCC_ClockConfig+0x338>)
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <HAL_RCC_ClockConfig+0x33c>)
 8003f6e:	5cd3      	ldrb	r3, [r2, r3]
 8003f70:	f003 031f 	and.w	r3, r3, #31
 8003f74:	fa21 f303 	lsr.w	r3, r1, r3
 8003f78:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <HAL_RCC_ClockConfig+0x340>)
 8003f7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003f7c:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <HAL_RCC_ClockConfig+0x344>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fd ffab 	bl	8001edc <HAL_InitTick>
 8003f86:	4603      	mov	r3, r0
 8003f88:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	58024400 	.word	0x58024400
 8003f98:	0800af6c 	.word	0x0800af6c
 8003f9c:	24000000 	.word	0x24000000
 8003fa0:	24000008 	.word	0x24000008

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b089      	sub	sp, #36	; 0x24
 8003fa8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003faa:	4baf      	ldr	r3, [pc, #700]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fb2:	2b18      	cmp	r3, #24
 8003fb4:	f200 814e 	bhi.w	8004254 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08004025 	.word	0x08004025
 8003fc4:	08004255 	.word	0x08004255
 8003fc8:	08004255 	.word	0x08004255
 8003fcc:	08004255 	.word	0x08004255
 8003fd0:	08004255 	.word	0x08004255
 8003fd4:	08004255 	.word	0x08004255
 8003fd8:	08004255 	.word	0x08004255
 8003fdc:	08004255 	.word	0x08004255
 8003fe0:	0800404b 	.word	0x0800404b
 8003fe4:	08004255 	.word	0x08004255
 8003fe8:	08004255 	.word	0x08004255
 8003fec:	08004255 	.word	0x08004255
 8003ff0:	08004255 	.word	0x08004255
 8003ff4:	08004255 	.word	0x08004255
 8003ff8:	08004255 	.word	0x08004255
 8003ffc:	08004255 	.word	0x08004255
 8004000:	08004051 	.word	0x08004051
 8004004:	08004255 	.word	0x08004255
 8004008:	08004255 	.word	0x08004255
 800400c:	08004255 	.word	0x08004255
 8004010:	08004255 	.word	0x08004255
 8004014:	08004255 	.word	0x08004255
 8004018:	08004255 	.word	0x08004255
 800401c:	08004255 	.word	0x08004255
 8004020:	08004057 	.word	0x08004057
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004024:	4b90      	ldr	r3, [pc, #576]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d009      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004030:	4b8d      	ldr	r3, [pc, #564]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	08db      	lsrs	r3, r3, #3
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	4a8c      	ldr	r2, [pc, #560]	; (800426c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
 8004040:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004042:	e10a      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004044:	4b89      	ldr	r3, [pc, #548]	; (800426c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004046:	61bb      	str	r3, [r7, #24]
    break;
 8004048:	e107      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800404a:	4b89      	ldr	r3, [pc, #548]	; (8004270 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800404c:	61bb      	str	r3, [r7, #24]
    break;
 800404e:	e104      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004050:	4b88      	ldr	r3, [pc, #544]	; (8004274 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004052:	61bb      	str	r3, [r7, #24]
    break;
 8004054:	e101      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004056:	4b84      	ldr	r3, [pc, #528]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004060:	4b81      	ldr	r3, [pc, #516]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800406a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800406c:	4b7e      	ldr	r3, [pc, #504]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004076:	4b7c      	ldr	r3, [pc, #496]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407a:	08db      	lsrs	r3, r3, #3
 800407c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80da 	beq.w	800424e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d05a      	beq.n	8004156 <HAL_RCC_GetSysClockFreq+0x1b2>
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d302      	bcc.n	80040aa <HAL_RCC_GetSysClockFreq+0x106>
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d078      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0x1f6>
 80040a8:	e099      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040aa:	4b6f      	ldr	r3, [pc, #444]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d02d      	beq.n	8004112 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040b6:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	08db      	lsrs	r3, r3, #3
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	4a6a      	ldr	r2, [pc, #424]	; (800426c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80040c2:	fa22 f303 	lsr.w	r3, r2, r3
 80040c6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	ee07 3a90 	vmov	s15, r3
 80040d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e0:	4b61      	ldr	r3, [pc, #388]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80040f4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004278 <HAL_RCC_GetSysClockFreq+0x2d4>
 80040f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004104:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004110:	e087      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	ee07 3a90 	vmov	s15, r3
 8004118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800427c <HAL_RCC_GetSysClockFreq+0x2d8>
 8004120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004124:	4b50      	ldr	r3, [pc, #320]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412c:	ee07 3a90 	vmov	s15, r3
 8004130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004134:	ed97 6a02 	vldr	s12, [r7, #8]
 8004138:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004278 <HAL_RCC_GetSysClockFreq+0x2d4>
 800413c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004140:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004144:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004150:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004154:	e065      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004160:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004280 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004168:	4b3f      	ldr	r3, [pc, #252]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004170:	ee07 3a90 	vmov	s15, r3
 8004174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004178:	ed97 6a02 	vldr	s12, [r7, #8]
 800417c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004278 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004180:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004184:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800418c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004194:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004198:	e043      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	ee07 3a90 	vmov	s15, r3
 80041a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004284 <HAL_RCC_GetSysClockFreq+0x2e0>
 80041a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ac:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80041c0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004278 <HAL_RCC_GetSysClockFreq+0x2d4>
 80041c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041dc:	e021      	b.n	8004222 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004280 <HAL_RCC_GetSysClockFreq+0x2dc>
 80041ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f8:	ee07 3a90 	vmov	s15, r3
 80041fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004200:	ed97 6a02 	vldr	s12, [r7, #8]
 8004204:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004278 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004208:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004210:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004214:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004220:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	0a5b      	lsrs	r3, r3, #9
 8004228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800422c:	3301      	adds	r3, #1
 800422e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800423a:	edd7 6a07 	vldr	s13, [r7, #28]
 800423e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004246:	ee17 3a90 	vmov	r3, s15
 800424a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800424c:	e005      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
    break;
 8004252:	e002      	b.n	800425a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004256:	61bb      	str	r3, [r7, #24]
    break;
 8004258:	bf00      	nop
  }

  return sysclockfreq;
 800425a:	69bb      	ldr	r3, [r7, #24]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3724      	adds	r7, #36	; 0x24
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	58024400 	.word	0x58024400
 800426c:	03d09000 	.word	0x03d09000
 8004270:	003d0900 	.word	0x003d0900
 8004274:	017d7840 	.word	0x017d7840
 8004278:	46000000 	.word	0x46000000
 800427c:	4c742400 	.word	0x4c742400
 8004280:	4a742400 	.word	0x4a742400
 8004284:	4bbebc20 	.word	0x4bbebc20

08004288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800428c:	f001 fd64 	bl	8005d58 <HAL_RCCEx_GetD1SysClockFreq>
 8004290:	4601      	mov	r1, r0
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	4a07      	ldr	r2, [pc, #28]	; (80042b8 <HAL_RCC_GetHCLKFreq+0x30>)
 800429c:	5cd3      	ldrb	r3, [r2, r3]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	fa21 f303 	lsr.w	r3, r1, r3
 80042a6:	4a05      	ldr	r2, [pc, #20]	; (80042bc <HAL_RCC_GetHCLKFreq+0x34>)
 80042a8:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 80042aa:	4b04      	ldr	r3, [pc, #16]	; (80042bc <HAL_RCC_GetHCLKFreq+0x34>)
 80042ac:	681b      	ldr	r3, [r3, #0]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	58024400 	.word	0x58024400
 80042b8:	0800af6c 	.word	0x0800af6c
 80042bc:	24000004 	.word	0x24000004

080042c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80042c4:	f7ff ffe0 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 80042c8:	4601      	mov	r1, r0
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042d6:	5cd3      	ldrb	r3, [r2, r3]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	58024400 	.word	0x58024400
 80042e8:	0800af6c 	.word	0x0800af6c

080042ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80042f0:	f7ff ffca 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 80042f4:	4601      	mov	r1, r0
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4a04      	ldr	r2, [pc, #16]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004302:	5cd3      	ldrb	r3, [r2, r3]
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	fa21 f303 	lsr.w	r3, r1, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	58024400 	.word	0x58024400
 8004314:	0800af6c 	.word	0x0800af6c

08004318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004320:	2300      	movs	r3, #0
 8004322:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004324:	2300      	movs	r3, #0
 8004326:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d03d      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800433c:	d013      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800433e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004342:	d802      	bhi.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004348:	e01f      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800434a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800434e:	d013      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004350:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004354:	d01c      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004356:	e018      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004358:	4baf      	ldr	r3, [pc, #700]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	4aae      	ldr	r2, [pc, #696]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800435e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004364:	e015      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	2102      	movs	r1, #2
 800436c:	4618      	mov	r0, r3
 800436e:	f001 fd0f 	bl	8005d90 <RCCEx_PLL2_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004376:	e00c      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3324      	adds	r3, #36	; 0x24
 800437c:	2102      	movs	r1, #2
 800437e:	4618      	mov	r0, r3
 8004380:	f001 fdb8 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004388:	e003      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	75fb      	strb	r3, [r7, #23]
      break;
 800438e:	e000      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004392:	7dfb      	ldrb	r3, [r7, #23]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004398:	4b9f      	ldr	r3, [pc, #636]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800439a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a4:	499c      	ldr	r1, [pc, #624]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	650b      	str	r3, [r1, #80]	; 0x50
 80043aa:	e001      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
 80043ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d03d      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d826      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	080043e1 	.word	0x080043e1
 80043d0:	080043ef 	.word	0x080043ef
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004419 	.word	0x08004419
 80043dc:	08004419 	.word	0x08004419
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e0:	4b8d      	ldr	r3, [pc, #564]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	4a8c      	ldr	r2, [pc, #560]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80043e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043ec:	e015      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 fccb 	bl	8005d90 <RCCEx_PLL2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043fe:	e00c      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3324      	adds	r3, #36	; 0x24
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f001 fd74 	bl	8005ef4 <RCCEx_PLL3_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004410:	e003      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
      break;
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d109      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004420:	4b7d      	ldr	r3, [pc, #500]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004424:	f023 0207 	bic.w	r2, r3, #7
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	497a      	ldr	r1, [pc, #488]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800442e:	4313      	orrs	r3, r2
 8004430:	650b      	str	r3, [r1, #80]	; 0x50
 8004432:	e001      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004440:	2b00      	cmp	r3, #0
 8004442:	d03e      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d01c      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800444c:	2b80      	cmp	r3, #128	; 0x80
 800444e:	d804      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004454:	2b40      	cmp	r3, #64	; 0x40
 8004456:	d00d      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004458:	e01e      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800445a:	2bc0      	cmp	r3, #192	; 0xc0
 800445c:	d01f      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800445e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004462:	d01e      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004464:	e018      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004466:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	4a6b      	ldr	r2, [pc, #428]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800446c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004470:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004472:	e017      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	2100      	movs	r1, #0
 800447a:	4618      	mov	r0, r3
 800447c:	f001 fc88 	bl	8005d90 <RCCEx_PLL2_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004484:	e00e      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3324      	adds	r3, #36	; 0x24
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f001 fd31 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004496:	e005      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	75fb      	strb	r3, [r7, #23]
      break;
 800449c:	e002      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80044a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80044aa:	4b5b      	ldr	r3, [pc, #364]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80044ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b6:	4958      	ldr	r1, [pc, #352]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	650b      	str	r3, [r1, #80]	; 0x50
 80044bc:	e001      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d044      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d8:	d01f      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80044da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044de:	d805      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80044e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044e8:	d00e      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80044ea:	e01f      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80044ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80044f0:	d01f      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80044f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044f6:	d01e      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80044f8:	e018      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fa:	4b47      	ldr	r3, [pc, #284]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	4a46      	ldr	r2, [pc, #280]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004504:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004506:	e017      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3304      	adds	r3, #4
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f001 fc3e 	bl	8005d90 <RCCEx_PLL2_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004518:	e00e      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3324      	adds	r3, #36	; 0x24
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f001 fce7 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800452a:	e005      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
      break;
 8004530:	e002      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004532:	bf00      	nop
 8004534:	e000      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800453e:	4b36      	ldr	r3, [pc, #216]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800454c:	4932      	ldr	r1, [pc, #200]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800454e:	4313      	orrs	r3, r2
 8004550:	658b      	str	r3, [r1, #88]	; 0x58
 8004552:	e001      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004560:	2b00      	cmp	r3, #0
 8004562:	d044      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800456a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800456e:	d01f      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004570:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004574:	d805      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800457a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800457e:	d00e      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004580:	e01f      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004582:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004586:	d01f      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800458c:	d01e      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800458e:	e018      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004590:	4b21      	ldr	r3, [pc, #132]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	4a20      	ldr	r2, [pc, #128]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800459c:	e017      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f001 fbf3 	bl	8005d90 <RCCEx_PLL2_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80045ae:	e00e      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3324      	adds	r3, #36	; 0x24
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 fc9c 	bl	8005ef4 <RCCEx_PLL3_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045c0:	e005      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
      break;
 80045c6:	e002      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80045c8:	bf00      	nop
 80045ca:	e000      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80045cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80045d4:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045e2:	490d      	ldr	r1, [pc, #52]	; (8004618 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	658b      	str	r3, [r1, #88]	; 0x58
 80045e8:	e001      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
 80045ec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d035      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d00c      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004602:	2b10      	cmp	r3, #16
 8004604:	d802      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01b      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800460a:	e017      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800460c:	2b20      	cmp	r3, #32
 800460e:	d00c      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004610:	2b30      	cmp	r3, #48	; 0x30
 8004612:	d018      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004614:	e012      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004616:	bf00      	nop
 8004618:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461c:	4baf      	ldr	r3, [pc, #700]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	4aae      	ldr	r2, [pc, #696]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004626:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004628:	e00e      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	2102      	movs	r1, #2
 8004630:	4618      	mov	r0, r3
 8004632:	f001 fbad 	bl	8005d90 <RCCEx_PLL2_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800463a:	e005      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	75fb      	strb	r3, [r7, #23]
      break;
 8004640:	e002      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004642:	bf00      	nop
 8004644:	e000      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d109      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800464e:	4ba3      	ldr	r3, [pc, #652]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465a:	49a0      	ldr	r1, [pc, #640]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004660:	e001      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d042      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467a:	d01f      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004680:	d805      	bhi.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468a:	d00e      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x392>
 800468c:	e01f      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800468e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004692:	d01f      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004698:	d01e      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800469a:	e018      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800469c:	4b8f      	ldr	r3, [pc, #572]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	4a8e      	ldr	r2, [pc, #568]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80046a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046a8:	e017      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	2100      	movs	r1, #0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 fb6d 	bl	8005d90 <RCCEx_PLL2_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046ba:	e00e      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3324      	adds	r3, #36	; 0x24
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f001 fc16 	bl	8005ef4 <RCCEx_PLL3_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046cc:	e005      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	75fb      	strb	r3, [r7, #23]
      break;
 80046d2:	e002      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80046d4:	bf00      	nop
 80046d6:	e000      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80046d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80046e0:	4b7e      	ldr	r3, [pc, #504]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80046e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ec:	497b      	ldr	r1, [pc, #492]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	650b      	str	r3, [r1, #80]	; 0x50
 80046f2:	e001      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	7dfb      	ldrb	r3, [r7, #23]
 80046f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d042      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800470c:	d01b      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800470e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004712:	d805      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d022      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471c:	d00a      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800471e:	e01b      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004720:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004724:	d01d      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004726:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800472a:	d01c      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800472c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004730:	d01b      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004732:	e011      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	2101      	movs	r1, #1
 800473a:	4618      	mov	r0, r3
 800473c:	f001 fb28 	bl	8005d90 <RCCEx_PLL2_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004744:	e012      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3324      	adds	r3, #36	; 0x24
 800474a:	2101      	movs	r1, #1
 800474c:	4618      	mov	r0, r3
 800474e:	f001 fbd1 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004756:	e009      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	75fb      	strb	r3, [r7, #23]
      break;
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800475e:	bf00      	nop
 8004760:	e004      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800476a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004772:	4b5a      	ldr	r3, [pc, #360]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477e:	4957      	ldr	r1, [pc, #348]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	650b      	str	r3, [r1, #80]	; 0x50
 8004784:	e001      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d044      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800479c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a0:	d01b      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80047a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047a6:	d805      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d022      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80047ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80047b2:	e01b      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b8:	d01d      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80047ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047be:	d01c      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80047c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047c4:	d01b      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80047c6:	e011      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	2101      	movs	r1, #1
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fade 	bl	8005d90 <RCCEx_PLL2_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80047d8:	e012      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	3324      	adds	r3, #36	; 0x24
 80047de:	2101      	movs	r1, #1
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 fb87 	bl	8005ef4 <RCCEx_PLL3_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80047ea:	e009      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	75fb      	strb	r3, [r7, #23]
      break;
 80047f0:	e006      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80047f2:	bf00      	nop
 80047f4:	e004      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80047f6:	bf00      	nop
 80047f8:	e002      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80047fa:	bf00      	nop
 80047fc:	e000      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80047fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004800:	7dfb      	ldrb	r3, [r7, #23]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004806:	4b35      	ldr	r3, [pc, #212]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004814:	4931      	ldr	r1, [pc, #196]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	658b      	str	r3, [r1, #88]	; 0x58
 800481a:	e001      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02d      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004834:	d005      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800483a:	d009      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d013      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004840:	e00f      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004842:	4b26      	ldr	r3, [pc, #152]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	4a25      	ldr	r2, [pc, #148]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800484c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800484e:	e00c      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3304      	adds	r3, #4
 8004854:	2101      	movs	r1, #1
 8004856:	4618      	mov	r0, r3
 8004858:	f001 fa9a 	bl	8005d90 <RCCEx_PLL2_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004860:	e003      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
      break;
 8004866:	e000      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004870:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004874:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487c:	4917      	ldr	r1, [pc, #92]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800487e:	4313      	orrs	r3, r2
 8004880:	650b      	str	r3, [r1, #80]	; 0x50
 8004882:	e001      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d035      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004898:	2b03      	cmp	r3, #3
 800489a:	d81b      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800489c:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800489e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a2:	bf00      	nop
 80048a4:	080048e1 	.word	0x080048e1
 80048a8:	080048b5 	.word	0x080048b5
 80048ac:	080048c3 	.word	0x080048c3
 80048b0:	080048e1 	.word	0x080048e1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4a08      	ldr	r2, [pc, #32]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80048ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80048c0:	e00f      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	2102      	movs	r1, #2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 fa61 	bl	8005d90 <RCCEx_PLL2_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80048d2:	e006      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
      break;
 80048d8:	e003      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80048da:	bf00      	nop
 80048dc:	58024400 	.word	0x58024400
      break;
 80048e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d109      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80048e8:	4bba      	ldr	r3, [pc, #744]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80048ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ec:	f023 0203 	bic.w	r2, r3, #3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	49b7      	ldr	r1, [pc, #732]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048fa:	e001      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8086 	beq.w	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800490e:	4bb2      	ldr	r3, [pc, #712]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4ab1      	ldr	r2, [pc, #708]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004918:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800491a:	f7fd fb29 	bl	8001f70 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004920:	e009      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004922:	f7fd fb25 	bl	8001f70 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b64      	cmp	r3, #100	; 0x64
 800492e:	d902      	bls.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	75fb      	strb	r3, [r7, #23]
        break;
 8004934:	e005      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004936:	4ba8      	ldr	r3, [pc, #672]	; (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0ef      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004942:	7dfb      	ldrb	r3, [r7, #23]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d166      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004948:	4ba2      	ldr	r3, [pc, #648]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800494a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004952:	4053      	eors	r3, r2
 8004954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004958:	2b00      	cmp	r3, #0
 800495a:	d013      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800495c:	4b9d      	ldr	r3, [pc, #628]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004964:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004966:	4b9b      	ldr	r3, [pc, #620]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	4a9a      	ldr	r2, [pc, #616]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800496c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004970:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004972:	4b98      	ldr	r3, [pc, #608]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	4a97      	ldr	r2, [pc, #604]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800497e:	4a95      	ldr	r2, [pc, #596]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800498a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498e:	d115      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004990:	f7fd faee 	bl	8001f70 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004996:	e00b      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004998:	f7fd faea 	bl	8001f70 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d902      	bls.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	75fb      	strb	r3, [r7, #23]
            break;
 80049ae:	e005      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049b0:	4b88      	ldr	r3, [pc, #544]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0ed      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d126      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d0:	d10d      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80049d2:	4b80      	ldr	r3, [pc, #512]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049e0:	0919      	lsrs	r1, r3, #4
 80049e2:	4b7e      	ldr	r3, [pc, #504]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80049e4:	400b      	ands	r3, r1
 80049e6:	497b      	ldr	r1, [pc, #492]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	610b      	str	r3, [r1, #16]
 80049ec:	e005      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80049ee:	4b79      	ldr	r3, [pc, #484]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	4a78      	ldr	r2, [pc, #480]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049f8:	6113      	str	r3, [r2, #16]
 80049fa:	4b76      	ldr	r3, [pc, #472]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80049fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a08:	4972      	ldr	r1, [pc, #456]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	670b      	str	r3, [r1, #112]	; 0x70
 8004a0e:	e004      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	75bb      	strb	r3, [r7, #22]
 8004a14:	e001      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
 8004a18:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d07d      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a2a:	2b28      	cmp	r3, #40	; 0x28
 8004a2c:	d866      	bhi.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004b03 	.word	0x08004b03
 8004a38:	08004afd 	.word	0x08004afd
 8004a3c:	08004afd 	.word	0x08004afd
 8004a40:	08004afd 	.word	0x08004afd
 8004a44:	08004afd 	.word	0x08004afd
 8004a48:	08004afd 	.word	0x08004afd
 8004a4c:	08004afd 	.word	0x08004afd
 8004a50:	08004afd 	.word	0x08004afd
 8004a54:	08004ad9 	.word	0x08004ad9
 8004a58:	08004afd 	.word	0x08004afd
 8004a5c:	08004afd 	.word	0x08004afd
 8004a60:	08004afd 	.word	0x08004afd
 8004a64:	08004afd 	.word	0x08004afd
 8004a68:	08004afd 	.word	0x08004afd
 8004a6c:	08004afd 	.word	0x08004afd
 8004a70:	08004afd 	.word	0x08004afd
 8004a74:	08004aeb 	.word	0x08004aeb
 8004a78:	08004afd 	.word	0x08004afd
 8004a7c:	08004afd 	.word	0x08004afd
 8004a80:	08004afd 	.word	0x08004afd
 8004a84:	08004afd 	.word	0x08004afd
 8004a88:	08004afd 	.word	0x08004afd
 8004a8c:	08004afd 	.word	0x08004afd
 8004a90:	08004afd 	.word	0x08004afd
 8004a94:	08004b03 	.word	0x08004b03
 8004a98:	08004afd 	.word	0x08004afd
 8004a9c:	08004afd 	.word	0x08004afd
 8004aa0:	08004afd 	.word	0x08004afd
 8004aa4:	08004afd 	.word	0x08004afd
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004afd 	.word	0x08004afd
 8004ab0:	08004afd 	.word	0x08004afd
 8004ab4:	08004b03 	.word	0x08004b03
 8004ab8:	08004afd 	.word	0x08004afd
 8004abc:	08004afd 	.word	0x08004afd
 8004ac0:	08004afd 	.word	0x08004afd
 8004ac4:	08004afd 	.word	0x08004afd
 8004ac8:	08004afd 	.word	0x08004afd
 8004acc:	08004afd 	.word	0x08004afd
 8004ad0:	08004afd 	.word	0x08004afd
 8004ad4:	08004b03 	.word	0x08004b03
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	2101      	movs	r1, #1
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 f956 	bl	8005d90 <RCCEx_PLL2_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004ae8:	e00c      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3324      	adds	r3, #36	; 0x24
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 f9ff 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004afa:	e003      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	75fb      	strb	r3, [r7, #23]
      break;
 8004b00:	e000      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b0a:	4b32      	ldr	r3, [pc, #200]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b16:	492f      	ldr	r1, [pc, #188]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	654b      	str	r3, [r1, #84]	; 0x54
 8004b1c:	e001      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d037      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b32:	2b05      	cmp	r3, #5
 8004b34:	d820      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b7f 	.word	0x08004b7f
 8004b40:	08004b55 	.word	0x08004b55
 8004b44:	08004b67 	.word	0x08004b67
 8004b48:	08004b7f 	.word	0x08004b7f
 8004b4c:	08004b7f 	.word	0x08004b7f
 8004b50:	08004b7f 	.word	0x08004b7f
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3304      	adds	r3, #4
 8004b58:	2101      	movs	r1, #1
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 f918 	bl	8005d90 <RCCEx_PLL2_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004b64:	e00c      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3324      	adds	r3, #36	; 0x24
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 f9c1 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004b76:	e003      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b7c:	e000      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b80:	7dfb      	ldrb	r3, [r7, #23]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b86:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8a:	f023 0207 	bic.w	r2, r3, #7
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b92:	4910      	ldr	r1, [pc, #64]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	654b      	str	r3, [r1, #84]	; 0x54
 8004b98:	e001      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9a:	7dfb      	ldrb	r3, [r7, #23]
 8004b9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d040      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	2b05      	cmp	r3, #5
 8004bb2:	d827      	bhi.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004bb4:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004c0b 	.word	0x08004c0b
 8004bc0:	08004be1 	.word	0x08004be1
 8004bc4:	08004bf3 	.word	0x08004bf3
 8004bc8:	08004c0b 	.word	0x08004c0b
 8004bcc:	08004c0b 	.word	0x08004c0b
 8004bd0:	08004c0b 	.word	0x08004c0b
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	58024800 	.word	0x58024800
 8004bdc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3304      	adds	r3, #4
 8004be4:	2101      	movs	r1, #1
 8004be6:	4618      	mov	r0, r3
 8004be8:	f001 f8d2 	bl	8005d90 <RCCEx_PLL2_Config>
 8004bec:	4603      	mov	r3, r0
 8004bee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004bf0:	e00c      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3324      	adds	r3, #36	; 0x24
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 f97b 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c02:	e003      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	75fb      	strb	r3, [r7, #23]
      break;
 8004c08:	e000      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c12:	4bb3      	ldr	r3, [pc, #716]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	f023 0207 	bic.w	r2, r3, #7
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c20:	49af      	ldr	r1, [pc, #700]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	658b      	str	r3, [r1, #88]	; 0x58
 8004c26:	e001      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d044      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c42:	d01b      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c48:	d805      	bhi.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d022      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004c54:	e01b      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5a:	d01d      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c60:	d01c      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004c62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c66:	d01b      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004c68:	e011      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 f88d 	bl	8005d90 <RCCEx_PLL2_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004c7a:	e012      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3324      	adds	r3, #36	; 0x24
 8004c80:	2102      	movs	r1, #2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 f936 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004c8c:	e009      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	75fb      	strb	r3, [r7, #23]
      break;
 8004c92:	e006      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004c94:	bf00      	nop
 8004c96:	e004      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004c98:	bf00      	nop
 8004c9a:	e002      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ca8:	4b8d      	ldr	r3, [pc, #564]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb6:	498a      	ldr	r1, [pc, #552]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	654b      	str	r3, [r1, #84]	; 0x54
 8004cbc:	e001      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d044      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd8:	d01b      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cde:	d805      	bhi.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d022      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004cea:	e01b      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf0:	d01d      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004cf2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004cf6:	d01c      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004cf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cfc:	d01b      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004cfe:	e011      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3304      	adds	r3, #4
 8004d04:	2100      	movs	r1, #0
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 f842 	bl	8005d90 <RCCEx_PLL2_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d10:	e012      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3324      	adds	r3, #36	; 0x24
 8004d16:	2102      	movs	r1, #2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 f8eb 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d22:	e009      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
      break;
 8004d28:	e006      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e004      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d2e:	bf00      	nop
 8004d30:	e002      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d3e:	4b68      	ldr	r3, [pc, #416]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d4c:	4964      	ldr	r1, [pc, #400]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	658b      	str	r3, [r1, #88]	; 0x58
 8004d52:	e001      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
 8004d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d044      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d6e:	d01b      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d74:	d805      	bhi.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d022      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7e:	d00a      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004d80:	e01b      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d86:	d01d      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004d88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004d8c:	d01c      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004d8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004d92:	d01b      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004d94:	e011      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fff7 	bl	8005d90 <RCCEx_PLL2_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004da6:	e012      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3324      	adds	r3, #36	; 0x24
 8004dac:	2102      	movs	r1, #2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 f8a0 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004db8:	e009      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dbe:	e006      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004dc0:	bf00      	nop
 8004dc2:	e004      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004dc4:	bf00      	nop
 8004dc6:	e002      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004dc8:	bf00      	nop
 8004dca:	e000      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10a      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004dd4:	4b42      	ldr	r3, [pc, #264]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004de2:	493f      	ldr	r1, [pc, #252]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	658b      	str	r3, [r1, #88]	; 0x58
 8004de8:	e001      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01b      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e04:	d10b      	bne.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3324      	adds	r3, #36	; 0x24
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 f871 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00c      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	75bb      	strb	r3, [r7, #22]
 8004e1c:	e009      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e1e:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e2c:	492c      	ldr	r1, [pc, #176]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01b      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e48:	d10b      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3324      	adds	r3, #36	; 0x24
 8004e4e:	2102      	movs	r1, #2
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 f84f 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00c      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	75bb      	strb	r3, [r7, #22]
 8004e60:	e009      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e62:	4b1f      	ldr	r3, [pc, #124]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e70:	491b      	ldr	r1, [pc, #108]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d032      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d00d      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8004e8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e92:	d016      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d111      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 ff76 	bl	8005d90 <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ea8:	e00c      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3324      	adds	r3, #36	; 0x24
 8004eae:	2102      	movs	r1, #2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 f81f 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004eba:	e003      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8004ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ed8:	4901      	ldr	r1, [pc, #4]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	658b      	str	r3, [r1, #88]	; 0x58
 8004ede:	e003      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8004ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	7dfb      	ldrb	r3, [r7, #23]
 8004ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d02f      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004efe:	d00c      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004f00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f04:	d015      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0a:	d10f      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f0c:	4b79      	ldr	r3, [pc, #484]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	4a78      	ldr	r2, [pc, #480]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f18:	e00c      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3324      	adds	r3, #36	; 0x24
 8004f1e:	2101      	movs	r1, #1
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 ffe7 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f2a:	e003      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f30:	e000      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8004f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f3a:	4b6e      	ldr	r3, [pc, #440]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f48:	496a      	ldr	r1, [pc, #424]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	654b      	str	r3, [r1, #84]	; 0x54
 8004f4e:	e001      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d029      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8004f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f6c:	d007      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004f6e:	e00f      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f70:	4b60      	ldr	r3, [pc, #384]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	4a5f      	ldr	r2, [pc, #380]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f7c:	e00b      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	2102      	movs	r1, #2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 ff03 	bl	8005d90 <RCCEx_PLL2_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f8e:	e002      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	75fb      	strb	r3, [r7, #23]
      break;
 8004f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f9c:	4b55      	ldr	r3, [pc, #340]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa8:	4952      	ldr	r1, [pc, #328]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004fae:	e001      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3324      	adds	r3, #36	; 0x24
 8004fc4:	2102      	movs	r1, #2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 ff94 	bl	8005ef4 <RCCEx_PLL3_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d02f      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fea:	d00c      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff0:	d802      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d011      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004ff6:	e00d      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffc:	d00f      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005002:	d00e      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8005004:	e006      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005006:	4b3b      	ldr	r3, [pc, #236]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	4a3a      	ldr	r2, [pc, #232]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800500c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005010:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005012:	e007      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	75fb      	strb	r3, [r7, #23]
      break;
 8005018:	e004      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8005022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800502a:	4b32      	ldr	r3, [pc, #200]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005036:	492f      	ldr	r1, [pc, #188]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005038:	4313      	orrs	r3, r2
 800503a:	654b      	str	r3, [r1, #84]	; 0x54
 800503c:	e001      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503e:	7dfb      	ldrb	r3, [r7, #23]
 8005040:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800504e:	4b29      	ldr	r3, [pc, #164]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005052:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	4926      	ldr	r1, [pc, #152]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800505c:	4313      	orrs	r3, r2
 800505e:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800506c:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800507a:	491e      	ldr	r1, [pc, #120]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800507c:	4313      	orrs	r3, r2
 800507e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800508c:	4b19      	ldr	r3, [pc, #100]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800508e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005090:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005098:	4916      	ldr	r1, [pc, #88]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00d      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80050b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050b4:	6113      	str	r3, [r2, #16]
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80050c0:	490c      	ldr	r1, [pc, #48]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	da08      	bge.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050ce:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80050d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050da:	4906      	ldr	r1, [pc, #24]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80050e0:	7dbb      	ldrb	r3, [r7, #22]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	e000      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	58024400 	.word	0x58024400

080050f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b090      	sub	sp, #64	; 0x40
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005106:	d150      	bne.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005108:	4ba1      	ldr	r3, [pc, #644]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800510a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	2b04      	cmp	r3, #4
 8005116:	d844      	bhi.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8005118:	a201      	add	r2, pc, #4	; (adr r2, 8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800511a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511e:	bf00      	nop
 8005120:	08005135 	.word	0x08005135
 8005124:	08005145 	.word	0x08005145
 8005128:	08005155 	.word	0x08005155
 800512c:	0800519d 	.word	0x0800519d
 8005130:	08005165 	.word	0x08005165
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fcc1 	bl	8005ac0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005142:	e200      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005144:	f107 0318 	add.w	r3, r7, #24
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fa21 	bl	8005590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005152:	e1f8      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005154:	f107 030c 	add.w	r3, r7, #12
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fb65 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005162:	e1f0      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005164:	4b8a      	ldr	r3, [pc, #552]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005168:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800516c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005174:	4b87      	ldr	r3, [pc, #540]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005178:	e1e5      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800517c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005180:	d102      	bne.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8005182:	4b85      	ldr	r3, [pc, #532]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005186:	e1de      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8005188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518e:	d102      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8005190:	4b82      	ldr	r3, [pc, #520]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005194:	e1d7      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800519a:	e1d4      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800519c:	4b80      	ldr	r3, [pc, #512]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051a0:	e1d1      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051a6:	bf00      	nop
 80051a8:	e1cd      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b0:	d14f      	bne.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80051b2:	4b77      	ldr	r3, [pc, #476]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80051b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80051ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	2b80      	cmp	r3, #128	; 0x80
 80051c0:	d01c      	beq.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d804      	bhi.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	d00e      	beq.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80051ce:	e03c      	b.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80051d0:	2bc0      	cmp	r3, #192	; 0xc0
 80051d2:	d037      	beq.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80051d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d8:	d018      	beq.n	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80051da:	e036      	b.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fc6d 	bl	8005ac0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051ea:	e1ac      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051ec:	f107 0318 	add.w	r3, r7, #24
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 f9cd 	bl	8005590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80051fa:	e1a4      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051fc:	f107 030c 	add.w	r3, r7, #12
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fb11 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800520a:	e19c      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800520c:	4b60      	ldr	r3, [pc, #384]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800520e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005210:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005214:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8005216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800521c:	4b5d      	ldr	r3, [pc, #372]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005220:	e191      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8005222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005228:	d102      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800522a:	4b5b      	ldr	r3, [pc, #364]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800522c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800522e:	e18a      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8005230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005236:	d102      	bne.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8005238:	4b58      	ldr	r3, [pc, #352]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800523c:	e183      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 800523e:	2300      	movs	r3, #0
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005242:	e180      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005244:	4b56      	ldr	r3, [pc, #344]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005246:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005248:	e17d      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 800524a:	2300      	movs	r3, #0
 800524c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800524e:	bf00      	nop
 8005250:	e179      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005258:	d153      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800525a:	4b4d      	ldr	r3, [pc, #308]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800525c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005262:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526a:	d01f      	beq.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800526c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005270:	d805      	bhi.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005276:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800527a:	d00f      	beq.n	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800527c:	e03d      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800527e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005282:	d037      	beq.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005284:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005288:	d018      	beq.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800528a:	e036      	b.n	80052fa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800528c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fc15 	bl	8005ac0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800529a:	e154      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800529c:	f107 0318 	add.w	r3, r7, #24
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f975 	bl	8005590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052aa:	e14c      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ac:	f107 030c 	add.w	r3, r7, #12
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fab9 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ba:	e144      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052bc:	4b34      	ldr	r3, [pc, #208]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80052be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80052cc:	4b31      	ldr	r3, [pc, #196]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80052d0:	e139      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80052d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052d8:	d102      	bne.n	80052e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80052da:	4b2f      	ldr	r3, [pc, #188]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80052dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052de:	e132      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e6:	d102      	bne.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80052e8:	4b2c      	ldr	r3, [pc, #176]	; (800539c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052ec:	e12b      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052f2:	e128      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80052f4:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052f8:	e125      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052fe:	bf00      	nop
 8005300:	e121      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005308:	d15d      	bne.n	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800530a:	4b21      	ldr	r3, [pc, #132]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005312:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800531a:	d01f      	beq.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800531c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005320:	d805      	bhi.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005326:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800532a:	d00f      	beq.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800532c:	e047      	b.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800532e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005332:	d041      	beq.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005338:	d018      	beq.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800533a:	e040      	b.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800533c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fbbd 	bl	8005ac0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800534a:	e0fc      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800534c:	f107 0318 	add.w	r3, r7, #24
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f91d 	bl	8005590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800535a:	e0f4      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800535c:	f107 030c 	add.w	r3, r7, #12
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fa61 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800536a:	e0ec      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800536c:	4b08      	ldr	r3, [pc, #32]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800536e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005374:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8005376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800537c:	4b05      	ldr	r3, [pc, #20]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005380:	e0e1      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8005382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005388:	d10c      	bne.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800538c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800538e:	e0da      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005390:	58024400 	.word	0x58024400
 8005394:	03d09000 	.word	0x03d09000
 8005398:	003d0900 	.word	0x003d0900
 800539c:	017d7840 	.word	0x017d7840
 80053a0:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80053a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053aa:	d102      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80053ac:	4b68      	ldr	r3, [pc, #416]	; (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053b0:	e0c9      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053b6:	e0c6      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80053b8:	4b66      	ldr	r3, [pc, #408]	; (8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 80053ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053bc:	e0c3      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053c2:	bf00      	nop
 80053c4:	e0bf      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053cc:	d153      	bne.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80053ce:	4b62      	ldr	r3, [pc, #392]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80053d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80053d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053de:	d01f      	beq.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80053e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e4:	d805      	bhi.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80053ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ee:	d00f      	beq.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80053f0:	e03d      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80053f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053f6:	d037      	beq.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80053f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053fc:	d018      	beq.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80053fe:	e036      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005404:	4618      	mov	r0, r3
 8005406:	f000 fb5b 	bl	8005ac0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800540e:	e09a      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005410:	f107 0318 	add.w	r3, r7, #24
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f8bb 	bl	8005590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800541e:	e092      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005420:	f107 030c 	add.w	r3, r7, #12
 8005424:	4618      	mov	r0, r3
 8005426:	f000 f9ff 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800542e:	e08a      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005430:	4b49      	ldr	r3, [pc, #292]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005438:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800543a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005440:	4b46      	ldr	r3, [pc, #280]	; (800555c <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8005442:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005444:	e07f      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800544c:	d102      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800544e:	4b44      	ldr	r3, [pc, #272]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8005450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005452:	e078      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545a:	d102      	bne.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800545c:	4b3c      	ldr	r3, [pc, #240]	; (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005460:	e071      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005466:	e06e      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005468:	4b3a      	ldr	r3, [pc, #232]	; (8005554 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800546c:	e06b      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005472:	bf00      	nop
 8005474:	e067      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800547c:	d13d      	bne.n	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800547e:	4b36      	ldr	r3, [pc, #216]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005482:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005486:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548e:	d00c      	beq.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005494:	d011      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d12b      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800549a:	f107 0318 	add.w	r3, r7, #24
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f876 	bl	8005590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054a8:	e04d      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054aa:	f107 030c 	add.w	r3, r7, #12
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 f9ba 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054b8:	e045      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80054ba:	4b27      	ldr	r3, [pc, #156]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054c2:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80054ca:	4b24      	ldr	r3, [pc, #144]	; (800555c <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 80054cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80054ce:	e03a      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80054d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054d6:	d102      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80054d8:	4b21      	ldr	r3, [pc, #132]	; (8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054dc:	e033      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80054de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054e4:	d102      	bne.n	80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80054e6:	4b1a      	ldr	r3, [pc, #104]	; (8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ea:	e02c      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f0:	e029      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054f6:	bf00      	nop
 80054f8:	e025      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005500:	d11f      	bne.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005516:	d008      	beq.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005518:	e00f      	b.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800551a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800551e:	4618      	mov	r0, r3
 8005520:	f000 face 	bl	8005ac0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005528:	e00d      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800552a:	f107 0318 	add.w	r3, r7, #24
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f82e 	bl	8005590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005538:	e005      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800553a:	2300      	movs	r3, #0
 800553c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800553e:	bf00      	nop
 8005540:	e001      	b.n	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005548:	4618      	mov	r0, r3
 800554a:	3740      	adds	r7, #64	; 0x40
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	017d7840 	.word	0x017d7840
 8005554:	00bb8000 	.word	0x00bb8000
 8005558:	58024400 	.word	0x58024400
 800555c:	03d09000 	.word	0x03d09000
 8005560:	003d0900 	.word	0x003d0900

08005564 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005568:	f7fe fe8e 	bl	8004288 <HAL_RCC_GetHCLKFreq>
 800556c:	4601      	mov	r1, r0
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	091b      	lsrs	r3, r3, #4
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4a04      	ldr	r2, [pc, #16]	; (800558c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800557a:	5cd3      	ldrb	r3, [r2, r3]
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	58024400 	.word	0x58024400
 800558c:	0800af6c 	.word	0x0800af6c

08005590 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005590:	b480      	push	{r7}
 8005592:	b089      	sub	sp, #36	; 0x24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005598:	4b9d      	ldr	r3, [pc, #628]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80055a2:	4b9b      	ldr	r3, [pc, #620]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	0b1b      	lsrs	r3, r3, #12
 80055a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ac:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80055ae:	4b98      	ldr	r3, [pc, #608]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80055b8:	4b95      	ldr	r3, [pc, #596]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	08db      	lsrs	r3, r3, #3
 80055be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	fb02 f303 	mul.w	r3, r2, r3
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 810a 	beq.w	80057f0 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d05a      	beq.n	8005698 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d302      	bcc.n	80055ec <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d078      	beq.n	80056dc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80055ea:	e099      	b.n	8005720 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ec:	4b88      	ldr	r3, [pc, #544]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d02d      	beq.n	8005654 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055f8:	4b85      	ldr	r3, [pc, #532]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	08db      	lsrs	r3, r3, #3
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	4a84      	ldr	r2, [pc, #528]	; (8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800561e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005622:	4b7b      	ldr	r3, [pc, #492]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005632:	ed97 6a03 	vldr	s12, [r7, #12]
 8005636:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800563a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800563e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800564a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800564e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005652:	e087      	b.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800581c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005666:	4b6a      	ldr	r3, [pc, #424]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005676:	ed97 6a03 	vldr	s12, [r7, #12]
 800567a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800567e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800568a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800568e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005696:	e065      	b.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80056a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056aa:	4b59      	ldr	r3, [pc, #356]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80056be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80056c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056da:	e043      	b.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80056ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ee:	4b48      	ldr	r3, [pc, #288]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005702:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800570a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800570e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800571a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800571e:	e021      	b.n	8005764 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800572a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005820 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800572e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005732:	4b37      	ldr	r3, [pc, #220]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005742:	ed97 6a03 	vldr	s12, [r7, #12]
 8005746:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005818 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800574a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005762:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005764:	4b2a      	ldr	r3, [pc, #168]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	0a5b      	lsrs	r3, r3, #9
 800576a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800577a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800577e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800578a:	ee17 2a90 	vmov	r2, s15
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005792:	4b1f      	ldr	r3, [pc, #124]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	0c1b      	lsrs	r3, r3, #16
 8005798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800579c:	ee07 3a90 	vmov	s15, r3
 80057a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80057b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057b8:	ee17 2a90 	vmov	r2, s15
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80057c0:	4b13      	ldr	r3, [pc, #76]	; (8005810 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	0e1b      	lsrs	r3, r3, #24
 80057c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057da:	edd7 6a07 	vldr	s13, [r7, #28]
 80057de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057e6:	ee17 2a90 	vmov	r2, s15
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80057ee:	e008      	b.n	8005802 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	609a      	str	r2, [r3, #8]
}
 8005802:	bf00      	nop
 8005804:	3724      	adds	r7, #36	; 0x24
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	58024400 	.word	0x58024400
 8005814:	03d09000 	.word	0x03d09000
 8005818:	46000000 	.word	0x46000000
 800581c:	4c742400 	.word	0x4c742400
 8005820:	4a742400 	.word	0x4a742400
 8005824:	4bbebc20 	.word	0x4bbebc20

08005828 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005828:	b480      	push	{r7}
 800582a:	b089      	sub	sp, #36	; 0x24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005830:	4b9d      	ldr	r3, [pc, #628]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800583a:	4b9b      	ldr	r3, [pc, #620]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	0d1b      	lsrs	r3, r3, #20
 8005840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005844:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8005846:	4b98      	ldr	r3, [pc, #608]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005850:	4b95      	ldr	r3, [pc, #596]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005854:	08db      	lsrs	r3, r3, #3
 8005856:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	fb02 f303 	mul.w	r3, r2, r3
 8005860:	ee07 3a90 	vmov	s15, r3
 8005864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005868:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 810a 	beq.w	8005a88 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d05a      	beq.n	8005930 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 800587a:	2b01      	cmp	r3, #1
 800587c:	d302      	bcc.n	8005884 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 800587e:	2b02      	cmp	r3, #2
 8005880:	d078      	beq.n	8005974 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005882:	e099      	b.n	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005884:	4b88      	ldr	r3, [pc, #544]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d02d      	beq.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005890:	4b85      	ldr	r3, [pc, #532]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	08db      	lsrs	r3, r3, #3
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	4a84      	ldr	r2, [pc, #528]	; (8005aac <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800589c:	fa22 f303 	lsr.w	r3, r2, r3
 80058a0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	ee07 3a90 	vmov	s15, r3
 80058a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b7b      	ldr	r3, [pc, #492]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80058ea:	e087      	b.n	80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b6a      	ldr	r3, [pc, #424]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005912:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800592e:	e065      	b.n	80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800593e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005942:	4b59      	ldr	r3, [pc, #356]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005952:	ed97 6a03 	vldr	s12, [r7, #12]
 8005956:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800595a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800595e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800596a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005972:	e043      	b.n	80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005986:	4b48      	ldr	r3, [pc, #288]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005996:	ed97 6a03 	vldr	s12, [r7, #12]
 800599a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800599e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059b6:	e021      	b.n	80059fc <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	ee07 3a90 	vmov	s15, r3
 80059be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80059c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ca:	4b37      	ldr	r3, [pc, #220]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059da:	ed97 6a03 	vldr	s12, [r7, #12]
 80059de:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80059e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80059fc:	4b2a      	ldr	r3, [pc, #168]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	0a5b      	lsrs	r3, r3, #9
 8005a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a22:	ee17 2a90 	vmov	r2, s15
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005a2a:	4b1f      	ldr	r3, [pc, #124]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a44:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a50:	ee17 2a90 	vmov	r2, s15
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005a58:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	0e1b      	lsrs	r3, r3, #24
 8005a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7e:	ee17 2a90 	vmov	r2, s15
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005a86:	e008      	b.n	8005a9a <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	609a      	str	r2, [r3, #8]
}
 8005a9a:	bf00      	nop
 8005a9c:	3724      	adds	r7, #36	; 0x24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	58024400 	.word	0x58024400
 8005aac:	03d09000 	.word	0x03d09000
 8005ab0:	46000000 	.word	0x46000000
 8005ab4:	4c742400 	.word	0x4c742400
 8005ab8:	4a742400 	.word	0x4a742400
 8005abc:	4bbebc20 	.word	0x4bbebc20

08005ac0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b089      	sub	sp, #36	; 0x24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ac8:	4b9d      	ldr	r3, [pc, #628]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	f003 0303 	and.w	r3, r3, #3
 8005ad0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005ad2:	4b9b      	ldr	r3, [pc, #620]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005adc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005ade:	4b98      	ldr	r3, [pc, #608]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ae8:	4b95      	ldr	r3, [pc, #596]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	08db      	lsrs	r3, r3, #3
 8005aee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	fb02 f303 	mul.w	r3, r2, r3
 8005af8:	ee07 3a90 	vmov	s15, r3
 8005afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 810a 	beq.w	8005d20 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d05a      	beq.n	8005bc8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d302      	bcc.n	8005b1c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d078      	beq.n	8005c0c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8005b1a:	e099      	b.n	8005c50 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b1c:	4b88      	ldr	r3, [pc, #544]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d02d      	beq.n	8005b84 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b28:	4b85      	ldr	r3, [pc, #532]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	08db      	lsrs	r3, r3, #3
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	4a84      	ldr	r2, [pc, #528]	; (8005d44 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
 8005b38:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	ee07 3a90 	vmov	s15, r3
 8005b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b52:	4b7b      	ldr	r3, [pc, #492]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005b82:	e087      	b.n	8005c94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8005b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b96:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b9e:	ee07 3a90 	vmov	s15, r3
 8005ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005baa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bc6:	e065      	b.n	8005c94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8005bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bda:	4b59      	ldr	r3, [pc, #356]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c0a:	e043      	b.n	8005c94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1e:	4b48      	ldr	r3, [pc, #288]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c4e:	e021      	b.n	8005c94 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8005c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c62:	4b37      	ldr	r3, [pc, #220]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d48 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8005c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c92:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005c94:	4b2a      	ldr	r3, [pc, #168]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	0a5b      	lsrs	r3, r3, #9
 8005c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cba:	ee17 2a90 	vmov	r2, s15
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005cc2:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	0c1b      	lsrs	r3, r3, #16
 8005cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ccc:	ee07 3a90 	vmov	s15, r3
 8005cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce8:	ee17 2a90 	vmov	r2, s15
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005cf0:	4b13      	ldr	r3, [pc, #76]	; (8005d40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf4:	0e1b      	lsrs	r3, r3, #24
 8005cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d16:	ee17 2a90 	vmov	r2, s15
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005d1e:	e008      	b.n	8005d32 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	609a      	str	r2, [r3, #8]
}
 8005d32:	bf00      	nop
 8005d34:	3724      	adds	r7, #36	; 0x24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	58024400 	.word	0x58024400
 8005d44:	03d09000 	.word	0x03d09000
 8005d48:	46000000 	.word	0x46000000
 8005d4c:	4c742400 	.word	0x4c742400
 8005d50:	4a742400 	.word	0x4a742400
 8005d54:	4bbebc20 	.word	0x4bbebc20

08005d58 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d5c:	f7fe f922 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8005d60:	4601      	mov	r1, r0
 8005d62:	4b08      	ldr	r3, [pc, #32]	; (8005d84 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	4a06      	ldr	r2, [pc, #24]	; (8005d88 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8005d6e:	5cd3      	ldrb	r3, [r2, r3]
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	fa21 f303 	lsr.w	r3, r1, r3
 8005d78:	4a04      	ldr	r2, [pc, #16]	; (8005d8c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005d7a:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005d7c:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	58024400 	.word	0x58024400
 8005d88:	0800af6c 	.word	0x0800af6c
 8005d8c:	24000000 	.word	0x24000000

08005d90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d9e:	4b53      	ldr	r3, [pc, #332]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d101      	bne.n	8005dae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e099      	b.n	8005ee2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005dae:	4b4f      	ldr	r3, [pc, #316]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a4e      	ldr	r2, [pc, #312]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005db4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dba:	f7fc f8d9 	bl	8001f70 <HAL_GetTick>
 8005dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dc0:	e008      	b.n	8005dd4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005dc2:	f7fc f8d5 	bl	8001f70 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e086      	b.n	8005ee2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dd4:	4b45      	ldr	r3, [pc, #276]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f0      	bne.n	8005dc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005de0:	4b42      	ldr	r3, [pc, #264]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	031b      	lsls	r3, r3, #12
 8005dee:	493f      	ldr	r1, [pc, #252]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	628b      	str	r3, [r1, #40]	; 0x28
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	025b      	lsls	r3, r3, #9
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	041b      	lsls	r3, r3, #16
 8005e12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e24:	4931      	ldr	r1, [pc, #196]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e2a:	4b30      	ldr	r3, [pc, #192]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	492d      	ldr	r1, [pc, #180]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e3c:	4b2b      	ldr	r3, [pc, #172]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	f023 0220 	bic.w	r2, r3, #32
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	4928      	ldr	r1, [pc, #160]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e4e:	4b27      	ldr	r3, [pc, #156]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	4a26      	ldr	r2, [pc, #152]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e54:	f023 0310 	bic.w	r3, r3, #16
 8005e58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e5a:	4b24      	ldr	r3, [pc, #144]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e5e:	4b24      	ldr	r3, [pc, #144]	; (8005ef0 <RCCEx_PLL2_Config+0x160>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	69d2      	ldr	r2, [r2, #28]
 8005e66:	00d2      	lsls	r2, r2, #3
 8005e68:	4920      	ldr	r1, [pc, #128]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e6e:	4b1f      	ldr	r3, [pc, #124]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	4a1e      	ldr	r2, [pc, #120]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e74:	f043 0310 	orr.w	r3, r3, #16
 8005e78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e80:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	4a19      	ldr	r2, [pc, #100]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e8c:	e00f      	b.n	8005eae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d106      	bne.n	8005ea2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e94:	4b15      	ldr	r3, [pc, #84]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	4a14      	ldr	r2, [pc, #80]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ea0:	e005      	b.n	8005eae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ea2:	4b12      	ldr	r3, [pc, #72]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	4a11      	ldr	r2, [pc, #68]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005eae:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a0e      	ldr	r2, [pc, #56]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005eb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eba:	f7fc f859 	bl	8001f70 <HAL_GetTick>
 8005ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ec0:	e008      	b.n	8005ed4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005ec2:	f7fc f855 	bl	8001f70 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e006      	b.n	8005ee2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ed4:	4b05      	ldr	r3, [pc, #20]	; (8005eec <RCCEx_PLL2_Config+0x15c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	ffff0007 	.word	0xffff0007

08005ef4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f02:	4b53      	ldr	r3, [pc, #332]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d101      	bne.n	8005f12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e099      	b.n	8006046 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f12:	4b4f      	ldr	r3, [pc, #316]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a4e      	ldr	r2, [pc, #312]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1e:	f7fc f827 	bl	8001f70 <HAL_GetTick>
 8005f22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f24:	e008      	b.n	8005f38 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f26:	f7fc f823 	bl	8001f70 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e086      	b.n	8006046 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f38:	4b45      	ldr	r3, [pc, #276]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d1f0      	bne.n	8005f26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f44:	4b42      	ldr	r3, [pc, #264]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	051b      	lsls	r3, r3, #20
 8005f52:	493f      	ldr	r1, [pc, #252]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	628b      	str	r3, [r1, #40]	; 0x28
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	025b      	lsls	r3, r3, #9
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	3b01      	subs	r3, #1
 8005f74:	041b      	lsls	r3, r3, #16
 8005f76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	061b      	lsls	r3, r3, #24
 8005f84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f88:	4931      	ldr	r1, [pc, #196]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f8e:	4b30      	ldr	r3, [pc, #192]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	492d      	ldr	r1, [pc, #180]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fa0:	4b2b      	ldr	r3, [pc, #172]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	4928      	ldr	r1, [pc, #160]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005fb2:	4b27      	ldr	r3, [pc, #156]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	4a26      	ldr	r2, [pc, #152]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005fbe:	4b24      	ldr	r3, [pc, #144]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fc2:	4b24      	ldr	r3, [pc, #144]	; (8006054 <RCCEx_PLL3_Config+0x160>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	69d2      	ldr	r2, [r2, #28]
 8005fca:	00d2      	lsls	r2, r2, #3
 8005fcc:	4920      	ldr	r1, [pc, #128]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005fd2:	4b1f      	ldr	r3, [pc, #124]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	4a1e      	ldr	r2, [pc, #120]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d106      	bne.n	8005ff2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005fe4:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	4a19      	ldr	r2, [pc, #100]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005fea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ff0:	e00f      	b.n	8006012 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d106      	bne.n	8006006 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ff8:	4b15      	ldr	r3, [pc, #84]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	4a14      	ldr	r2, [pc, #80]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8005ffe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006004:	e005      	b.n	8006012 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006006:	4b12      	ldr	r3, [pc, #72]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	4a11      	ldr	r2, [pc, #68]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 800600c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006010:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006012:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a0e      	ldr	r2, [pc, #56]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 8006018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800601e:	f7fb ffa7 	bl	8001f70 <HAL_GetTick>
 8006022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006024:	e008      	b.n	8006038 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006026:	f7fb ffa3 	bl	8001f70 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e006      	b.n	8006046 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <RCCEx_PLL3_Config+0x15c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0f0      	beq.n	8006026 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	58024400 	.word	0x58024400
 8006054:	ffff0007 	.word	0xffff0007

08006058 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	; 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e07c      	b.n	8006164 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10c      	bne.n	8006090 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d102      	bne.n	800608a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fb fb0a 	bl	80016a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2203      	movs	r2, #3
 8006094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f867 	bl	800616c <HAL_SD_InitCard>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e05d      	b.n	8006164 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80060a8:	f107 0308 	add.w	r3, r7, #8
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa94 	bl	80065dc <HAL_SD_GetCardStatus>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e052      	b.n	8006164 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80060be:	7e3b      	ldrb	r3, [r7, #24]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80060c4:	7e7b      	ldrb	r3, [r7, #25]
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d10a      	bne.n	80060e8 <HAL_SD_Init+0x90>
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d102      	bne.n	80060de <HAL_SD_Init+0x86>
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d004      	beq.n	80060e8 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80060e6:	e00b      	b.n	8006100 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d104      	bne.n	80060fa <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80060f8:	e002      	b.n	8006100 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fb00 	bl	800670c <HAL_SD_ConfigWideBusOperation>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e026      	b.n	8006164 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006116:	f7fb ff2b 	bl	8001f70 <HAL_GetTick>
 800611a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800611c:	e011      	b.n	8006142 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800611e:	f7fb ff27 	bl	8001f70 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800612c:	d109      	bne.n	8006142 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e010      	b.n	8006164 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fb72 	bl	800682c <HAL_SD_GetCardState>
 8006148:	4603      	mov	r3, r0
 800614a:	2b04      	cmp	r3, #4
 800614c:	d1e7      	bne.n	800611e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3728      	adds	r7, #40	; 0x28
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800616c:	b5b0      	push	{r4, r5, r7, lr}
 800616e:	b090      	sub	sp, #64	; 0x40
 8006170:	af04      	add	r7, sp, #16
 8006172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006178:	2300      	movs	r3, #0
 800617a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800617c:	2300      	movs	r3, #0
 800617e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006180:	2300      	movs	r3, #0
 8006182:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006184:	23fa      	movs	r3, #250	; 0xfa
 8006186:	61fb      	str	r3, [r7, #28]

#if (USE_SD_TRANSCEIVER != 0U) || defined (USE_SD_DIRPOL)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d107      	bne.n	80061a0 <HAL_SD_InitCard+0x34>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0210 	orr.w	r2, r2, #16
 800619e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681d      	ldr	r5, [r3, #0]
 80061a4:	466c      	mov	r4, sp
 80061a6:	f107 0318 	add.w	r3, r7, #24
 80061aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061b2:	f107 030c 	add.w	r3, r7, #12
 80061b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061b8:	4628      	mov	r0, r5
 80061ba:	f003 fded 	bl	8009d98 <SDMMC_Init>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 80061c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_SD_InitCard+0x64>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e04d      	b.n	800626c <HAL_SD_InitCard+0x100>
  }

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f003 fe16 	bl	8009e06 <SDMMC_PowerState_ON>
 80061da:	4603      	mov	r3, r0
 80061dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(status != HAL_OK)
 80061e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_SD_InitCard+0x80>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e03f      	b.n	800626c <HAL_SD_InitCard+0x100>
  }

  /* wait 74 Cycles: required power up waiting time before starting 
     the SD initialization sequence */
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC)/(2U*SDMMC_INIT_CLK_DIV);
 80061ec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80061f0:	f7fe ff82 	bl	80050f8 <HAL_RCCEx_GetPeriphCLKFreq>
 80061f4:	4602      	mov	r2, r0
 80061f6:	4b1f      	ldr	r3, [pc, #124]	; (8006274 <HAL_SD_InitCard+0x108>)
 80061f8:	fba3 2302 	umull	r2, r3, r3, r2
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28

  if(sdmmc_clk != 0U)
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	2b00      	cmp	r3, #0
 8006204:	d008      	beq.n	8006218 <HAL_SD_InitCard+0xac>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006206:	4a1c      	ldr	r2, [pc, #112]	; (8006278 <HAL_SD_InitCard+0x10c>)
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	fbb2 f3f3 	udiv	r3, r2, r3
 800620e:	3301      	adds	r3, #1
 8006210:	4618      	mov	r0, r3
 8006212:	f7fb feb9 	bl	8001f88 <HAL_Delay>
 8006216:	e002      	b.n	800621e <HAL_SD_InitCard+0xb2>
  }
  else
  {
    HAL_Delay(2U);
 8006218:	2002      	movs	r0, #2
 800621a:	f7fb feb5 	bl	8001f88 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fbe2 	bl	80069e8 <SD_PowerON>
 8006224:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00b      	beq.n	8006244 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e013      	b.n	800626c <HAL_SD_InitCard+0x100>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fb11 	bl	800686c <SD_InitCard>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00b      	beq.n	800626a <HAL_SD_InitCard+0xfe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <HAL_SD_InitCard+0x100>
  }

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3730      	adds	r7, #48	; 0x30
 8006270:	46bd      	mov	sp, r7
 8006272:	bdb0      	pop	{r4, r5, r7, pc}
 8006274:	10624dd3 	.word	0x10624dd3
 8006278:	00012110 	.word	0x00012110

0800627c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	4603      	mov	r3, r0
 8006284:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
	...

08006294 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a2:	0f9b      	lsrs	r3, r3, #30
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ae:	0e9b      	lsrs	r3, r3, #26
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f003 030f 	and.w	r3, r3, #15
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c0:	0e1b      	lsrs	r3, r3, #24
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f003 0303 	and.w	r3, r3, #3
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d2:	0c1b      	lsrs	r3, r3, #16
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f4:	0d1b      	lsrs	r3, r3, #20
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	b2da      	uxtb	r2, r3
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006312:	0bdb      	lsrs	r3, r3, #15
 8006314:	b2db      	uxtb	r3, r3
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	b2da      	uxtb	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006324:	0b9b      	lsrs	r3, r3, #14
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	b2da      	uxtb	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006336:	0b5b      	lsrs	r3, r3, #13
 8006338:	b2db      	uxtb	r3, r3
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	b2da      	uxtb	r2, r3
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006348:	0b1b      	lsrs	r3, r3, #12
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	b2da      	uxtb	r2, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2200      	movs	r2, #0
 800635a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d163      	bne.n	800642c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006368:	009a      	lsls	r2, r3, #2
 800636a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800636e:	4013      	ands	r3, r2
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006374:	0f92      	lsrs	r2, r2, #30
 8006376:	431a      	orrs	r2, r3
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006380:	0edb      	lsrs	r3, r3, #27
 8006382:	b2db      	uxtb	r3, r3
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	b2da      	uxtb	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006392:	0e1b      	lsrs	r3, r3, #24
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	b2da      	uxtb	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a4:	0d5b      	lsrs	r3, r3, #21
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b6:	0c9b      	lsrs	r3, r3, #18
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c8:	0bdb      	lsrs	r3, r3, #15
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	7e1b      	ldrb	r3, [r3, #24]
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	3302      	adds	r3, #2
 80063ec:	2201      	movs	r2, #1
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80063f6:	fb02 f203 	mul.w	r2, r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	7a1b      	ldrb	r3, [r3, #8]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	2201      	movs	r2, #1
 800640a:	409a      	lsls	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006418:	0a52      	lsrs	r2, r2, #9
 800641a:	fb02 f203 	mul.w	r2, r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006428:	659a      	str	r2, [r3, #88]	; 0x58
 800642a:	e031      	b.n	8006490 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d11d      	bne.n	8006470 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006438:	041b      	lsls	r3, r3, #16
 800643a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006442:	0c1b      	lsrs	r3, r3, #16
 8006444:	431a      	orrs	r2, r3
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	3301      	adds	r3, #1
 8006450:	029a      	lsls	r2, r3, #10
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006464:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	659a      	str	r2, [r3, #88]	; 0x58
 800646e:	e00f      	b.n	8006490 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a58      	ldr	r2, [pc, #352]	; (80065d8 <HAL_SD_GetCardCSD+0x344>)
 8006476:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e09d      	b.n	80065cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006494:	0b9b      	lsrs	r3, r3, #14
 8006496:	b2db      	uxtb	r3, r3
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064a6:	09db      	lsrs	r3, r3, #7
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c8:	0fdb      	lsrs	r3, r3, #31
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d4:	0f5b      	lsrs	r3, r3, #29
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e6:	0e9b      	lsrs	r3, r3, #26
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064f8:	0d9b      	lsrs	r3, r3, #22
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	b2da      	uxtb	r2, r3
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650a:	0d5b      	lsrs	r3, r3, #21
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	b2da      	uxtb	r2, r3
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006526:	0c1b      	lsrs	r3, r3, #16
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	b2da      	uxtb	r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800653a:	0bdb      	lsrs	r3, r3, #15
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	b2da      	uxtb	r2, r3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800654e:	0b9b      	lsrs	r3, r3, #14
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	b2da      	uxtb	r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006562:	0b5b      	lsrs	r3, r3, #13
 8006564:	b2db      	uxtb	r3, r3
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	b2da      	uxtb	r2, r3
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006576:	0b1b      	lsrs	r3, r3, #12
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	b2da      	uxtb	r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800658a:	0a9b      	lsrs	r3, r3, #10
 800658c:	b2db      	uxtb	r3, r3
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	b2da      	uxtb	r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b2:	085b      	lsrs	r3, r3, #1
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	1fe00fff 	.word	0x1fe00fff

080065dc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that 
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b094      	sub	sp, #80	; 0x50
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80065e6:	f107 030c 	add.w	r3, r7, #12
 80065ea:	4619      	mov	r1, r3
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fb09 	bl	8006c04 <SD_SendSDStatus>
 80065f2:	64f8      	str	r0, [r7, #76]	; 0x4c
  if(errorstate != HAL_SD_ERROR_NONE)
 80065f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00f      	beq.n	800661a <HAL_SD_GetCardStatus+0x3e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a42      	ldr	r2, [pc, #264]	; (8006708 <HAL_SD_GetCardStatus+0x12c>)
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e071      	b.n	80066fe <HAL_SD_GetCardStatus+0x122>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	099b      	lsrs	r3, r3, #6
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f003 0303 	and.w	r3, r3, #3
 8006624:	b2da      	uxtb	r2, r3
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	095b      	lsrs	r3, r3, #5
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	b2da      	uxtb	r2, r3
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	0a1b      	lsrs	r3, r3, #8
 800663e:	b29b      	uxth	r3, r3
 8006640:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	0e1b      	lsrs	r3, r3, #24
 800664a:	b29b      	uxth	r3, r3
 800664c:	4313      	orrs	r3, r2
 800664e:	b29a      	uxth	r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	061a      	lsls	r2, r3, #24
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	021b      	lsls	r3, r3, #8
 800665c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006660:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	0a1b      	lsrs	r3, r3, #8
 8006666:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800666a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	0e1b      	lsrs	r3, r3, #24
 8006670:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	b2da      	uxtb	r2, r3
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	0a1b      	lsrs	r3, r3, #8
 8006682:	b2da      	uxtb	r2, r3
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	0d1b      	lsrs	r3, r3, #20
 800668c:	b2db      	uxtb	r3, r3
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	b2da      	uxtb	r2, r3
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	0c1b      	lsrs	r3, r3, #16
 800669c:	b29b      	uxth	r3, r3
 800669e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	4313      	orrs	r3, r2
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	0a9b      	lsrs	r3, r3, #10
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	0a1b      	lsrs	r3, r3, #8
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f003 030f 	and.w	r3, r3, #15
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	0e1b      	lsrs	r3, r3, #24
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	749a      	strb	r2, [r3, #18]
  }

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3750      	adds	r7, #80	; 0x50
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	1fe00fff 	.word	0x1fe00fff

0800670c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800670c:	b5b0      	push	{r4, r5, r7, lr}
 800670e:	b08e      	sub	sp, #56	; 0x38
 8006710:	af04      	add	r7, sp, #16
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2203      	movs	r2, #3
 800671a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006722:	2b03      	cmp	r3, #3
 8006724:	d02e      	beq.n	8006784 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800672c:	d106      	bne.n	800673c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	639a      	str	r2, [r3, #56]	; 0x38
 800673a:	e029      	b.n	8006790 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006742:	d10a      	bne.n	800675a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fb55 	bl	8006df4 <SD_WideBus_Enable>
 800674a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
 8006758:	e01a      	b.n	8006790 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10a      	bne.n	8006776 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fb92 	bl	8006e8a <SD_WideBus_Disable>
 8006766:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
 8006774:	e00c      	b.n	8006790 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	639a      	str	r2, [r3, #56]	; 0x38
 8006782:	e005      	b.n	8006790 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	2b00      	cmp	r3, #0
 8006796:	d009      	beq.n	80067ac <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a22      	ldr	r2, [pc, #136]	; (8006828 <HAL_SD_ConfigWideBusOperation+0x11c>)
 800679e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e039      	b.n	8006820 <HAL_SD_ConfigWideBusOperation+0x114>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	61bb      	str	r3, [r7, #24]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d903      	bls.n	80067d2 <HAL_SD_ConfigWideBusOperation+0xc6>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e012      	b.n	80067f8 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067da:	d103      	bne.n	80067e4 <HAL_SD_ConfigWideBusOperation+0xd8>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	e009      	b.n	80067f8 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ec:	d102      	bne.n	80067f4 <HAL_SD_ConfigWideBusOperation+0xe8>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80067ee:	2302      	movs	r3, #2
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	e001      	b.n	80067f8 <HAL_SD_ConfigWideBusOperation+0xec>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80067f4:	2304      	movs	r3, #4
 80067f6:	61fb      	str	r3, [r7, #28]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681d      	ldr	r5, [r3, #0]
 80067fc:	466c      	mov	r4, sp
 80067fe:	f107 0318 	add.w	r3, r7, #24
 8006802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800680a:	f107 030c 	add.w	r3, r7, #12
 800680e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006810:	4628      	mov	r0, r5
 8006812:	f003 fac1 	bl	8009d98 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3728      	adds	r7, #40	; 0x28
 8006824:	46bd      	mov	sp, r7
 8006826:	bdb0      	pop	{r4, r5, r7, pc}
 8006828:	1fe00fff 	.word	0x1fe00fff

0800682c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006838:	f107 030c 	add.w	r3, r7, #12
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fab0 	bl	8006da4 <SD_SendStatus>
 8006844:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d005      	beq.n	8006858 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	0a5b      	lsrs	r3, r3, #9
 800685c:	f003 030f 	and.w	r3, r3, #15
 8006860:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006862:	693b      	ldr	r3, [r7, #16]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b091      	sub	sp, #68	; 0x44
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006874:	2301      	movs	r3, #1
 8006876:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4618      	mov	r0, r3
 800687e:	f003 fad3 	bl	8009e28 <SDMMC_GetPowerState>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006888:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800688c:	e0a8      	b.n	80069e0 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006892:	2b03      	cmp	r3, #3
 8006894:	d02e      	beq.n	80068f4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f003 fc55 	bl	800a14a <SDMMC_CmdSendCID>
 80068a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80068a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <SD_InitCard+0x40>
    {
      return errorstate;
 80068a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068aa:	e099      	b.n	80069e0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f003 fafd 	bl	8009eb2 <SDMMC_GetResponse>
 80068b8:	4602      	mov	r2, r0
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2104      	movs	r1, #4
 80068c4:	4618      	mov	r0, r3
 80068c6:	f003 faf4 	bl	8009eb2 <SDMMC_GetResponse>
 80068ca:	4602      	mov	r2, r0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2108      	movs	r1, #8
 80068d6:	4618      	mov	r0, r3
 80068d8:	f003 faeb 	bl	8009eb2 <SDMMC_GetResponse>
 80068dc:	4602      	mov	r2, r0
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	210c      	movs	r1, #12
 80068e8:	4618      	mov	r0, r3
 80068ea:	f003 fae2 	bl	8009eb2 <SDMMC_GetResponse>
 80068ee:	4602      	mov	r2, r0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d00d      	beq.n	8006918 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f107 020e 	add.w	r2, r7, #14
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f003 fc5e 	bl	800a1c8 <SDMMC_CmdSetRelAdd>
 800690c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800690e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <SD_InitCard+0xac>
    {
      return errorstate;
 8006914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006916:	e063      	b.n	80069e0 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691c:	2b03      	cmp	r3, #3
 800691e:	d036      	beq.n	800698e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006920:	89fb      	ldrh	r3, [r7, #14]
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006930:	041b      	lsls	r3, r3, #16
 8006932:	4619      	mov	r1, r3
 8006934:	4610      	mov	r0, r2
 8006936:	f003 fc27 	bl	800a188 <SDMMC_CmdSendCSD>
 800693a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800693c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <SD_InitCard+0xda>
    {
      return errorstate;
 8006942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006944:	e04c      	b.n	80069e0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2100      	movs	r1, #0
 800694c:	4618      	mov	r0, r3
 800694e:	f003 fab0 	bl	8009eb2 <SDMMC_GetResponse>
 8006952:	4602      	mov	r2, r0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2104      	movs	r1, #4
 800695e:	4618      	mov	r0, r3
 8006960:	f003 faa7 	bl	8009eb2 <SDMMC_GetResponse>
 8006964:	4602      	mov	r2, r0
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2108      	movs	r1, #8
 8006970:	4618      	mov	r0, r3
 8006972:	f003 fa9e 	bl	8009eb2 <SDMMC_GetResponse>
 8006976:	4602      	mov	r2, r0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	210c      	movs	r1, #12
 8006982:	4618      	mov	r0, r3
 8006984:	f003 fa95 	bl	8009eb2 <SDMMC_GetResponse>
 8006988:	4602      	mov	r2, r0
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2104      	movs	r1, #4
 8006994:	4618      	mov	r0, r3
 8006996:	f003 fa8c 	bl	8009eb2 <SDMMC_GetResponse>
 800699a:	4603      	mov	r3, r0
 800699c:	0d1a      	lsrs	r2, r3, #20
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80069a2:	f107 0310 	add.w	r3, r7, #16
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff fc73 	bl	8006294 <HAL_SD_GetCardCSD>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069b8:	e012      	b.n	80069e0 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6819      	ldr	r1, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c2:	041b      	lsls	r3, r3, #16
 80069c4:	f04f 0400 	mov.w	r4, #0
 80069c8:	461a      	mov	r2, r3
 80069ca:	4623      	mov	r3, r4
 80069cc:	4608      	mov	r0, r1
 80069ce:	f003 fad2 	bl	8009f76 <SDMMC_CmdSelDesel>
 80069d2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80069d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <SD_InitCard+0x172>
  {
    return errorstate;
 80069da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069dc:	e000      	b.n	80069e0 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3744      	adds	r7, #68	; 0x44
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd90      	pop	{r4, r7, pc}

080069e8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	61fb      	str	r3, [r7, #28]
 80069f8:	2300      	movs	r3, #0
 80069fa:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 80069fc:	f7fb fab8 	bl	8001f70 <HAL_GetTick>
 8006a00:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f003 fad9 	bl	8009fbe <SDMMC_CmdGoIdleState>
 8006a0c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <SD_PowerON+0x30>
  {
    return errorstate;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	e0ee      	b.n	8006bf6 <SD_PowerON+0x20e>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f003 faec 	bl	8009ffa <SDMMC_CmdOperCond>
 8006a22:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00d      	beq.n	8006a46 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f003 fac2 	bl	8009fbe <SDMMC_CmdGoIdleState>
 8006a3a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d004      	beq.n	8006a4c <SD_PowerON+0x64>
    {
      return errorstate;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	e0d7      	b.n	8006bf6 <SD_PowerON+0x20e>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d137      	bne.n	8006ac4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f003 faed 	bl	800a03a <SDMMC_CmdAppCommand>
 8006a60:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d02d      	beq.n	8006ac4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a6c:	e0c3      	b.n	8006bf6 <SD_PowerON+0x20e>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2100      	movs	r1, #0
 8006a74:	4618      	mov	r0, r3
 8006a76:	f003 fae0 	bl	800a03a <SDMMC_CmdAppCommand>
 8006a7a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <SD_PowerON+0x9e>
    {
      return errorstate;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	e0b7      	b.n	8006bf6 <SD_PowerON+0x20e>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	495d      	ldr	r1, [pc, #372]	; (8006c00 <SD_PowerON+0x218>)
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f003 faf7 	bl	800a080 <SDMMC_CmdAppOperCommand>
 8006a92:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a9e:	e0aa      	b.n	8006bf6 <SD_PowerON+0x20e>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f003 fa03 	bl	8009eb2 <SDMMC_GetResponse>
 8006aac:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	0fdb      	lsrs	r3, r3, #31
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d101      	bne.n	8006aba <SD_PowerON+0xd2>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <SD_PowerON+0xd4>
 8006aba:	2300      	movs	r3, #0
 8006abc:	61bb      	str	r3, [r7, #24]

    count++;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d802      	bhi.n	8006ad4 <SD_PowerON+0xec>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0cc      	beq.n	8006a6e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d902      	bls.n	8006ae4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006ade:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ae2:	e088      	b.n	8006bf6 <SD_PowerON+0x20e>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 8082 	beq.w	8006bf4 <SD_PowerON+0x20c>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d17a      	bne.n	8006bf4 <SD_PowerON+0x20c>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d075      	beq.n	8006bf4 <SD_PowerON+0x20c>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b0e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0208 	orr.w	r2, r2, #8
 8006b1e:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f003 fbb6 	bl	800a296 <SDMMC_CmdVoltageSwitch>
 8006b2a:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00c      	beq.n	8006b4c <SD_PowerON+0x164>
        {
          return errorstate;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	e05f      	b.n	8006bf6 <SD_PowerON+0x20e>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b36:	f7fb fa1b 	bl	8001f70 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b44:	d102      	bne.n	8006b4c <SD_PowerON+0x164>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8006b46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b4a:	e054      	b.n	8006bf6 <SD_PowerON+0x20e>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b5a:	d1ec      	bne.n	8006b36 <SD_PowerON+0x14e>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b74:	d002      	beq.n	8006b7c <SD_PowerON+0x194>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8006b76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b7a:	e03c      	b.n	8006bf6 <SD_PowerON+0x20e>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	f7ff fb7d 	bl	800627c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f042 0204 	orr.w	r2, r2, #4
 8006b90:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006b92:	e00a      	b.n	8006baa <SD_PowerON+0x1c2>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b94:	f7fb f9ec 	bl	8001f70 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba2:	d102      	bne.n	8006baa <SD_PowerON+0x1c2>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8006ba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ba8:	e025      	b.n	8006bf6 <SD_PowerON+0x20e>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bb8:	d1ec      	bne.n	8006b94 <SD_PowerON+0x1ac>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bc2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd2:	d102      	bne.n	8006bda <SD_PowerON+0x1f2>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bd8:	e00d      	b.n	8006bf6 <SD_PowerON+0x20e>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2213      	movs	r2, #19
 8006be0:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bea:	639a      	str	r2, [r3, #56]	; 0x38
        }

        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bf2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3720      	adds	r7, #32
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	c1100000 	.word	0xc1100000

08006c04 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08c      	sub	sp, #48	; 0x30
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c0e:	f7fb f9af 	bl	8001f70 <HAL_GetTick>
 8006c12:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f003 f947 	bl	8009eb2 <SDMMC_GetResponse>
 8006c24:	4603      	mov	r3, r0
 8006c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c2e:	d102      	bne.n	8006c36 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c34:	e0b0      	b.n	8006d98 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2140      	movs	r1, #64	; 0x40
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f003 f977 	bl	8009f30 <SDMMC_CmdBlockLength>
 8006c42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	e0a0      	b.n	8006d98 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5e:	041b      	lsls	r3, r3, #16
 8006c60:	4619      	mov	r1, r3
 8006c62:	4610      	mov	r0, r2
 8006c64:	f003 f9e9 	bl	800a03a <SDMMC_CmdAppCommand>
 8006c68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	e08d      	b.n	8006d98 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c80:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006c82:	2340      	movs	r3, #64	; 0x40
 8006c84:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006c86:	2360      	movs	r3, #96	; 0x60
 8006c88:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006c92:	2301      	movs	r3, #1
 8006c94:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f107 0208 	add.w	r2, r7, #8
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f003 f919 	bl	8009ed8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f003 fad1 	bl	800a252 <SDMMC_CmdStatusRegister>
 8006cb0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d02b      	beq.n	8006d10 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	e069      	b.n	8006d98 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d013      	beq.n	8006cfa <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cd6:	e00d      	b.n	8006cf4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f003 f885 	bl	8009dec <SDMMC_ReadFIFO>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	601a      	str	r2, [r3, #0]
        pData++;
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	3304      	adds	r3, #4
 8006cec:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf6:	2b07      	cmp	r3, #7
 8006cf8:	d9ee      	bls.n	8006cd8 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006cfa:	f7fb f939 	bl	8001f70 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d08:	d102      	bne.n	8006d10 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d0e:	e043      	b.n	8006d98 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d16:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0d2      	beq.n	8006cc4 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d24:	f003 0308 	and.w	r3, r3, #8
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006d2c:	2308      	movs	r3, #8
 8006d2e:	e033      	b.n	8006d98 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e02a      	b.n	8006d98 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d017      	beq.n	8006d80 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006d50:	2320      	movs	r3, #32
 8006d52:	e021      	b.n	8006d98 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f003 f847 	bl	8009dec <SDMMC_ReadFIFO>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	601a      	str	r2, [r3, #0]
    pData++;
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	3304      	adds	r3, #4
 8006d68:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006d6a:	f7fb f901 	bl	8001f70 <HAL_GetTick>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d78:	d102      	bne.n	8006d80 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006d7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d7e:	e00b      	b.n	8006d98 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e2      	bne.n	8006d54 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a03      	ldr	r2, [pc, #12]	; (8006da0 <SD_SendSDStatus+0x19c>)
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3730      	adds	r7, #48	; 0x30
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	18000f3a 	.word	0x18000f3a

08006da4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006db4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006db8:	e018      	b.n	8006dec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dc2:	041b      	lsls	r3, r3, #16
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	f003 fa20 	bl	800a20c <SDMMC_CmdSendStatus>
 8006dcc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	e009      	b.n	8006dec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4618      	mov	r0, r3
 8006de0:	f003 f867 	bl	8009eb2 <SDMMC_GetResponse>
 8006de4:	4602      	mov	r2, r0
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	2300      	movs	r3, #0
 8006e02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f003 f851 	bl	8009eb2 <SDMMC_GetResponse>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e1a:	d102      	bne.n	8006e22 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e20:	e02f      	b.n	8006e82 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e22:	f107 030c 	add.w	r3, r7, #12
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f879 	bl	8006f20 <SD_FindSCR>
 8006e2e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d001      	beq.n	8006e3a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	e023      	b.n	8006e82 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01c      	beq.n	8006e7e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4610      	mov	r0, r2
 8006e52:	f003 f8f2 	bl	800a03a <SDMMC_CmdAppCommand>
 8006e56:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	e00f      	b.n	8006e82 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2102      	movs	r1, #2
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f003 f929 	bl	800a0c0 <SDMMC_CmdBusWidth>
 8006e6e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	e003      	b.n	8006e82 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e001      	b.n	8006e82 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b086      	sub	sp, #24
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
 8006e96:	2300      	movs	r3, #0
 8006e98:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f003 f806 	bl	8009eb2 <SDMMC_GetResponse>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eb0:	d102      	bne.n	8006eb8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006eb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006eb6:	e02f      	b.n	8006f18 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006eb8:	f107 030c 	add.w	r3, r7, #12
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f82e 	bl	8006f20 <SD_FindSCR>
 8006ec4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	e023      	b.n	8006f18 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d01c      	beq.n	8006f14 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee2:	041b      	lsls	r3, r3, #16
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	f003 f8a7 	bl	800a03a <SDMMC_CmdAppCommand>
 8006eec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	e00f      	b.n	8006f18 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f003 f8de 	bl	800a0c0 <SDMMC_CmdBusWidth>
 8006f04:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d001      	beq.n	8006f10 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	e003      	b.n	8006f18 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f10:	2300      	movs	r3, #0
 8006f12:	e001      	b.n	8006f18 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08e      	sub	sp, #56	; 0x38
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f2a:	f7fb f821 	bl	8001f70 <HAL_GetTick>
 8006f2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006f34:	2300      	movs	r3, #0
 8006f36:	60bb      	str	r3, [r7, #8]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2108      	movs	r1, #8
 8006f46:	4618      	mov	r0, r3
 8006f48:	f002 fff2 	bl	8009f30 <SDMMC_CmdBlockLength>
 8006f4c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	e0ad      	b.n	80070b4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f60:	041b      	lsls	r3, r3, #16
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f003 f868 	bl	800a03a <SDMMC_CmdAppCommand>
 8006f6a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	e09e      	b.n	80070b4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f7a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006f7c:	2308      	movs	r3, #8
 8006f7e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006f80:	2330      	movs	r3, #48	; 0x30
 8006f82:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006f84:	2302      	movs	r3, #2
 8006f86:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f107 0210 	add.w	r2, r7, #16
 8006f98:	4611      	mov	r1, r2
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f002 ff9c 	bl	8009ed8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f003 f8ae 	bl	800a106 <SDMMC_CmdSendSCR>
 8006faa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d027      	beq.n	8007002 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb4:	e07e      	b.n	80070b4 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d113      	bne.n	8006fec <SD_FindSCR+0xcc>
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d110      	bne.n	8006fec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f002 ff0c 	bl	8009dec <SDMMC_ReadFIFO>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f002 ff05 	bl	8009dec <SDMMC_ReadFIFO>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	60fb      	str	r3, [r7, #12]
      index++;
 8006fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe8:	3301      	adds	r3, #1
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006fec:	f7fa ffc0 	bl	8001f70 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ffa:	d102      	bne.n	8007002 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006ffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007000:	e058      	b.n	80070b4 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007008:	f240 532a 	movw	r3, #1322	; 0x52a
 800700c:	4013      	ands	r3, r2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0d1      	beq.n	8006fb6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2208      	movs	r2, #8
 8007026:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007028:	2308      	movs	r3, #8
 800702a:	e043      	b.n	80070b4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2202      	movs	r2, #2
 8007040:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007042:	2302      	movs	r3, #2
 8007044:	e036      	b.n	80070b4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2220      	movs	r2, #32
 800705a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800705c:	2320      	movs	r3, #32
 800705e:	e029      	b.n	80070b4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a15      	ldr	r2, [pc, #84]	; (80070bc <SD_FindSCR+0x19c>)
 8007066:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	061a      	lsls	r2, r3, #24
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	021b      	lsls	r3, r3, #8
 8007070:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007074:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800707e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	0e1b      	lsrs	r3, r3, #24
 8007084:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007088:	601a      	str	r2, [r3, #0]
    scr++;
 800708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708c:	3304      	adds	r3, #4
 800708e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	061a      	lsls	r2, r3, #24
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800709c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	0a1b      	lsrs	r3, r3, #8
 80070a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	0e1b      	lsrs	r3, r3, #24
 80070ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80070ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3738      	adds	r7, #56	; 0x38
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	18000f3a 	.word	0x18000f3a

080070c0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e02b      	b.n	800712c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fa fdfb 	bl	8001ce4 <HAL_SDRAM_MspInit>
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2202      	movs	r2, #2
 80070f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4619      	mov	r1, r3
 8007100:	4610      	mov	r0, r2
 8007102:	f002 fd83 	bl	8009c0c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	461a      	mov	r2, r3
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	f002 fdd7 	bl	8009cc4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8007116:	4b07      	ldr	r3, [pc, #28]	; (8007134 <HAL_SDRAM_Init+0x74>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a06      	ldr	r2, [pc, #24]	; (8007134 <HAL_SDRAM_Init+0x74>)
 800711c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007120:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3708      	adds	r7, #8
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	52004000 	.word	0x52004000

08007138 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e0e2      	b.n	8007314 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a70      	ldr	r2, [pc, #448]	; (800731c <HAL_SPI_Init+0x1e4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00f      	beq.n	800717e <HAL_SPI_Init+0x46>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a6f      	ldr	r2, [pc, #444]	; (8007320 <HAL_SPI_Init+0x1e8>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00a      	beq.n	800717e <HAL_SPI_Init+0x46>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a6d      	ldr	r2, [pc, #436]	; (8007324 <HAL_SPI_Init+0x1ec>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d005      	beq.n	800717e <HAL_SPI_Init+0x46>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	2b0f      	cmp	r3, #15
 8007178:	d901      	bls.n	800717e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e0ca      	b.n	8007314 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f8d2 	bl	8007328 <SPI_GetPacketSize>
 8007184:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a64      	ldr	r2, [pc, #400]	; (800731c <HAL_SPI_Init+0x1e4>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00c      	beq.n	80071aa <HAL_SPI_Init+0x72>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a62      	ldr	r2, [pc, #392]	; (8007320 <HAL_SPI_Init+0x1e8>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d007      	beq.n	80071aa <HAL_SPI_Init+0x72>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a61      	ldr	r2, [pc, #388]	; (8007324 <HAL_SPI_Init+0x1ec>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d002      	beq.n	80071aa <HAL_SPI_Init+0x72>
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	d811      	bhi.n	80071ce <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80071ae:	4a5b      	ldr	r2, [pc, #364]	; (800731c <HAL_SPI_Init+0x1e4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d009      	beq.n	80071c8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a59      	ldr	r2, [pc, #356]	; (8007320 <HAL_SPI_Init+0x1e8>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d004      	beq.n	80071c8 <HAL_SPI_Init+0x90>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a58      	ldr	r2, [pc, #352]	; (8007324 <HAL_SPI_Init+0x1ec>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d104      	bne.n	80071d2 <HAL_SPI_Init+0x9a>
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	2b10      	cmp	r3, #16
 80071cc:	d901      	bls.n	80071d2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e0a0      	b.n	8007314 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fa fac8 	bl	800177c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800720c:	d110      	bne.n	8007230 <HAL_SPI_Init+0xf8>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007216:	d10b      	bne.n	8007230 <HAL_SPI_Init+0xf8>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721c:	2b00      	cmp	r3, #0
 800721e:	d107      	bne.n	8007230 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800722e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007238:	431a      	orrs	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	431a      	orrs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	ea42 0103 	orr.w	r1, r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	431a      	orrs	r2, r3
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007284:	431a      	orrs	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007290:	ea42 0103 	orr.w	r1, r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	430a      	orrs	r2, r1
 800729e:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d113      	bne.n	80072d0 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ba:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072ce:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	40013000 	.word	0x40013000
 8007320:	40003800 	.word	0x40003800
 8007324:	40003c00 	.word	0x40003c00

08007328 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	3301      	adds	r3, #1
 8007338:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	3301      	adds	r3, #1
 8007340:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	3307      	adds	r3, #7
 8007346:	08db      	lsrs	r3, r3, #3
 8007348:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e042      	b.n	80073f6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007376:	2b00      	cmp	r3, #0
 8007378:	d106      	bne.n	8007388 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fa faf8 	bl	8001978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2224      	movs	r2, #36	; 0x24
 800738c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f82d 	bl	8007400 <UART_SetConfig>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e022      	b.n	80073f6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f002 f99f 	bl	80096fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0201 	orr.w	r2, r2, #1
 80073ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f002 fa26 	bl	8009840 <UART_CheckIdleState>
 80073f4:	4603      	mov	r3, r0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007400:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007404:	b090      	sub	sp, #64	; 0x40
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800740a:	2300      	movs	r3, #0
 800740c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007414:	2300      	movs	r3, #0
 8007416:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	4313      	orrs	r3, r2
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007434:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007436:	4313      	orrs	r3, r2
 8007438:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	4bc1      	ldr	r3, [pc, #772]	; (8007748 <UART_SetConfig+0x348>)
 8007442:	4013      	ands	r3, r2
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6812      	ldr	r2, [r2, #0]
 8007448:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800744a:	430b      	orrs	r3, r1
 800744c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4ab7      	ldr	r2, [pc, #732]	; (800774c <UART_SetConfig+0x34c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d004      	beq.n	800747e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800747a:	4313      	orrs	r3, r2
 800747c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	4bb2      	ldr	r3, [pc, #712]	; (8007750 <UART_SetConfig+0x350>)
 8007486:	4013      	ands	r3, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6812      	ldr	r2, [r2, #0]
 800748c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800748e:	430b      	orrs	r3, r1
 8007490:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	f023 010f 	bic.w	r1, r3, #15
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4aa9      	ldr	r2, [pc, #676]	; (8007754 <UART_SetConfig+0x354>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d177      	bne.n	80075a2 <UART_SetConfig+0x1a2>
 80074b2:	4ba9      	ldr	r3, [pc, #676]	; (8007758 <UART_SetConfig+0x358>)
 80074b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074ba:	2b28      	cmp	r3, #40	; 0x28
 80074bc:	d86c      	bhi.n	8007598 <UART_SetConfig+0x198>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0xc4>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	08007569 	.word	0x08007569
 80074c8:	08007599 	.word	0x08007599
 80074cc:	08007599 	.word	0x08007599
 80074d0:	08007599 	.word	0x08007599
 80074d4:	08007599 	.word	0x08007599
 80074d8:	08007599 	.word	0x08007599
 80074dc:	08007599 	.word	0x08007599
 80074e0:	08007599 	.word	0x08007599
 80074e4:	08007571 	.word	0x08007571
 80074e8:	08007599 	.word	0x08007599
 80074ec:	08007599 	.word	0x08007599
 80074f0:	08007599 	.word	0x08007599
 80074f4:	08007599 	.word	0x08007599
 80074f8:	08007599 	.word	0x08007599
 80074fc:	08007599 	.word	0x08007599
 8007500:	08007599 	.word	0x08007599
 8007504:	08007579 	.word	0x08007579
 8007508:	08007599 	.word	0x08007599
 800750c:	08007599 	.word	0x08007599
 8007510:	08007599 	.word	0x08007599
 8007514:	08007599 	.word	0x08007599
 8007518:	08007599 	.word	0x08007599
 800751c:	08007599 	.word	0x08007599
 8007520:	08007599 	.word	0x08007599
 8007524:	08007581 	.word	0x08007581
 8007528:	08007599 	.word	0x08007599
 800752c:	08007599 	.word	0x08007599
 8007530:	08007599 	.word	0x08007599
 8007534:	08007599 	.word	0x08007599
 8007538:	08007599 	.word	0x08007599
 800753c:	08007599 	.word	0x08007599
 8007540:	08007599 	.word	0x08007599
 8007544:	08007589 	.word	0x08007589
 8007548:	08007599 	.word	0x08007599
 800754c:	08007599 	.word	0x08007599
 8007550:	08007599 	.word	0x08007599
 8007554:	08007599 	.word	0x08007599
 8007558:	08007599 	.word	0x08007599
 800755c:	08007599 	.word	0x08007599
 8007560:	08007599 	.word	0x08007599
 8007564:	08007591 	.word	0x08007591
 8007568:	2301      	movs	r3, #1
 800756a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800756e:	e233      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007570:	2304      	movs	r3, #4
 8007572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007576:	e22f      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007578:	2308      	movs	r3, #8
 800757a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800757e:	e22b      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007580:	2310      	movs	r3, #16
 8007582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007586:	e227      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007588:	2320      	movs	r3, #32
 800758a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800758e:	e223      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007590:	2340      	movs	r3, #64	; 0x40
 8007592:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007596:	e21f      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800759e:	bf00      	nop
 80075a0:	e21a      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a6d      	ldr	r2, [pc, #436]	; (800775c <UART_SetConfig+0x35c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d132      	bne.n	8007612 <UART_SetConfig+0x212>
 80075ac:	4b6a      	ldr	r3, [pc, #424]	; (8007758 <UART_SetConfig+0x358>)
 80075ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	2b05      	cmp	r3, #5
 80075b6:	d827      	bhi.n	8007608 <UART_SetConfig+0x208>
 80075b8:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <UART_SetConfig+0x1c0>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	080075d9 	.word	0x080075d9
 80075c4:	080075e1 	.word	0x080075e1
 80075c8:	080075e9 	.word	0x080075e9
 80075cc:	080075f1 	.word	0x080075f1
 80075d0:	080075f9 	.word	0x080075f9
 80075d4:	08007601 	.word	0x08007601
 80075d8:	2300      	movs	r3, #0
 80075da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075de:	e1fb      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80075e0:	2304      	movs	r3, #4
 80075e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075e6:	e1f7      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80075e8:	2308      	movs	r3, #8
 80075ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075ee:	e1f3      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80075f0:	2310      	movs	r3, #16
 80075f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075f6:	e1ef      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80075f8:	2320      	movs	r3, #32
 80075fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075fe:	e1eb      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007600:	2340      	movs	r3, #64	; 0x40
 8007602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007606:	e1e7      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007608:	2380      	movs	r3, #128	; 0x80
 800760a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800760e:	bf00      	nop
 8007610:	e1e2      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a52      	ldr	r2, [pc, #328]	; (8007760 <UART_SetConfig+0x360>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d132      	bne.n	8007682 <UART_SetConfig+0x282>
 800761c:	4b4e      	ldr	r3, [pc, #312]	; (8007758 <UART_SetConfig+0x358>)
 800761e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007620:	f003 0307 	and.w	r3, r3, #7
 8007624:	2b05      	cmp	r3, #5
 8007626:	d827      	bhi.n	8007678 <UART_SetConfig+0x278>
 8007628:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <UART_SetConfig+0x230>)
 800762a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762e:	bf00      	nop
 8007630:	08007649 	.word	0x08007649
 8007634:	08007651 	.word	0x08007651
 8007638:	08007659 	.word	0x08007659
 800763c:	08007661 	.word	0x08007661
 8007640:	08007669 	.word	0x08007669
 8007644:	08007671 	.word	0x08007671
 8007648:	2300      	movs	r3, #0
 800764a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800764e:	e1c3      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007650:	2304      	movs	r3, #4
 8007652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007656:	e1bf      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007658:	2308      	movs	r3, #8
 800765a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800765e:	e1bb      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007660:	2310      	movs	r3, #16
 8007662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007666:	e1b7      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007668:	2320      	movs	r3, #32
 800766a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800766e:	e1b3      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007670:	2340      	movs	r3, #64	; 0x40
 8007672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007676:	e1af      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007678:	2380      	movs	r3, #128	; 0x80
 800767a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800767e:	bf00      	nop
 8007680:	e1aa      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a37      	ldr	r2, [pc, #220]	; (8007764 <UART_SetConfig+0x364>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d132      	bne.n	80076f2 <UART_SetConfig+0x2f2>
 800768c:	4b32      	ldr	r3, [pc, #200]	; (8007758 <UART_SetConfig+0x358>)
 800768e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007690:	f003 0307 	and.w	r3, r3, #7
 8007694:	2b05      	cmp	r3, #5
 8007696:	d827      	bhi.n	80076e8 <UART_SetConfig+0x2e8>
 8007698:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <UART_SetConfig+0x2a0>)
 800769a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769e:	bf00      	nop
 80076a0:	080076b9 	.word	0x080076b9
 80076a4:	080076c1 	.word	0x080076c1
 80076a8:	080076c9 	.word	0x080076c9
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	080076d9 	.word	0x080076d9
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	2300      	movs	r3, #0
 80076ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076be:	e18b      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80076c0:	2304      	movs	r3, #4
 80076c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076c6:	e187      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80076c8:	2308      	movs	r3, #8
 80076ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076ce:	e183      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80076d0:	2310      	movs	r3, #16
 80076d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076d6:	e17f      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80076d8:	2320      	movs	r3, #32
 80076da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076de:	e17b      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80076e0:	2340      	movs	r3, #64	; 0x40
 80076e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076e6:	e177      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80076ee:	bf00      	nop
 80076f0:	e172      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a1c      	ldr	r2, [pc, #112]	; (8007768 <UART_SetConfig+0x368>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d144      	bne.n	8007786 <UART_SetConfig+0x386>
 80076fc:	4b16      	ldr	r3, [pc, #88]	; (8007758 <UART_SetConfig+0x358>)
 80076fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	2b05      	cmp	r3, #5
 8007706:	d839      	bhi.n	800777c <UART_SetConfig+0x37c>
 8007708:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <UART_SetConfig+0x310>)
 800770a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770e:	bf00      	nop
 8007710:	08007729 	.word	0x08007729
 8007714:	08007731 	.word	0x08007731
 8007718:	08007739 	.word	0x08007739
 800771c:	08007741 	.word	0x08007741
 8007720:	0800776d 	.word	0x0800776d
 8007724:	08007775 	.word	0x08007775
 8007728:	2300      	movs	r3, #0
 800772a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800772e:	e153      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007730:	2304      	movs	r3, #4
 8007732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007736:	e14f      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007738:	2308      	movs	r3, #8
 800773a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800773e:	e14b      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007740:	2310      	movs	r3, #16
 8007742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007746:	e147      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007748:	cfff69f3 	.word	0xcfff69f3
 800774c:	58000c00 	.word	0x58000c00
 8007750:	11fff4ff 	.word	0x11fff4ff
 8007754:	40011000 	.word	0x40011000
 8007758:	58024400 	.word	0x58024400
 800775c:	40004400 	.word	0x40004400
 8007760:	40004800 	.word	0x40004800
 8007764:	40004c00 	.word	0x40004c00
 8007768:	40005000 	.word	0x40005000
 800776c:	2320      	movs	r3, #32
 800776e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007772:	e131      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007774:	2340      	movs	r3, #64	; 0x40
 8007776:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800777a:	e12d      	b.n	80079d8 <UART_SetConfig+0x5d8>
 800777c:	2380      	movs	r3, #128	; 0x80
 800777e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007782:	bf00      	nop
 8007784:	e128      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4ac3      	ldr	r2, [pc, #780]	; (8007a98 <UART_SetConfig+0x698>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d178      	bne.n	8007882 <UART_SetConfig+0x482>
 8007790:	4bc2      	ldr	r3, [pc, #776]	; (8007a9c <UART_SetConfig+0x69c>)
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007798:	2b28      	cmp	r3, #40	; 0x28
 800779a:	d86d      	bhi.n	8007878 <UART_SetConfig+0x478>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <UART_SetConfig+0x3a4>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	08007849 	.word	0x08007849
 80077a8:	08007879 	.word	0x08007879
 80077ac:	08007879 	.word	0x08007879
 80077b0:	08007879 	.word	0x08007879
 80077b4:	08007879 	.word	0x08007879
 80077b8:	08007879 	.word	0x08007879
 80077bc:	08007879 	.word	0x08007879
 80077c0:	08007879 	.word	0x08007879
 80077c4:	08007851 	.word	0x08007851
 80077c8:	08007879 	.word	0x08007879
 80077cc:	08007879 	.word	0x08007879
 80077d0:	08007879 	.word	0x08007879
 80077d4:	08007879 	.word	0x08007879
 80077d8:	08007879 	.word	0x08007879
 80077dc:	08007879 	.word	0x08007879
 80077e0:	08007879 	.word	0x08007879
 80077e4:	08007859 	.word	0x08007859
 80077e8:	08007879 	.word	0x08007879
 80077ec:	08007879 	.word	0x08007879
 80077f0:	08007879 	.word	0x08007879
 80077f4:	08007879 	.word	0x08007879
 80077f8:	08007879 	.word	0x08007879
 80077fc:	08007879 	.word	0x08007879
 8007800:	08007879 	.word	0x08007879
 8007804:	08007861 	.word	0x08007861
 8007808:	08007879 	.word	0x08007879
 800780c:	08007879 	.word	0x08007879
 8007810:	08007879 	.word	0x08007879
 8007814:	08007879 	.word	0x08007879
 8007818:	08007879 	.word	0x08007879
 800781c:	08007879 	.word	0x08007879
 8007820:	08007879 	.word	0x08007879
 8007824:	08007869 	.word	0x08007869
 8007828:	08007879 	.word	0x08007879
 800782c:	08007879 	.word	0x08007879
 8007830:	08007879 	.word	0x08007879
 8007834:	08007879 	.word	0x08007879
 8007838:	08007879 	.word	0x08007879
 800783c:	08007879 	.word	0x08007879
 8007840:	08007879 	.word	0x08007879
 8007844:	08007871 	.word	0x08007871
 8007848:	2301      	movs	r3, #1
 800784a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800784e:	e0c3      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007850:	2304      	movs	r3, #4
 8007852:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007856:	e0bf      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007858:	2308      	movs	r3, #8
 800785a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800785e:	e0bb      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007860:	2310      	movs	r3, #16
 8007862:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007866:	e0b7      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007868:	2320      	movs	r3, #32
 800786a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800786e:	e0b3      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007870:	2340      	movs	r3, #64	; 0x40
 8007872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007876:	e0af      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007878:	2380      	movs	r3, #128	; 0x80
 800787a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800787e:	bf00      	nop
 8007880:	e0aa      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a86      	ldr	r2, [pc, #536]	; (8007aa0 <UART_SetConfig+0x6a0>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d132      	bne.n	80078f2 <UART_SetConfig+0x4f2>
 800788c:	4b83      	ldr	r3, [pc, #524]	; (8007a9c <UART_SetConfig+0x69c>)
 800788e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007890:	f003 0307 	and.w	r3, r3, #7
 8007894:	2b05      	cmp	r3, #5
 8007896:	d827      	bhi.n	80078e8 <UART_SetConfig+0x4e8>
 8007898:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <UART_SetConfig+0x4a0>)
 800789a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789e:	bf00      	nop
 80078a0:	080078b9 	.word	0x080078b9
 80078a4:	080078c1 	.word	0x080078c1
 80078a8:	080078c9 	.word	0x080078c9
 80078ac:	080078d1 	.word	0x080078d1
 80078b0:	080078d9 	.word	0x080078d9
 80078b4:	080078e1 	.word	0x080078e1
 80078b8:	2300      	movs	r3, #0
 80078ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078be:	e08b      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80078c0:	2304      	movs	r3, #4
 80078c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078c6:	e087      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80078c8:	2308      	movs	r3, #8
 80078ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078ce:	e083      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80078d0:	2310      	movs	r3, #16
 80078d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078d6:	e07f      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80078d8:	2320      	movs	r3, #32
 80078da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078de:	e07b      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80078e0:	2340      	movs	r3, #64	; 0x40
 80078e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078e6:	e077      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80078e8:	2380      	movs	r3, #128	; 0x80
 80078ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078ee:	bf00      	nop
 80078f0:	e072      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a6b      	ldr	r2, [pc, #428]	; (8007aa4 <UART_SetConfig+0x6a4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d132      	bne.n	8007962 <UART_SetConfig+0x562>
 80078fc:	4b67      	ldr	r3, [pc, #412]	; (8007a9c <UART_SetConfig+0x69c>)
 80078fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	2b05      	cmp	r3, #5
 8007906:	d827      	bhi.n	8007958 <UART_SetConfig+0x558>
 8007908:	a201      	add	r2, pc, #4	; (adr r2, 8007910 <UART_SetConfig+0x510>)
 800790a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790e:	bf00      	nop
 8007910:	08007929 	.word	0x08007929
 8007914:	08007931 	.word	0x08007931
 8007918:	08007939 	.word	0x08007939
 800791c:	08007941 	.word	0x08007941
 8007920:	08007949 	.word	0x08007949
 8007924:	08007951 	.word	0x08007951
 8007928:	2300      	movs	r3, #0
 800792a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800792e:	e053      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007930:	2304      	movs	r3, #4
 8007932:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007936:	e04f      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007938:	2308      	movs	r3, #8
 800793a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800793e:	e04b      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007940:	2310      	movs	r3, #16
 8007942:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007946:	e047      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007948:	2320      	movs	r3, #32
 800794a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800794e:	e043      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007950:	2340      	movs	r3, #64	; 0x40
 8007952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007956:	e03f      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007958:	2380      	movs	r3, #128	; 0x80
 800795a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800795e:	bf00      	nop
 8007960:	e03a      	b.n	80079d8 <UART_SetConfig+0x5d8>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a50      	ldr	r2, [pc, #320]	; (8007aa8 <UART_SetConfig+0x6a8>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d132      	bne.n	80079d2 <UART_SetConfig+0x5d2>
 800796c:	4b4b      	ldr	r3, [pc, #300]	; (8007a9c <UART_SetConfig+0x69c>)
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	2b05      	cmp	r3, #5
 8007976:	d827      	bhi.n	80079c8 <UART_SetConfig+0x5c8>
 8007978:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <UART_SetConfig+0x580>)
 800797a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797e:	bf00      	nop
 8007980:	08007999 	.word	0x08007999
 8007984:	080079a1 	.word	0x080079a1
 8007988:	080079a9 	.word	0x080079a9
 800798c:	080079b1 	.word	0x080079b1
 8007990:	080079b9 	.word	0x080079b9
 8007994:	080079c1 	.word	0x080079c1
 8007998:	2302      	movs	r3, #2
 800799a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800799e:	e01b      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80079a0:	2304      	movs	r3, #4
 80079a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079a6:	e017      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80079a8:	2308      	movs	r3, #8
 80079aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079ae:	e013      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80079b0:	2310      	movs	r3, #16
 80079b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079b6:	e00f      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80079b8:	2320      	movs	r3, #32
 80079ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079be:	e00b      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80079c0:	2340      	movs	r3, #64	; 0x40
 80079c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079c6:	e007      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80079c8:	2380      	movs	r3, #128	; 0x80
 80079ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079ce:	bf00      	nop
 80079d0:	e002      	b.n	80079d8 <UART_SetConfig+0x5d8>
 80079d2:	2380      	movs	r3, #128	; 0x80
 80079d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a32      	ldr	r2, [pc, #200]	; (8007aa8 <UART_SetConfig+0x6a8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	f040 86f7 	bne.w	80087d2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	f000 80c0 	beq.w	8007b6e <UART_SetConfig+0x76e>
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	dc04      	bgt.n	80079fc <UART_SetConfig+0x5fc>
 80079f2:	2b02      	cmp	r3, #2
 80079f4:	d00c      	beq.n	8007a10 <UART_SetConfig+0x610>
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d065      	beq.n	8007ac6 <UART_SetConfig+0x6c6>
 80079fa:	e27a      	b.n	8007ef2 <UART_SetConfig+0xaf2>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	f000 81b0 	beq.w	8007d62 <UART_SetConfig+0x962>
 8007a02:	2b40      	cmp	r3, #64	; 0x40
 8007a04:	f000 821e 	beq.w	8007e44 <UART_SetConfig+0xa44>
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	f000 8104 	beq.w	8007c16 <UART_SetConfig+0x816>
 8007a0e:	e270      	b.n	8007ef2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007a10:	f7fd fda8 	bl	8005564 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a14:	4602      	mov	r2, r0
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d04e      	beq.n	8007abc <UART_SetConfig+0x6bc>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d048      	beq.n	8007ab8 <UART_SetConfig+0x6b8>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d042      	beq.n	8007ab4 <UART_SetConfig+0x6b4>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d03c      	beq.n	8007ab0 <UART_SetConfig+0x6b0>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	d036      	beq.n	8007aac <UART_SetConfig+0x6ac>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	2b05      	cmp	r3, #5
 8007a44:	d026      	beq.n	8007a94 <UART_SetConfig+0x694>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4a:	2b06      	cmp	r3, #6
 8007a4c:	d020      	beq.n	8007a90 <UART_SetConfig+0x690>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a52:	2b07      	cmp	r3, #7
 8007a54:	d01a      	beq.n	8007a8c <UART_SetConfig+0x68c>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5a:	2b08      	cmp	r3, #8
 8007a5c:	d014      	beq.n	8007a88 <UART_SetConfig+0x688>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	2b09      	cmp	r3, #9
 8007a64:	d00e      	beq.n	8007a84 <UART_SetConfig+0x684>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6a:	2b0a      	cmp	r3, #10
 8007a6c:	d008      	beq.n	8007a80 <UART_SetConfig+0x680>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a72:	2b0b      	cmp	r3, #11
 8007a74:	d102      	bne.n	8007a7c <UART_SetConfig+0x67c>
 8007a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a7a:	e020      	b.n	8007abe <UART_SetConfig+0x6be>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e01e      	b.n	8007abe <UART_SetConfig+0x6be>
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	e01c      	b.n	8007abe <UART_SetConfig+0x6be>
 8007a84:	2340      	movs	r3, #64	; 0x40
 8007a86:	e01a      	b.n	8007abe <UART_SetConfig+0x6be>
 8007a88:	2320      	movs	r3, #32
 8007a8a:	e018      	b.n	8007abe <UART_SetConfig+0x6be>
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	e016      	b.n	8007abe <UART_SetConfig+0x6be>
 8007a90:	230c      	movs	r3, #12
 8007a92:	e014      	b.n	8007abe <UART_SetConfig+0x6be>
 8007a94:	230a      	movs	r3, #10
 8007a96:	e012      	b.n	8007abe <UART_SetConfig+0x6be>
 8007a98:	40011400 	.word	0x40011400
 8007a9c:	58024400 	.word	0x58024400
 8007aa0:	40007800 	.word	0x40007800
 8007aa4:	40007c00 	.word	0x40007c00
 8007aa8:	58000c00 	.word	0x58000c00
 8007aac:	2308      	movs	r3, #8
 8007aae:	e006      	b.n	8007abe <UART_SetConfig+0x6be>
 8007ab0:	2306      	movs	r3, #6
 8007ab2:	e004      	b.n	8007abe <UART_SetConfig+0x6be>
 8007ab4:	2304      	movs	r3, #4
 8007ab6:	e002      	b.n	8007abe <UART_SetConfig+0x6be>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e000      	b.n	8007abe <UART_SetConfig+0x6be>
 8007abc:	2301      	movs	r3, #1
 8007abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ac4:	e219      	b.n	8007efa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ac6:	f107 0318 	add.w	r3, r7, #24
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fd fd60 	bl	8005590 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d044      	beq.n	8007b64 <UART_SetConfig+0x764>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d03e      	beq.n	8007b60 <UART_SetConfig+0x760>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d038      	beq.n	8007b5c <UART_SetConfig+0x75c>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d032      	beq.n	8007b58 <UART_SetConfig+0x758>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d02c      	beq.n	8007b54 <UART_SetConfig+0x754>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2b05      	cmp	r3, #5
 8007b00:	d026      	beq.n	8007b50 <UART_SetConfig+0x750>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	2b06      	cmp	r3, #6
 8007b08:	d020      	beq.n	8007b4c <UART_SetConfig+0x74c>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	2b07      	cmp	r3, #7
 8007b10:	d01a      	beq.n	8007b48 <UART_SetConfig+0x748>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b16:	2b08      	cmp	r3, #8
 8007b18:	d014      	beq.n	8007b44 <UART_SetConfig+0x744>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	2b09      	cmp	r3, #9
 8007b20:	d00e      	beq.n	8007b40 <UART_SetConfig+0x740>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	2b0a      	cmp	r3, #10
 8007b28:	d008      	beq.n	8007b3c <UART_SetConfig+0x73c>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	2b0b      	cmp	r3, #11
 8007b30:	d102      	bne.n	8007b38 <UART_SetConfig+0x738>
 8007b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b36:	e016      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e014      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b3c:	2380      	movs	r3, #128	; 0x80
 8007b3e:	e012      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b40:	2340      	movs	r3, #64	; 0x40
 8007b42:	e010      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b44:	2320      	movs	r3, #32
 8007b46:	e00e      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b48:	2310      	movs	r3, #16
 8007b4a:	e00c      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b4c:	230c      	movs	r3, #12
 8007b4e:	e00a      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b50:	230a      	movs	r3, #10
 8007b52:	e008      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b54:	2308      	movs	r3, #8
 8007b56:	e006      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b58:	2306      	movs	r3, #6
 8007b5a:	e004      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	e002      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b60:	2302      	movs	r3, #2
 8007b62:	e000      	b.n	8007b66 <UART_SetConfig+0x766>
 8007b64:	2301      	movs	r3, #1
 8007b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b6c:	e1c5      	b.n	8007efa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b6e:	f107 030c 	add.w	r3, r7, #12
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fd fe58 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d044      	beq.n	8007c0c <UART_SetConfig+0x80c>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d03e      	beq.n	8007c08 <UART_SetConfig+0x808>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d038      	beq.n	8007c04 <UART_SetConfig+0x804>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d032      	beq.n	8007c00 <UART_SetConfig+0x800>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d02c      	beq.n	8007bfc <UART_SetConfig+0x7fc>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b05      	cmp	r3, #5
 8007ba8:	d026      	beq.n	8007bf8 <UART_SetConfig+0x7f8>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	2b06      	cmp	r3, #6
 8007bb0:	d020      	beq.n	8007bf4 <UART_SetConfig+0x7f4>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	2b07      	cmp	r3, #7
 8007bb8:	d01a      	beq.n	8007bf0 <UART_SetConfig+0x7f0>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	2b08      	cmp	r3, #8
 8007bc0:	d014      	beq.n	8007bec <UART_SetConfig+0x7ec>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b09      	cmp	r3, #9
 8007bc8:	d00e      	beq.n	8007be8 <UART_SetConfig+0x7e8>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	2b0a      	cmp	r3, #10
 8007bd0:	d008      	beq.n	8007be4 <UART_SetConfig+0x7e4>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	2b0b      	cmp	r3, #11
 8007bd8:	d102      	bne.n	8007be0 <UART_SetConfig+0x7e0>
 8007bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bde:	e016      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007be0:	2301      	movs	r3, #1
 8007be2:	e014      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007be4:	2380      	movs	r3, #128	; 0x80
 8007be6:	e012      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007be8:	2340      	movs	r3, #64	; 0x40
 8007bea:	e010      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007bec:	2320      	movs	r3, #32
 8007bee:	e00e      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	e00c      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007bf4:	230c      	movs	r3, #12
 8007bf6:	e00a      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007bf8:	230a      	movs	r3, #10
 8007bfa:	e008      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007bfc:	2308      	movs	r3, #8
 8007bfe:	e006      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007c00:	2306      	movs	r3, #6
 8007c02:	e004      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007c04:	2304      	movs	r3, #4
 8007c06:	e002      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e000      	b.n	8007c0e <UART_SetConfig+0x80e>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c14:	e171      	b.n	8007efa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c16:	4b7a      	ldr	r3, [pc, #488]	; (8007e00 <UART_SetConfig+0xa00>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d054      	beq.n	8007ccc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007c22:	4b77      	ldr	r3, [pc, #476]	; (8007e00 <UART_SetConfig+0xa00>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	08db      	lsrs	r3, r3, #3
 8007c28:	f003 0303 	and.w	r3, r3, #3
 8007c2c:	4a75      	ldr	r2, [pc, #468]	; (8007e04 <UART_SetConfig+0xa04>)
 8007c2e:	40da      	lsrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d044      	beq.n	8007cc2 <UART_SetConfig+0x8c2>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d03e      	beq.n	8007cbe <UART_SetConfig+0x8be>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d038      	beq.n	8007cba <UART_SetConfig+0x8ba>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d032      	beq.n	8007cb6 <UART_SetConfig+0x8b6>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d02c      	beq.n	8007cb2 <UART_SetConfig+0x8b2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	2b05      	cmp	r3, #5
 8007c5e:	d026      	beq.n	8007cae <UART_SetConfig+0x8ae>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	2b06      	cmp	r3, #6
 8007c66:	d020      	beq.n	8007caa <UART_SetConfig+0x8aa>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	2b07      	cmp	r3, #7
 8007c6e:	d01a      	beq.n	8007ca6 <UART_SetConfig+0x8a6>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b08      	cmp	r3, #8
 8007c76:	d014      	beq.n	8007ca2 <UART_SetConfig+0x8a2>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	2b09      	cmp	r3, #9
 8007c7e:	d00e      	beq.n	8007c9e <UART_SetConfig+0x89e>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2b0a      	cmp	r3, #10
 8007c86:	d008      	beq.n	8007c9a <UART_SetConfig+0x89a>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	2b0b      	cmp	r3, #11
 8007c8e:	d102      	bne.n	8007c96 <UART_SetConfig+0x896>
 8007c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c94:	e016      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e014      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007c9a:	2380      	movs	r3, #128	; 0x80
 8007c9c:	e012      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007c9e:	2340      	movs	r3, #64	; 0x40
 8007ca0:	e010      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007ca2:	2320      	movs	r3, #32
 8007ca4:	e00e      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007ca6:	2310      	movs	r3, #16
 8007ca8:	e00c      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007caa:	230c      	movs	r3, #12
 8007cac:	e00a      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007cae:	230a      	movs	r3, #10
 8007cb0:	e008      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007cb2:	2308      	movs	r3, #8
 8007cb4:	e006      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007cb6:	2306      	movs	r3, #6
 8007cb8:	e004      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007cba:	2304      	movs	r3, #4
 8007cbc:	e002      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	e000      	b.n	8007cc4 <UART_SetConfig+0x8c4>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8007cca:	e116      	b.n	8007efa <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d043      	beq.n	8007d5c <UART_SetConfig+0x95c>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d03d      	beq.n	8007d58 <UART_SetConfig+0x958>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d037      	beq.n	8007d54 <UART_SetConfig+0x954>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d031      	beq.n	8007d50 <UART_SetConfig+0x950>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d02b      	beq.n	8007d4c <UART_SetConfig+0x94c>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	2b05      	cmp	r3, #5
 8007cfa:	d025      	beq.n	8007d48 <UART_SetConfig+0x948>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	2b06      	cmp	r3, #6
 8007d02:	d01f      	beq.n	8007d44 <UART_SetConfig+0x944>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	2b07      	cmp	r3, #7
 8007d0a:	d019      	beq.n	8007d40 <UART_SetConfig+0x940>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d013      	beq.n	8007d3c <UART_SetConfig+0x93c>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2b09      	cmp	r3, #9
 8007d1a:	d00d      	beq.n	8007d38 <UART_SetConfig+0x938>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	2b0a      	cmp	r3, #10
 8007d22:	d007      	beq.n	8007d34 <UART_SetConfig+0x934>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	2b0b      	cmp	r3, #11
 8007d2a:	d101      	bne.n	8007d30 <UART_SetConfig+0x930>
 8007d2c:	4b36      	ldr	r3, [pc, #216]	; (8007e08 <UART_SetConfig+0xa08>)
 8007d2e:	e016      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d30:	4b34      	ldr	r3, [pc, #208]	; (8007e04 <UART_SetConfig+0xa04>)
 8007d32:	e014      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d34:	4b35      	ldr	r3, [pc, #212]	; (8007e0c <UART_SetConfig+0xa0c>)
 8007d36:	e012      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d38:	4b35      	ldr	r3, [pc, #212]	; (8007e10 <UART_SetConfig+0xa10>)
 8007d3a:	e010      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d3c:	4b35      	ldr	r3, [pc, #212]	; (8007e14 <UART_SetConfig+0xa14>)
 8007d3e:	e00e      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d40:	4b35      	ldr	r3, [pc, #212]	; (8007e18 <UART_SetConfig+0xa18>)
 8007d42:	e00c      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d44:	4b35      	ldr	r3, [pc, #212]	; (8007e1c <UART_SetConfig+0xa1c>)
 8007d46:	e00a      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d48:	4b35      	ldr	r3, [pc, #212]	; (8007e20 <UART_SetConfig+0xa20>)
 8007d4a:	e008      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d4c:	4b35      	ldr	r3, [pc, #212]	; (8007e24 <UART_SetConfig+0xa24>)
 8007d4e:	e006      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d50:	4b35      	ldr	r3, [pc, #212]	; (8007e28 <UART_SetConfig+0xa28>)
 8007d52:	e004      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d54:	4b35      	ldr	r3, [pc, #212]	; (8007e2c <UART_SetConfig+0xa2c>)
 8007d56:	e002      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d58:	4b35      	ldr	r3, [pc, #212]	; (8007e30 <UART_SetConfig+0xa30>)
 8007d5a:	e000      	b.n	8007d5e <UART_SetConfig+0x95e>
 8007d5c:	4b29      	ldr	r3, [pc, #164]	; (8007e04 <UART_SetConfig+0xa04>)
 8007d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d60:	e0cb      	b.n	8007efa <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d046      	beq.n	8007df8 <UART_SetConfig+0x9f8>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d040      	beq.n	8007df4 <UART_SetConfig+0x9f4>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d03a      	beq.n	8007df0 <UART_SetConfig+0x9f0>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d034      	beq.n	8007dec <UART_SetConfig+0x9ec>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d02e      	beq.n	8007de8 <UART_SetConfig+0x9e8>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	2b05      	cmp	r3, #5
 8007d90:	d028      	beq.n	8007de4 <UART_SetConfig+0x9e4>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	2b06      	cmp	r3, #6
 8007d98:	d022      	beq.n	8007de0 <UART_SetConfig+0x9e0>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	2b07      	cmp	r3, #7
 8007da0:	d01c      	beq.n	8007ddc <UART_SetConfig+0x9dc>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b08      	cmp	r3, #8
 8007da8:	d016      	beq.n	8007dd8 <UART_SetConfig+0x9d8>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b09      	cmp	r3, #9
 8007db0:	d00f      	beq.n	8007dd2 <UART_SetConfig+0x9d2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	2b0a      	cmp	r3, #10
 8007db8:	d008      	beq.n	8007dcc <UART_SetConfig+0x9cc>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	2b0b      	cmp	r3, #11
 8007dc0:	d102      	bne.n	8007dc8 <UART_SetConfig+0x9c8>
 8007dc2:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007dc6:	e018      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007dc8:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <UART_SetConfig+0xa18>)
 8007dca:	e016      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007dcc:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007dd0:	e013      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007dd2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007dd6:	e010      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007dd8:	4b16      	ldr	r3, [pc, #88]	; (8007e34 <UART_SetConfig+0xa34>)
 8007dda:	e00e      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007ddc:	4b0a      	ldr	r3, [pc, #40]	; (8007e08 <UART_SetConfig+0xa08>)
 8007dde:	e00c      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007de0:	4b15      	ldr	r3, [pc, #84]	; (8007e38 <UART_SetConfig+0xa38>)
 8007de2:	e00a      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007de4:	4b15      	ldr	r3, [pc, #84]	; (8007e3c <UART_SetConfig+0xa3c>)
 8007de6:	e008      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007de8:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <UART_SetConfig+0xa0c>)
 8007dea:	e006      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007dec:	4b14      	ldr	r3, [pc, #80]	; (8007e40 <UART_SetConfig+0xa40>)
 8007dee:	e004      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <UART_SetConfig+0xa10>)
 8007df2:	e002      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007df4:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <UART_SetConfig+0xa14>)
 8007df6:	e000      	b.n	8007dfa <UART_SetConfig+0x9fa>
 8007df8:	4b07      	ldr	r3, [pc, #28]	; (8007e18 <UART_SetConfig+0xa18>)
 8007dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007dfc:	e07d      	b.n	8007efa <UART_SetConfig+0xafa>
 8007dfe:	bf00      	nop
 8007e00:	58024400 	.word	0x58024400
 8007e04:	03d09000 	.word	0x03d09000
 8007e08:	0003d090 	.word	0x0003d090
 8007e0c:	0007a120 	.word	0x0007a120
 8007e10:	000f4240 	.word	0x000f4240
 8007e14:	001e8480 	.word	0x001e8480
 8007e18:	003d0900 	.word	0x003d0900
 8007e1c:	00516155 	.word	0x00516155
 8007e20:	0061a800 	.word	0x0061a800
 8007e24:	007a1200 	.word	0x007a1200
 8007e28:	00a2c2aa 	.word	0x00a2c2aa
 8007e2c:	00f42400 	.word	0x00f42400
 8007e30:	01e84800 	.word	0x01e84800
 8007e34:	0001e848 	.word	0x0001e848
 8007e38:	00051615 	.word	0x00051615
 8007e3c:	00061a80 	.word	0x00061a80
 8007e40:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d04e      	beq.n	8007eea <UART_SetConfig+0xaea>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d047      	beq.n	8007ee4 <UART_SetConfig+0xae4>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d040      	beq.n	8007ede <UART_SetConfig+0xade>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d039      	beq.n	8007ed8 <UART_SetConfig+0xad8>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d032      	beq.n	8007ed2 <UART_SetConfig+0xad2>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	2b05      	cmp	r3, #5
 8007e72:	d02b      	beq.n	8007ecc <UART_SetConfig+0xacc>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	2b06      	cmp	r3, #6
 8007e7a:	d024      	beq.n	8007ec6 <UART_SetConfig+0xac6>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	2b07      	cmp	r3, #7
 8007e82:	d01d      	beq.n	8007ec0 <UART_SetConfig+0xac0>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d016      	beq.n	8007eba <UART_SetConfig+0xaba>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	2b09      	cmp	r3, #9
 8007e92:	d00f      	beq.n	8007eb4 <UART_SetConfig+0xab4>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2b0a      	cmp	r3, #10
 8007e9a:	d008      	beq.n	8007eae <UART_SetConfig+0xaae>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	2b0b      	cmp	r3, #11
 8007ea2:	d101      	bne.n	8007ea8 <UART_SetConfig+0xaa8>
 8007ea4:	2380      	movs	r3, #128	; 0x80
 8007ea6:	e022      	b.n	8007eee <UART_SetConfig+0xaee>
 8007ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eac:	e01f      	b.n	8007eee <UART_SetConfig+0xaee>
 8007eae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eb2:	e01c      	b.n	8007eee <UART_SetConfig+0xaee>
 8007eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eb8:	e019      	b.n	8007eee <UART_SetConfig+0xaee>
 8007eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ebe:	e016      	b.n	8007eee <UART_SetConfig+0xaee>
 8007ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ec4:	e013      	b.n	8007eee <UART_SetConfig+0xaee>
 8007ec6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007eca:	e010      	b.n	8007eee <UART_SetConfig+0xaee>
 8007ecc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007ed0:	e00d      	b.n	8007eee <UART_SetConfig+0xaee>
 8007ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ed6:	e00a      	b.n	8007eee <UART_SetConfig+0xaee>
 8007ed8:	f241 5355 	movw	r3, #5461	; 0x1555
 8007edc:	e007      	b.n	8007eee <UART_SetConfig+0xaee>
 8007ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ee2:	e004      	b.n	8007eee <UART_SetConfig+0xaee>
 8007ee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ee8:	e001      	b.n	8007eee <UART_SetConfig+0xaee>
 8007eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ef0:	e003      	b.n	8007efa <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007ef8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f001 83e8 	beq.w	80096d2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	4613      	mov	r3, r2
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	4413      	add	r3, r2
 8007f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d305      	bcc.n	8007f1e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d904      	bls.n	8007f28 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f24:	f001 bbd5 	b.w	80096d2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007f28:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007f2c:	2b08      	cmp	r3, #8
 8007f2e:	f000 8154 	beq.w	80081da <UART_SetConfig+0xdda>
 8007f32:	2b08      	cmp	r3, #8
 8007f34:	dc06      	bgt.n	8007f44 <UART_SetConfig+0xb44>
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d00f      	beq.n	8007f5a <UART_SetConfig+0xb5a>
 8007f3a:	2b04      	cmp	r3, #4
 8007f3c:	f000 80ac 	beq.w	8008098 <UART_SetConfig+0xc98>
 8007f40:	f000 bc30 	b.w	80087a4 <UART_SetConfig+0x13a4>
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	f000 832d 	beq.w	80085a4 <UART_SetConfig+0x11a4>
 8007f4a:	2b40      	cmp	r3, #64	; 0x40
 8007f4c:	f000 83a5 	beq.w	800869a <UART_SetConfig+0x129a>
 8007f50:	2b10      	cmp	r3, #16
 8007f52:	f000 81e3 	beq.w	800831c <UART_SetConfig+0xf1c>
 8007f56:	f000 bc25 	b.w	80087a4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f5a:	f7fd fb03 	bl	8005564 <HAL_RCCEx_GetD3PCLK1Freq>
 8007f5e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	4618      	mov	r0, r3
 8007f64:	f04f 0100 	mov.w	r1, #0
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d067      	beq.n	8008040 <UART_SetConfig+0xc40>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d05e      	beq.n	8008036 <UART_SetConfig+0xc36>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d055      	beq.n	800802c <UART_SetConfig+0xc2c>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d04c      	beq.n	8008022 <UART_SetConfig+0xc22>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d043      	beq.n	8008018 <UART_SetConfig+0xc18>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	2b05      	cmp	r3, #5
 8007f96:	d03a      	beq.n	800800e <UART_SetConfig+0xc0e>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	2b06      	cmp	r3, #6
 8007f9e:	d031      	beq.n	8008004 <UART_SetConfig+0xc04>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	2b07      	cmp	r3, #7
 8007fa6:	d028      	beq.n	8007ffa <UART_SetConfig+0xbfa>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d01f      	beq.n	8007ff0 <UART_SetConfig+0xbf0>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	2b09      	cmp	r3, #9
 8007fb6:	d016      	beq.n	8007fe6 <UART_SetConfig+0xbe6>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	2b0a      	cmp	r3, #10
 8007fbe:	d00d      	beq.n	8007fdc <UART_SetConfig+0xbdc>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	2b0b      	cmp	r3, #11
 8007fc6:	d104      	bne.n	8007fd2 <UART_SetConfig+0xbd2>
 8007fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fcc:	f04f 0400 	mov.w	r4, #0
 8007fd0:	e03a      	b.n	8008048 <UART_SetConfig+0xc48>
 8007fd2:	f04f 0301 	mov.w	r3, #1
 8007fd6:	f04f 0400 	mov.w	r4, #0
 8007fda:	e035      	b.n	8008048 <UART_SetConfig+0xc48>
 8007fdc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007fe0:	f04f 0400 	mov.w	r4, #0
 8007fe4:	e030      	b.n	8008048 <UART_SetConfig+0xc48>
 8007fe6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007fea:	f04f 0400 	mov.w	r4, #0
 8007fee:	e02b      	b.n	8008048 <UART_SetConfig+0xc48>
 8007ff0:	f04f 0320 	mov.w	r3, #32
 8007ff4:	f04f 0400 	mov.w	r4, #0
 8007ff8:	e026      	b.n	8008048 <UART_SetConfig+0xc48>
 8007ffa:	f04f 0310 	mov.w	r3, #16
 8007ffe:	f04f 0400 	mov.w	r4, #0
 8008002:	e021      	b.n	8008048 <UART_SetConfig+0xc48>
 8008004:	f04f 030c 	mov.w	r3, #12
 8008008:	f04f 0400 	mov.w	r4, #0
 800800c:	e01c      	b.n	8008048 <UART_SetConfig+0xc48>
 800800e:	f04f 030a 	mov.w	r3, #10
 8008012:	f04f 0400 	mov.w	r4, #0
 8008016:	e017      	b.n	8008048 <UART_SetConfig+0xc48>
 8008018:	f04f 0308 	mov.w	r3, #8
 800801c:	f04f 0400 	mov.w	r4, #0
 8008020:	e012      	b.n	8008048 <UART_SetConfig+0xc48>
 8008022:	f04f 0306 	mov.w	r3, #6
 8008026:	f04f 0400 	mov.w	r4, #0
 800802a:	e00d      	b.n	8008048 <UART_SetConfig+0xc48>
 800802c:	f04f 0304 	mov.w	r3, #4
 8008030:	f04f 0400 	mov.w	r4, #0
 8008034:	e008      	b.n	8008048 <UART_SetConfig+0xc48>
 8008036:	f04f 0302 	mov.w	r3, #2
 800803a:	f04f 0400 	mov.w	r4, #0
 800803e:	e003      	b.n	8008048 <UART_SetConfig+0xc48>
 8008040:	f04f 0301 	mov.w	r3, #1
 8008044:	f04f 0400 	mov.w	r4, #0
 8008048:	461a      	mov	r2, r3
 800804a:	4623      	mov	r3, r4
 800804c:	f7f8 f944 	bl	80002d8 <__aeabi_uldivmod>
 8008050:	4603      	mov	r3, r0
 8008052:	460c      	mov	r4, r1
 8008054:	4619      	mov	r1, r3
 8008056:	4622      	mov	r2, r4
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	f04f 0400 	mov.w	r4, #0
 8008060:	0214      	lsls	r4, r2, #8
 8008062:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008066:	020b      	lsls	r3, r1, #8
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6852      	ldr	r2, [r2, #4]
 800806c:	0852      	lsrs	r2, r2, #1
 800806e:	4611      	mov	r1, r2
 8008070:	f04f 0200 	mov.w	r2, #0
 8008074:	eb13 0b01 	adds.w	fp, r3, r1
 8008078:	eb44 0c02 	adc.w	ip, r4, r2
 800807c:	4658      	mov	r0, fp
 800807e:	4661      	mov	r1, ip
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f04f 0400 	mov.w	r4, #0
 8008088:	461a      	mov	r2, r3
 800808a:	4623      	mov	r3, r4
 800808c:	f7f8 f924 	bl	80002d8 <__aeabi_uldivmod>
 8008090:	4603      	mov	r3, r0
 8008092:	460c      	mov	r4, r1
 8008094:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008096:	e389      	b.n	80087ac <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008098:	f107 0318 	add.w	r3, r7, #24
 800809c:	4618      	mov	r0, r3
 800809e:	f7fd fa77 	bl	8005590 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f04f 0100 	mov.w	r1, #0
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d067      	beq.n	8008182 <UART_SetConfig+0xd82>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d05e      	beq.n	8008178 <UART_SetConfig+0xd78>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d055      	beq.n	800816e <UART_SetConfig+0xd6e>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d04c      	beq.n	8008164 <UART_SetConfig+0xd64>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d043      	beq.n	800815a <UART_SetConfig+0xd5a>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	2b05      	cmp	r3, #5
 80080d8:	d03a      	beq.n	8008150 <UART_SetConfig+0xd50>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	2b06      	cmp	r3, #6
 80080e0:	d031      	beq.n	8008146 <UART_SetConfig+0xd46>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	2b07      	cmp	r3, #7
 80080e8:	d028      	beq.n	800813c <UART_SetConfig+0xd3c>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	2b08      	cmp	r3, #8
 80080f0:	d01f      	beq.n	8008132 <UART_SetConfig+0xd32>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	2b09      	cmp	r3, #9
 80080f8:	d016      	beq.n	8008128 <UART_SetConfig+0xd28>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	2b0a      	cmp	r3, #10
 8008100:	d00d      	beq.n	800811e <UART_SetConfig+0xd1e>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b0b      	cmp	r3, #11
 8008108:	d104      	bne.n	8008114 <UART_SetConfig+0xd14>
 800810a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800810e:	f04f 0400 	mov.w	r4, #0
 8008112:	e03a      	b.n	800818a <UART_SetConfig+0xd8a>
 8008114:	f04f 0301 	mov.w	r3, #1
 8008118:	f04f 0400 	mov.w	r4, #0
 800811c:	e035      	b.n	800818a <UART_SetConfig+0xd8a>
 800811e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008122:	f04f 0400 	mov.w	r4, #0
 8008126:	e030      	b.n	800818a <UART_SetConfig+0xd8a>
 8008128:	f04f 0340 	mov.w	r3, #64	; 0x40
 800812c:	f04f 0400 	mov.w	r4, #0
 8008130:	e02b      	b.n	800818a <UART_SetConfig+0xd8a>
 8008132:	f04f 0320 	mov.w	r3, #32
 8008136:	f04f 0400 	mov.w	r4, #0
 800813a:	e026      	b.n	800818a <UART_SetConfig+0xd8a>
 800813c:	f04f 0310 	mov.w	r3, #16
 8008140:	f04f 0400 	mov.w	r4, #0
 8008144:	e021      	b.n	800818a <UART_SetConfig+0xd8a>
 8008146:	f04f 030c 	mov.w	r3, #12
 800814a:	f04f 0400 	mov.w	r4, #0
 800814e:	e01c      	b.n	800818a <UART_SetConfig+0xd8a>
 8008150:	f04f 030a 	mov.w	r3, #10
 8008154:	f04f 0400 	mov.w	r4, #0
 8008158:	e017      	b.n	800818a <UART_SetConfig+0xd8a>
 800815a:	f04f 0308 	mov.w	r3, #8
 800815e:	f04f 0400 	mov.w	r4, #0
 8008162:	e012      	b.n	800818a <UART_SetConfig+0xd8a>
 8008164:	f04f 0306 	mov.w	r3, #6
 8008168:	f04f 0400 	mov.w	r4, #0
 800816c:	e00d      	b.n	800818a <UART_SetConfig+0xd8a>
 800816e:	f04f 0304 	mov.w	r3, #4
 8008172:	f04f 0400 	mov.w	r4, #0
 8008176:	e008      	b.n	800818a <UART_SetConfig+0xd8a>
 8008178:	f04f 0302 	mov.w	r3, #2
 800817c:	f04f 0400 	mov.w	r4, #0
 8008180:	e003      	b.n	800818a <UART_SetConfig+0xd8a>
 8008182:	f04f 0301 	mov.w	r3, #1
 8008186:	f04f 0400 	mov.w	r4, #0
 800818a:	461a      	mov	r2, r3
 800818c:	4623      	mov	r3, r4
 800818e:	f7f8 f8a3 	bl	80002d8 <__aeabi_uldivmod>
 8008192:	4603      	mov	r3, r0
 8008194:	460c      	mov	r4, r1
 8008196:	4619      	mov	r1, r3
 8008198:	4622      	mov	r2, r4
 800819a:	f04f 0300 	mov.w	r3, #0
 800819e:	f04f 0400 	mov.w	r4, #0
 80081a2:	0214      	lsls	r4, r2, #8
 80081a4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80081a8:	020b      	lsls	r3, r1, #8
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6852      	ldr	r2, [r2, #4]
 80081ae:	0852      	lsrs	r2, r2, #1
 80081b0:	4611      	mov	r1, r2
 80081b2:	f04f 0200 	mov.w	r2, #0
 80081b6:	eb13 0b01 	adds.w	fp, r3, r1
 80081ba:	eb44 0c02 	adc.w	ip, r4, r2
 80081be:	4658      	mov	r0, fp
 80081c0:	4661      	mov	r1, ip
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f04f 0400 	mov.w	r4, #0
 80081ca:	461a      	mov	r2, r3
 80081cc:	4623      	mov	r3, r4
 80081ce:	f7f8 f883 	bl	80002d8 <__aeabi_uldivmod>
 80081d2:	4603      	mov	r3, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081d8:	e2e8      	b.n	80087ac <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081da:	f107 030c 	add.w	r3, r7, #12
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fd fb22 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f04f 0100 	mov.w	r1, #0
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d067      	beq.n	80082c4 <UART_SetConfig+0xec4>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d05e      	beq.n	80082ba <UART_SetConfig+0xeba>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	2b02      	cmp	r3, #2
 8008202:	d055      	beq.n	80082b0 <UART_SetConfig+0xeb0>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008208:	2b03      	cmp	r3, #3
 800820a:	d04c      	beq.n	80082a6 <UART_SetConfig+0xea6>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	2b04      	cmp	r3, #4
 8008212:	d043      	beq.n	800829c <UART_SetConfig+0xe9c>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	2b05      	cmp	r3, #5
 800821a:	d03a      	beq.n	8008292 <UART_SetConfig+0xe92>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	2b06      	cmp	r3, #6
 8008222:	d031      	beq.n	8008288 <UART_SetConfig+0xe88>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	2b07      	cmp	r3, #7
 800822a:	d028      	beq.n	800827e <UART_SetConfig+0xe7e>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	2b08      	cmp	r3, #8
 8008232:	d01f      	beq.n	8008274 <UART_SetConfig+0xe74>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	2b09      	cmp	r3, #9
 800823a:	d016      	beq.n	800826a <UART_SetConfig+0xe6a>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	2b0a      	cmp	r3, #10
 8008242:	d00d      	beq.n	8008260 <UART_SetConfig+0xe60>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	2b0b      	cmp	r3, #11
 800824a:	d104      	bne.n	8008256 <UART_SetConfig+0xe56>
 800824c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008250:	f04f 0400 	mov.w	r4, #0
 8008254:	e03a      	b.n	80082cc <UART_SetConfig+0xecc>
 8008256:	f04f 0301 	mov.w	r3, #1
 800825a:	f04f 0400 	mov.w	r4, #0
 800825e:	e035      	b.n	80082cc <UART_SetConfig+0xecc>
 8008260:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008264:	f04f 0400 	mov.w	r4, #0
 8008268:	e030      	b.n	80082cc <UART_SetConfig+0xecc>
 800826a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800826e:	f04f 0400 	mov.w	r4, #0
 8008272:	e02b      	b.n	80082cc <UART_SetConfig+0xecc>
 8008274:	f04f 0320 	mov.w	r3, #32
 8008278:	f04f 0400 	mov.w	r4, #0
 800827c:	e026      	b.n	80082cc <UART_SetConfig+0xecc>
 800827e:	f04f 0310 	mov.w	r3, #16
 8008282:	f04f 0400 	mov.w	r4, #0
 8008286:	e021      	b.n	80082cc <UART_SetConfig+0xecc>
 8008288:	f04f 030c 	mov.w	r3, #12
 800828c:	f04f 0400 	mov.w	r4, #0
 8008290:	e01c      	b.n	80082cc <UART_SetConfig+0xecc>
 8008292:	f04f 030a 	mov.w	r3, #10
 8008296:	f04f 0400 	mov.w	r4, #0
 800829a:	e017      	b.n	80082cc <UART_SetConfig+0xecc>
 800829c:	f04f 0308 	mov.w	r3, #8
 80082a0:	f04f 0400 	mov.w	r4, #0
 80082a4:	e012      	b.n	80082cc <UART_SetConfig+0xecc>
 80082a6:	f04f 0306 	mov.w	r3, #6
 80082aa:	f04f 0400 	mov.w	r4, #0
 80082ae:	e00d      	b.n	80082cc <UART_SetConfig+0xecc>
 80082b0:	f04f 0304 	mov.w	r3, #4
 80082b4:	f04f 0400 	mov.w	r4, #0
 80082b8:	e008      	b.n	80082cc <UART_SetConfig+0xecc>
 80082ba:	f04f 0302 	mov.w	r3, #2
 80082be:	f04f 0400 	mov.w	r4, #0
 80082c2:	e003      	b.n	80082cc <UART_SetConfig+0xecc>
 80082c4:	f04f 0301 	mov.w	r3, #1
 80082c8:	f04f 0400 	mov.w	r4, #0
 80082cc:	461a      	mov	r2, r3
 80082ce:	4623      	mov	r3, r4
 80082d0:	f7f8 f802 	bl	80002d8 <__aeabi_uldivmod>
 80082d4:	4603      	mov	r3, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	4619      	mov	r1, r3
 80082da:	4622      	mov	r2, r4
 80082dc:	f04f 0300 	mov.w	r3, #0
 80082e0:	f04f 0400 	mov.w	r4, #0
 80082e4:	0214      	lsls	r4, r2, #8
 80082e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80082ea:	020b      	lsls	r3, r1, #8
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	6852      	ldr	r2, [r2, #4]
 80082f0:	0852      	lsrs	r2, r2, #1
 80082f2:	4611      	mov	r1, r2
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	eb13 0b01 	adds.w	fp, r3, r1
 80082fc:	eb44 0c02 	adc.w	ip, r4, r2
 8008300:	4658      	mov	r0, fp
 8008302:	4661      	mov	r1, ip
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	f04f 0400 	mov.w	r4, #0
 800830c:	461a      	mov	r2, r3
 800830e:	4623      	mov	r3, r4
 8008310:	f7f7 ffe2 	bl	80002d8 <__aeabi_uldivmod>
 8008314:	4603      	mov	r3, r0
 8008316:	460c      	mov	r4, r1
 8008318:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800831a:	e247      	b.n	80087ac <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800831c:	4b96      	ldr	r3, [pc, #600]	; (8008578 <UART_SetConfig+0x1178>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0320 	and.w	r3, r3, #32
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80a3 	beq.w	8008470 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800832a:	4b93      	ldr	r3, [pc, #588]	; (8008578 <UART_SetConfig+0x1178>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	08db      	lsrs	r3, r3, #3
 8008330:	f003 0303 	and.w	r3, r3, #3
 8008334:	4a91      	ldr	r2, [pc, #580]	; (800857c <UART_SetConfig+0x117c>)
 8008336:	fa22 f303 	lsr.w	r3, r2, r3
 800833a:	4618      	mov	r0, r3
 800833c:	f04f 0100 	mov.w	r1, #0
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	2b00      	cmp	r3, #0
 8008346:	d067      	beq.n	8008418 <UART_SetConfig+0x1018>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	2b01      	cmp	r3, #1
 800834e:	d05e      	beq.n	800840e <UART_SetConfig+0x100e>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	2b02      	cmp	r3, #2
 8008356:	d055      	beq.n	8008404 <UART_SetConfig+0x1004>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	2b03      	cmp	r3, #3
 800835e:	d04c      	beq.n	80083fa <UART_SetConfig+0xffa>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	2b04      	cmp	r3, #4
 8008366:	d043      	beq.n	80083f0 <UART_SetConfig+0xff0>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	2b05      	cmp	r3, #5
 800836e:	d03a      	beq.n	80083e6 <UART_SetConfig+0xfe6>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	2b06      	cmp	r3, #6
 8008376:	d031      	beq.n	80083dc <UART_SetConfig+0xfdc>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837c:	2b07      	cmp	r3, #7
 800837e:	d028      	beq.n	80083d2 <UART_SetConfig+0xfd2>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	2b08      	cmp	r3, #8
 8008386:	d01f      	beq.n	80083c8 <UART_SetConfig+0xfc8>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	2b09      	cmp	r3, #9
 800838e:	d016      	beq.n	80083be <UART_SetConfig+0xfbe>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b0a      	cmp	r3, #10
 8008396:	d00d      	beq.n	80083b4 <UART_SetConfig+0xfb4>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	2b0b      	cmp	r3, #11
 800839e:	d104      	bne.n	80083aa <UART_SetConfig+0xfaa>
 80083a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083a4:	f04f 0400 	mov.w	r4, #0
 80083a8:	e03a      	b.n	8008420 <UART_SetConfig+0x1020>
 80083aa:	f04f 0301 	mov.w	r3, #1
 80083ae:	f04f 0400 	mov.w	r4, #0
 80083b2:	e035      	b.n	8008420 <UART_SetConfig+0x1020>
 80083b4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80083b8:	f04f 0400 	mov.w	r4, #0
 80083bc:	e030      	b.n	8008420 <UART_SetConfig+0x1020>
 80083be:	f04f 0340 	mov.w	r3, #64	; 0x40
 80083c2:	f04f 0400 	mov.w	r4, #0
 80083c6:	e02b      	b.n	8008420 <UART_SetConfig+0x1020>
 80083c8:	f04f 0320 	mov.w	r3, #32
 80083cc:	f04f 0400 	mov.w	r4, #0
 80083d0:	e026      	b.n	8008420 <UART_SetConfig+0x1020>
 80083d2:	f04f 0310 	mov.w	r3, #16
 80083d6:	f04f 0400 	mov.w	r4, #0
 80083da:	e021      	b.n	8008420 <UART_SetConfig+0x1020>
 80083dc:	f04f 030c 	mov.w	r3, #12
 80083e0:	f04f 0400 	mov.w	r4, #0
 80083e4:	e01c      	b.n	8008420 <UART_SetConfig+0x1020>
 80083e6:	f04f 030a 	mov.w	r3, #10
 80083ea:	f04f 0400 	mov.w	r4, #0
 80083ee:	e017      	b.n	8008420 <UART_SetConfig+0x1020>
 80083f0:	f04f 0308 	mov.w	r3, #8
 80083f4:	f04f 0400 	mov.w	r4, #0
 80083f8:	e012      	b.n	8008420 <UART_SetConfig+0x1020>
 80083fa:	f04f 0306 	mov.w	r3, #6
 80083fe:	f04f 0400 	mov.w	r4, #0
 8008402:	e00d      	b.n	8008420 <UART_SetConfig+0x1020>
 8008404:	f04f 0304 	mov.w	r3, #4
 8008408:	f04f 0400 	mov.w	r4, #0
 800840c:	e008      	b.n	8008420 <UART_SetConfig+0x1020>
 800840e:	f04f 0302 	mov.w	r3, #2
 8008412:	f04f 0400 	mov.w	r4, #0
 8008416:	e003      	b.n	8008420 <UART_SetConfig+0x1020>
 8008418:	f04f 0301 	mov.w	r3, #1
 800841c:	f04f 0400 	mov.w	r4, #0
 8008420:	461a      	mov	r2, r3
 8008422:	4623      	mov	r3, r4
 8008424:	f7f7 ff58 	bl	80002d8 <__aeabi_uldivmod>
 8008428:	4603      	mov	r3, r0
 800842a:	460c      	mov	r4, r1
 800842c:	4619      	mov	r1, r3
 800842e:	4622      	mov	r2, r4
 8008430:	f04f 0300 	mov.w	r3, #0
 8008434:	f04f 0400 	mov.w	r4, #0
 8008438:	0214      	lsls	r4, r2, #8
 800843a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800843e:	020b      	lsls	r3, r1, #8
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6852      	ldr	r2, [r2, #4]
 8008444:	0852      	lsrs	r2, r2, #1
 8008446:	4611      	mov	r1, r2
 8008448:	f04f 0200 	mov.w	r2, #0
 800844c:	eb13 0b01 	adds.w	fp, r3, r1
 8008450:	eb44 0c02 	adc.w	ip, r4, r2
 8008454:	4658      	mov	r0, fp
 8008456:	4661      	mov	r1, ip
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f04f 0400 	mov.w	r4, #0
 8008460:	461a      	mov	r2, r3
 8008462:	4623      	mov	r3, r4
 8008464:	f7f7 ff38 	bl	80002d8 <__aeabi_uldivmod>
 8008468:	4603      	mov	r3, r0
 800846a:	460c      	mov	r4, r1
 800846c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800846e:	e19d      	b.n	80087ac <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	2b00      	cmp	r3, #0
 8008476:	d05b      	beq.n	8008530 <UART_SetConfig+0x1130>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	2b01      	cmp	r3, #1
 800847e:	d053      	beq.n	8008528 <UART_SetConfig+0x1128>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	2b02      	cmp	r3, #2
 8008486:	d04b      	beq.n	8008520 <UART_SetConfig+0x1120>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	2b03      	cmp	r3, #3
 800848e:	d043      	beq.n	8008518 <UART_SetConfig+0x1118>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	2b04      	cmp	r3, #4
 8008496:	d03b      	beq.n	8008510 <UART_SetConfig+0x1110>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	2b05      	cmp	r3, #5
 800849e:	d033      	beq.n	8008508 <UART_SetConfig+0x1108>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	d02b      	beq.n	8008500 <UART_SetConfig+0x1100>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	2b07      	cmp	r3, #7
 80084ae:	d023      	beq.n	80084f8 <UART_SetConfig+0x10f8>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d01b      	beq.n	80084f0 <UART_SetConfig+0x10f0>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b09      	cmp	r3, #9
 80084be:	d013      	beq.n	80084e8 <UART_SetConfig+0x10e8>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	2b0a      	cmp	r3, #10
 80084c6:	d00b      	beq.n	80084e0 <UART_SetConfig+0x10e0>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	2b0b      	cmp	r3, #11
 80084ce:	d103      	bne.n	80084d8 <UART_SetConfig+0x10d8>
 80084d0:	4b2a      	ldr	r3, [pc, #168]	; (800857c <UART_SetConfig+0x117c>)
 80084d2:	f04f 0400 	mov.w	r4, #0
 80084d6:	e02e      	b.n	8008536 <UART_SetConfig+0x1136>
 80084d8:	4b29      	ldr	r3, [pc, #164]	; (8008580 <UART_SetConfig+0x1180>)
 80084da:	f04f 0403 	mov.w	r4, #3
 80084de:	e02a      	b.n	8008536 <UART_SetConfig+0x1136>
 80084e0:	4b28      	ldr	r3, [pc, #160]	; (8008584 <UART_SetConfig+0x1184>)
 80084e2:	f04f 0400 	mov.w	r4, #0
 80084e6:	e026      	b.n	8008536 <UART_SetConfig+0x1136>
 80084e8:	4b27      	ldr	r3, [pc, #156]	; (8008588 <UART_SetConfig+0x1188>)
 80084ea:	f04f 0400 	mov.w	r4, #0
 80084ee:	e022      	b.n	8008536 <UART_SetConfig+0x1136>
 80084f0:	4b26      	ldr	r3, [pc, #152]	; (800858c <UART_SetConfig+0x118c>)
 80084f2:	f04f 0400 	mov.w	r4, #0
 80084f6:	e01e      	b.n	8008536 <UART_SetConfig+0x1136>
 80084f8:	4b25      	ldr	r3, [pc, #148]	; (8008590 <UART_SetConfig+0x1190>)
 80084fa:	f04f 0400 	mov.w	r4, #0
 80084fe:	e01a      	b.n	8008536 <UART_SetConfig+0x1136>
 8008500:	a419      	add	r4, pc, #100	; (adr r4, 8008568 <UART_SetConfig+0x1168>)
 8008502:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008506:	e016      	b.n	8008536 <UART_SetConfig+0x1136>
 8008508:	4b22      	ldr	r3, [pc, #136]	; (8008594 <UART_SetConfig+0x1194>)
 800850a:	f04f 0400 	mov.w	r4, #0
 800850e:	e012      	b.n	8008536 <UART_SetConfig+0x1136>
 8008510:	4b21      	ldr	r3, [pc, #132]	; (8008598 <UART_SetConfig+0x1198>)
 8008512:	f04f 0400 	mov.w	r4, #0
 8008516:	e00e      	b.n	8008536 <UART_SetConfig+0x1136>
 8008518:	a415      	add	r4, pc, #84	; (adr r4, 8008570 <UART_SetConfig+0x1170>)
 800851a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800851e:	e00a      	b.n	8008536 <UART_SetConfig+0x1136>
 8008520:	4b1e      	ldr	r3, [pc, #120]	; (800859c <UART_SetConfig+0x119c>)
 8008522:	f04f 0400 	mov.w	r4, #0
 8008526:	e006      	b.n	8008536 <UART_SetConfig+0x1136>
 8008528:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <UART_SetConfig+0x11a0>)
 800852a:	f04f 0401 	mov.w	r4, #1
 800852e:	e002      	b.n	8008536 <UART_SetConfig+0x1136>
 8008530:	4b13      	ldr	r3, [pc, #76]	; (8008580 <UART_SetConfig+0x1180>)
 8008532:	f04f 0403 	mov.w	r4, #3
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6852      	ldr	r2, [r2, #4]
 800853a:	0852      	lsrs	r2, r2, #1
 800853c:	4611      	mov	r1, r2
 800853e:	f04f 0200 	mov.w	r2, #0
 8008542:	eb13 0b01 	adds.w	fp, r3, r1
 8008546:	eb44 0c02 	adc.w	ip, r4, r2
 800854a:	4658      	mov	r0, fp
 800854c:	4661      	mov	r1, ip
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f04f 0400 	mov.w	r4, #0
 8008556:	461a      	mov	r2, r3
 8008558:	4623      	mov	r3, r4
 800855a:	f7f7 febd 	bl	80002d8 <__aeabi_uldivmod>
 800855e:	4603      	mov	r3, r0
 8008560:	460c      	mov	r4, r1
 8008562:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008564:	e122      	b.n	80087ac <UART_SetConfig+0x13ac>
 8008566:	bf00      	nop
 8008568:	51615500 	.word	0x51615500
 800856c:	00000000 	.word	0x00000000
 8008570:	a2c2aa00 	.word	0xa2c2aa00
 8008574:	00000000 	.word	0x00000000
 8008578:	58024400 	.word	0x58024400
 800857c:	03d09000 	.word	0x03d09000
 8008580:	d0900000 	.word	0xd0900000
 8008584:	07a12000 	.word	0x07a12000
 8008588:	0f424000 	.word	0x0f424000
 800858c:	1e848000 	.word	0x1e848000
 8008590:	3d090000 	.word	0x3d090000
 8008594:	61a80000 	.word	0x61a80000
 8008598:	7a120000 	.word	0x7a120000
 800859c:	f4240000 	.word	0xf4240000
 80085a0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d05b      	beq.n	8008664 <UART_SetConfig+0x1264>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d053      	beq.n	800865c <UART_SetConfig+0x125c>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d04b      	beq.n	8008654 <UART_SetConfig+0x1254>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d043      	beq.n	800864c <UART_SetConfig+0x124c>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d03b      	beq.n	8008644 <UART_SetConfig+0x1244>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	2b05      	cmp	r3, #5
 80085d2:	d033      	beq.n	800863c <UART_SetConfig+0x123c>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	2b06      	cmp	r3, #6
 80085da:	d02b      	beq.n	8008634 <UART_SetConfig+0x1234>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	2b07      	cmp	r3, #7
 80085e2:	d023      	beq.n	800862c <UART_SetConfig+0x122c>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	2b08      	cmp	r3, #8
 80085ea:	d01b      	beq.n	8008624 <UART_SetConfig+0x1224>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	2b09      	cmp	r3, #9
 80085f2:	d013      	beq.n	800861c <UART_SetConfig+0x121c>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	2b0a      	cmp	r3, #10
 80085fa:	d00b      	beq.n	8008614 <UART_SetConfig+0x1214>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	2b0b      	cmp	r3, #11
 8008602:	d103      	bne.n	800860c <UART_SetConfig+0x120c>
 8008604:	4bc0      	ldr	r3, [pc, #768]	; (8008908 <UART_SetConfig+0x1508>)
 8008606:	f04f 0400 	mov.w	r4, #0
 800860a:	e02e      	b.n	800866a <UART_SetConfig+0x126a>
 800860c:	4bbf      	ldr	r3, [pc, #764]	; (800890c <UART_SetConfig+0x150c>)
 800860e:	f04f 0400 	mov.w	r4, #0
 8008612:	e02a      	b.n	800866a <UART_SetConfig+0x126a>
 8008614:	4bbe      	ldr	r3, [pc, #760]	; (8008910 <UART_SetConfig+0x1510>)
 8008616:	f04f 0400 	mov.w	r4, #0
 800861a:	e026      	b.n	800866a <UART_SetConfig+0x126a>
 800861c:	4bbd      	ldr	r3, [pc, #756]	; (8008914 <UART_SetConfig+0x1514>)
 800861e:	f04f 0400 	mov.w	r4, #0
 8008622:	e022      	b.n	800866a <UART_SetConfig+0x126a>
 8008624:	4bbc      	ldr	r3, [pc, #752]	; (8008918 <UART_SetConfig+0x1518>)
 8008626:	f04f 0400 	mov.w	r4, #0
 800862a:	e01e      	b.n	800866a <UART_SetConfig+0x126a>
 800862c:	4bbb      	ldr	r3, [pc, #748]	; (800891c <UART_SetConfig+0x151c>)
 800862e:	f04f 0400 	mov.w	r4, #0
 8008632:	e01a      	b.n	800866a <UART_SetConfig+0x126a>
 8008634:	a4b0      	add	r4, pc, #704	; (adr r4, 80088f8 <UART_SetConfig+0x14f8>)
 8008636:	e9d4 3400 	ldrd	r3, r4, [r4]
 800863a:	e016      	b.n	800866a <UART_SetConfig+0x126a>
 800863c:	4bb8      	ldr	r3, [pc, #736]	; (8008920 <UART_SetConfig+0x1520>)
 800863e:	f04f 0400 	mov.w	r4, #0
 8008642:	e012      	b.n	800866a <UART_SetConfig+0x126a>
 8008644:	4bb7      	ldr	r3, [pc, #732]	; (8008924 <UART_SetConfig+0x1524>)
 8008646:	f04f 0400 	mov.w	r4, #0
 800864a:	e00e      	b.n	800866a <UART_SetConfig+0x126a>
 800864c:	a4ac      	add	r4, pc, #688	; (adr r4, 8008900 <UART_SetConfig+0x1500>)
 800864e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008652:	e00a      	b.n	800866a <UART_SetConfig+0x126a>
 8008654:	4bb4      	ldr	r3, [pc, #720]	; (8008928 <UART_SetConfig+0x1528>)
 8008656:	f04f 0400 	mov.w	r4, #0
 800865a:	e006      	b.n	800866a <UART_SetConfig+0x126a>
 800865c:	4bb3      	ldr	r3, [pc, #716]	; (800892c <UART_SetConfig+0x152c>)
 800865e:	f04f 0400 	mov.w	r4, #0
 8008662:	e002      	b.n	800866a <UART_SetConfig+0x126a>
 8008664:	4ba9      	ldr	r3, [pc, #676]	; (800890c <UART_SetConfig+0x150c>)
 8008666:	f04f 0400 	mov.w	r4, #0
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	6852      	ldr	r2, [r2, #4]
 800866e:	0852      	lsrs	r2, r2, #1
 8008670:	4611      	mov	r1, r2
 8008672:	f04f 0200 	mov.w	r2, #0
 8008676:	eb13 0b01 	adds.w	fp, r3, r1
 800867a:	eb44 0c02 	adc.w	ip, r4, r2
 800867e:	4658      	mov	r0, fp
 8008680:	4661      	mov	r1, ip
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f04f 0400 	mov.w	r4, #0
 800868a:	461a      	mov	r2, r3
 800868c:	4623      	mov	r3, r4
 800868e:	f7f7 fe23 	bl	80002d8 <__aeabi_uldivmod>
 8008692:	4603      	mov	r3, r0
 8008694:	460c      	mov	r4, r1
 8008696:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008698:	e088      	b.n	80087ac <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d064      	beq.n	800876c <UART_SetConfig+0x136c>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d05b      	beq.n	8008762 <UART_SetConfig+0x1362>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d052      	beq.n	8008758 <UART_SetConfig+0x1358>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d04a      	beq.n	8008750 <UART_SetConfig+0x1350>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	2b04      	cmp	r3, #4
 80086c0:	d041      	beq.n	8008746 <UART_SetConfig+0x1346>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	2b05      	cmp	r3, #5
 80086c8:	d039      	beq.n	800873e <UART_SetConfig+0x133e>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	2b06      	cmp	r3, #6
 80086d0:	d031      	beq.n	8008736 <UART_SetConfig+0x1336>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	2b07      	cmp	r3, #7
 80086d8:	d028      	beq.n	800872c <UART_SetConfig+0x132c>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086de:	2b08      	cmp	r3, #8
 80086e0:	d01f      	beq.n	8008722 <UART_SetConfig+0x1322>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	2b09      	cmp	r3, #9
 80086e8:	d016      	beq.n	8008718 <UART_SetConfig+0x1318>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	2b0a      	cmp	r3, #10
 80086f0:	d00d      	beq.n	800870e <UART_SetConfig+0x130e>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	2b0b      	cmp	r3, #11
 80086f8:	d104      	bne.n	8008704 <UART_SetConfig+0x1304>
 80086fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086fe:	f04f 0400 	mov.w	r4, #0
 8008702:	e037      	b.n	8008774 <UART_SetConfig+0x1374>
 8008704:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008708:	f04f 0400 	mov.w	r4, #0
 800870c:	e032      	b.n	8008774 <UART_SetConfig+0x1374>
 800870e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008712:	f04f 0400 	mov.w	r4, #0
 8008716:	e02d      	b.n	8008774 <UART_SetConfig+0x1374>
 8008718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800871c:	f04f 0400 	mov.w	r4, #0
 8008720:	e028      	b.n	8008774 <UART_SetConfig+0x1374>
 8008722:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008726:	f04f 0400 	mov.w	r4, #0
 800872a:	e023      	b.n	8008774 <UART_SetConfig+0x1374>
 800872c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008730:	f04f 0400 	mov.w	r4, #0
 8008734:	e01e      	b.n	8008774 <UART_SetConfig+0x1374>
 8008736:	4b7e      	ldr	r3, [pc, #504]	; (8008930 <UART_SetConfig+0x1530>)
 8008738:	f04f 0400 	mov.w	r4, #0
 800873c:	e01a      	b.n	8008774 <UART_SetConfig+0x1374>
 800873e:	4b7d      	ldr	r3, [pc, #500]	; (8008934 <UART_SetConfig+0x1534>)
 8008740:	f04f 0400 	mov.w	r4, #0
 8008744:	e016      	b.n	8008774 <UART_SetConfig+0x1374>
 8008746:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800874a:	f04f 0400 	mov.w	r4, #0
 800874e:	e011      	b.n	8008774 <UART_SetConfig+0x1374>
 8008750:	4b79      	ldr	r3, [pc, #484]	; (8008938 <UART_SetConfig+0x1538>)
 8008752:	f04f 0400 	mov.w	r4, #0
 8008756:	e00d      	b.n	8008774 <UART_SetConfig+0x1374>
 8008758:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800875c:	f04f 0400 	mov.w	r4, #0
 8008760:	e008      	b.n	8008774 <UART_SetConfig+0x1374>
 8008762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008766:	f04f 0400 	mov.w	r4, #0
 800876a:	e003      	b.n	8008774 <UART_SetConfig+0x1374>
 800876c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008770:	f04f 0400 	mov.w	r4, #0
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	6852      	ldr	r2, [r2, #4]
 8008778:	0852      	lsrs	r2, r2, #1
 800877a:	4611      	mov	r1, r2
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	eb13 0b01 	adds.w	fp, r3, r1
 8008784:	eb44 0c02 	adc.w	ip, r4, r2
 8008788:	4658      	mov	r0, fp
 800878a:	4661      	mov	r1, ip
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f04f 0400 	mov.w	r4, #0
 8008794:	461a      	mov	r2, r3
 8008796:	4623      	mov	r3, r4
 8008798:	f7f7 fd9e 	bl	80002d8 <__aeabi_uldivmod>
 800879c:	4603      	mov	r3, r0
 800879e:	460c      	mov	r4, r1
 80087a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087a2:	e003      	b.n	80087ac <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 80087aa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087b2:	d309      	bcc.n	80087c8 <UART_SetConfig+0x13c8>
 80087b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087ba:	d205      	bcs.n	80087c8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c2:	60da      	str	r2, [r3, #12]
 80087c4:	f000 bf85 	b.w	80096d2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80087ce:	f000 bf80 	b.w	80096d2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087da:	f040 83da 	bne.w	8008f92 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 80087de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80087e2:	2b40      	cmp	r3, #64	; 0x40
 80087e4:	f200 83b3 	bhi.w	8008f4e <UART_SetConfig+0x1b4e>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <UART_SetConfig+0x13f0>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	0800893d 	.word	0x0800893d
 80087f4:	080089f5 	.word	0x080089f5
 80087f8:	08008f4f 	.word	0x08008f4f
 80087fc:	08008f4f 	.word	0x08008f4f
 8008800:	08008aad 	.word	0x08008aad
 8008804:	08008f4f 	.word	0x08008f4f
 8008808:	08008f4f 	.word	0x08008f4f
 800880c:	08008f4f 	.word	0x08008f4f
 8008810:	08008b69 	.word	0x08008b69
 8008814:	08008f4f 	.word	0x08008f4f
 8008818:	08008f4f 	.word	0x08008f4f
 800881c:	08008f4f 	.word	0x08008f4f
 8008820:	08008f4f 	.word	0x08008f4f
 8008824:	08008f4f 	.word	0x08008f4f
 8008828:	08008f4f 	.word	0x08008f4f
 800882c:	08008f4f 	.word	0x08008f4f
 8008830:	08008c25 	.word	0x08008c25
 8008834:	08008f4f 	.word	0x08008f4f
 8008838:	08008f4f 	.word	0x08008f4f
 800883c:	08008f4f 	.word	0x08008f4f
 8008840:	08008f4f 	.word	0x08008f4f
 8008844:	08008f4f 	.word	0x08008f4f
 8008848:	08008f4f 	.word	0x08008f4f
 800884c:	08008f4f 	.word	0x08008f4f
 8008850:	08008f4f 	.word	0x08008f4f
 8008854:	08008f4f 	.word	0x08008f4f
 8008858:	08008f4f 	.word	0x08008f4f
 800885c:	08008f4f 	.word	0x08008f4f
 8008860:	08008f4f 	.word	0x08008f4f
 8008864:	08008f4f 	.word	0x08008f4f
 8008868:	08008f4f 	.word	0x08008f4f
 800886c:	08008f4f 	.word	0x08008f4f
 8008870:	08008d97 	.word	0x08008d97
 8008874:	08008f4f 	.word	0x08008f4f
 8008878:	08008f4f 	.word	0x08008f4f
 800887c:	08008f4f 	.word	0x08008f4f
 8008880:	08008f4f 	.word	0x08008f4f
 8008884:	08008f4f 	.word	0x08008f4f
 8008888:	08008f4f 	.word	0x08008f4f
 800888c:	08008f4f 	.word	0x08008f4f
 8008890:	08008f4f 	.word	0x08008f4f
 8008894:	08008f4f 	.word	0x08008f4f
 8008898:	08008f4f 	.word	0x08008f4f
 800889c:	08008f4f 	.word	0x08008f4f
 80088a0:	08008f4f 	.word	0x08008f4f
 80088a4:	08008f4f 	.word	0x08008f4f
 80088a8:	08008f4f 	.word	0x08008f4f
 80088ac:	08008f4f 	.word	0x08008f4f
 80088b0:	08008f4f 	.word	0x08008f4f
 80088b4:	08008f4f 	.word	0x08008f4f
 80088b8:	08008f4f 	.word	0x08008f4f
 80088bc:	08008f4f 	.word	0x08008f4f
 80088c0:	08008f4f 	.word	0x08008f4f
 80088c4:	08008f4f 	.word	0x08008f4f
 80088c8:	08008f4f 	.word	0x08008f4f
 80088cc:	08008f4f 	.word	0x08008f4f
 80088d0:	08008f4f 	.word	0x08008f4f
 80088d4:	08008f4f 	.word	0x08008f4f
 80088d8:	08008f4f 	.word	0x08008f4f
 80088dc:	08008f4f 	.word	0x08008f4f
 80088e0:	08008f4f 	.word	0x08008f4f
 80088e4:	08008f4f 	.word	0x08008f4f
 80088e8:	08008f4f 	.word	0x08008f4f
 80088ec:	08008f4f 	.word	0x08008f4f
 80088f0:	08008e8d 	.word	0x08008e8d
 80088f4:	f3af 8000 	nop.w
 80088f8:	05161500 	.word	0x05161500
 80088fc:	00000000 	.word	0x00000000
 8008900:	0a2c2a00 	.word	0x0a2c2a00
 8008904:	00000000 	.word	0x00000000
 8008908:	003d0900 	.word	0x003d0900
 800890c:	3d090000 	.word	0x3d090000
 8008910:	007a1200 	.word	0x007a1200
 8008914:	00f42400 	.word	0x00f42400
 8008918:	01e84800 	.word	0x01e84800
 800891c:	03d09000 	.word	0x03d09000
 8008920:	061a8000 	.word	0x061a8000
 8008924:	07a12000 	.word	0x07a12000
 8008928:	0f424000 	.word	0x0f424000
 800892c:	1e848000 	.word	0x1e848000
 8008930:	000aaa00 	.word	0x000aaa00
 8008934:	000ccc00 	.word	0x000ccc00
 8008938:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800893c:	f7fb fcc0 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 8008940:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	d044      	beq.n	80089d4 <UART_SetConfig+0x15d4>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	2b01      	cmp	r3, #1
 8008950:	d03e      	beq.n	80089d0 <UART_SetConfig+0x15d0>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	2b02      	cmp	r3, #2
 8008958:	d038      	beq.n	80089cc <UART_SetConfig+0x15cc>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	2b03      	cmp	r3, #3
 8008960:	d032      	beq.n	80089c8 <UART_SetConfig+0x15c8>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	2b04      	cmp	r3, #4
 8008968:	d02c      	beq.n	80089c4 <UART_SetConfig+0x15c4>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	2b05      	cmp	r3, #5
 8008970:	d026      	beq.n	80089c0 <UART_SetConfig+0x15c0>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	2b06      	cmp	r3, #6
 8008978:	d020      	beq.n	80089bc <UART_SetConfig+0x15bc>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	2b07      	cmp	r3, #7
 8008980:	d01a      	beq.n	80089b8 <UART_SetConfig+0x15b8>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	2b08      	cmp	r3, #8
 8008988:	d014      	beq.n	80089b4 <UART_SetConfig+0x15b4>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	2b09      	cmp	r3, #9
 8008990:	d00e      	beq.n	80089b0 <UART_SetConfig+0x15b0>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	2b0a      	cmp	r3, #10
 8008998:	d008      	beq.n	80089ac <UART_SetConfig+0x15ac>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899e:	2b0b      	cmp	r3, #11
 80089a0:	d102      	bne.n	80089a8 <UART_SetConfig+0x15a8>
 80089a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089a6:	e016      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089a8:	2301      	movs	r3, #1
 80089aa:	e014      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089ac:	2380      	movs	r3, #128	; 0x80
 80089ae:	e012      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089b0:	2340      	movs	r3, #64	; 0x40
 80089b2:	e010      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089b4:	2320      	movs	r3, #32
 80089b6:	e00e      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089b8:	2310      	movs	r3, #16
 80089ba:	e00c      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089bc:	230c      	movs	r3, #12
 80089be:	e00a      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089c0:	230a      	movs	r3, #10
 80089c2:	e008      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089c4:	2308      	movs	r3, #8
 80089c6:	e006      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089c8:	2306      	movs	r3, #6
 80089ca:	e004      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089cc:	2304      	movs	r3, #4
 80089ce:	e002      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e000      	b.n	80089d6 <UART_SetConfig+0x15d6>
 80089d4:	2301      	movs	r3, #1
 80089d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089dc:	005a      	lsls	r2, r3, #1
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	441a      	add	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089f2:	e2b0      	b.n	8008f56 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089f4:	f7fb fc7a 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 80089f8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d044      	beq.n	8008a8c <UART_SetConfig+0x168c>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d03e      	beq.n	8008a88 <UART_SetConfig+0x1688>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d038      	beq.n	8008a84 <UART_SetConfig+0x1684>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d032      	beq.n	8008a80 <UART_SetConfig+0x1680>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d02c      	beq.n	8008a7c <UART_SetConfig+0x167c>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d026      	beq.n	8008a78 <UART_SetConfig+0x1678>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	2b06      	cmp	r3, #6
 8008a30:	d020      	beq.n	8008a74 <UART_SetConfig+0x1674>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	2b07      	cmp	r3, #7
 8008a38:	d01a      	beq.n	8008a70 <UART_SetConfig+0x1670>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d014      	beq.n	8008a6c <UART_SetConfig+0x166c>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	2b09      	cmp	r3, #9
 8008a48:	d00e      	beq.n	8008a68 <UART_SetConfig+0x1668>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	2b0a      	cmp	r3, #10
 8008a50:	d008      	beq.n	8008a64 <UART_SetConfig+0x1664>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	2b0b      	cmp	r3, #11
 8008a58:	d102      	bne.n	8008a60 <UART_SetConfig+0x1660>
 8008a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a5e:	e016      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a60:	2301      	movs	r3, #1
 8008a62:	e014      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a64:	2380      	movs	r3, #128	; 0x80
 8008a66:	e012      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a68:	2340      	movs	r3, #64	; 0x40
 8008a6a:	e010      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a6c:	2320      	movs	r3, #32
 8008a6e:	e00e      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a70:	2310      	movs	r3, #16
 8008a72:	e00c      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a74:	230c      	movs	r3, #12
 8008a76:	e00a      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a78:	230a      	movs	r3, #10
 8008a7a:	e008      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a7c:	2308      	movs	r3, #8
 8008a7e:	e006      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a80:	2306      	movs	r3, #6
 8008a82:	e004      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a84:	2304      	movs	r3, #4
 8008a86:	e002      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a88:	2302      	movs	r3, #2
 8008a8a:	e000      	b.n	8008a8e <UART_SetConfig+0x168e>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a94:	005a      	lsls	r2, r3, #1
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	085b      	lsrs	r3, r3, #1
 8008a9c:	441a      	add	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008aaa:	e254      	b.n	8008f56 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aac:	f107 0318 	add.w	r3, r7, #24
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7fc fd6d 	bl	8005590 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d044      	beq.n	8008b4a <UART_SetConfig+0x174a>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d03e      	beq.n	8008b46 <UART_SetConfig+0x1746>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d038      	beq.n	8008b42 <UART_SetConfig+0x1742>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d032      	beq.n	8008b3e <UART_SetConfig+0x173e>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d02c      	beq.n	8008b3a <UART_SetConfig+0x173a>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	2b05      	cmp	r3, #5
 8008ae6:	d026      	beq.n	8008b36 <UART_SetConfig+0x1736>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	2b06      	cmp	r3, #6
 8008aee:	d020      	beq.n	8008b32 <UART_SetConfig+0x1732>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	2b07      	cmp	r3, #7
 8008af6:	d01a      	beq.n	8008b2e <UART_SetConfig+0x172e>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d014      	beq.n	8008b2a <UART_SetConfig+0x172a>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	2b09      	cmp	r3, #9
 8008b06:	d00e      	beq.n	8008b26 <UART_SetConfig+0x1726>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	2b0a      	cmp	r3, #10
 8008b0e:	d008      	beq.n	8008b22 <UART_SetConfig+0x1722>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	2b0b      	cmp	r3, #11
 8008b16:	d102      	bne.n	8008b1e <UART_SetConfig+0x171e>
 8008b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b1c:	e016      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e014      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b22:	2380      	movs	r3, #128	; 0x80
 8008b24:	e012      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b26:	2340      	movs	r3, #64	; 0x40
 8008b28:	e010      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b2a:	2320      	movs	r3, #32
 8008b2c:	e00e      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b2e:	2310      	movs	r3, #16
 8008b30:	e00c      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b32:	230c      	movs	r3, #12
 8008b34:	e00a      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b36:	230a      	movs	r3, #10
 8008b38:	e008      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b3a:	2308      	movs	r3, #8
 8008b3c:	e006      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b3e:	2306      	movs	r3, #6
 8008b40:	e004      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b42:	2304      	movs	r3, #4
 8008b44:	e002      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b46:	2302      	movs	r3, #2
 8008b48:	e000      	b.n	8008b4c <UART_SetConfig+0x174c>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b50:	005a      	lsls	r2, r3, #1
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	085b      	lsrs	r3, r3, #1
 8008b58:	441a      	add	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b66:	e1f6      	b.n	8008f56 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b68:	f107 030c 	add.w	r3, r7, #12
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fc fe5b 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d044      	beq.n	8008c06 <UART_SetConfig+0x1806>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d03e      	beq.n	8008c02 <UART_SetConfig+0x1802>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d038      	beq.n	8008bfe <UART_SetConfig+0x17fe>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	d032      	beq.n	8008bfa <UART_SetConfig+0x17fa>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	2b04      	cmp	r3, #4
 8008b9a:	d02c      	beq.n	8008bf6 <UART_SetConfig+0x17f6>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	2b05      	cmp	r3, #5
 8008ba2:	d026      	beq.n	8008bf2 <UART_SetConfig+0x17f2>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba8:	2b06      	cmp	r3, #6
 8008baa:	d020      	beq.n	8008bee <UART_SetConfig+0x17ee>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	2b07      	cmp	r3, #7
 8008bb2:	d01a      	beq.n	8008bea <UART_SetConfig+0x17ea>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	d014      	beq.n	8008be6 <UART_SetConfig+0x17e6>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	2b09      	cmp	r3, #9
 8008bc2:	d00e      	beq.n	8008be2 <UART_SetConfig+0x17e2>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b0a      	cmp	r3, #10
 8008bca:	d008      	beq.n	8008bde <UART_SetConfig+0x17de>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b0b      	cmp	r3, #11
 8008bd2:	d102      	bne.n	8008bda <UART_SetConfig+0x17da>
 8008bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bd8:	e016      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e014      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008bde:	2380      	movs	r3, #128	; 0x80
 8008be0:	e012      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008be2:	2340      	movs	r3, #64	; 0x40
 8008be4:	e010      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008be6:	2320      	movs	r3, #32
 8008be8:	e00e      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008bea:	2310      	movs	r3, #16
 8008bec:	e00c      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	e00a      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008bf2:	230a      	movs	r3, #10
 8008bf4:	e008      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008bf6:	2308      	movs	r3, #8
 8008bf8:	e006      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008bfa:	2306      	movs	r3, #6
 8008bfc:	e004      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008bfe:	2304      	movs	r3, #4
 8008c00:	e002      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008c02:	2302      	movs	r3, #2
 8008c04:	e000      	b.n	8008c08 <UART_SetConfig+0x1808>
 8008c06:	2301      	movs	r3, #1
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	005a      	lsls	r2, r3, #1
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	085b      	lsrs	r3, r3, #1
 8008c14:	441a      	add	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c22:	e198      	b.n	8008f56 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c24:	4b87      	ldr	r3, [pc, #540]	; (8008e44 <UART_SetConfig+0x1a44>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0320 	and.w	r3, r3, #32
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d05e      	beq.n	8008cee <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c30:	4b84      	ldr	r3, [pc, #528]	; (8008e44 <UART_SetConfig+0x1a44>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	08db      	lsrs	r3, r3, #3
 8008c36:	f003 0303 	and.w	r3, r3, #3
 8008c3a:	4a83      	ldr	r2, [pc, #524]	; (8008e48 <UART_SetConfig+0x1a48>)
 8008c3c:	40da      	lsrs	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d044      	beq.n	8008cd0 <UART_SetConfig+0x18d0>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d03e      	beq.n	8008ccc <UART_SetConfig+0x18cc>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d038      	beq.n	8008cc8 <UART_SetConfig+0x18c8>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d032      	beq.n	8008cc4 <UART_SetConfig+0x18c4>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	d02c      	beq.n	8008cc0 <UART_SetConfig+0x18c0>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6a:	2b05      	cmp	r3, #5
 8008c6c:	d026      	beq.n	8008cbc <UART_SetConfig+0x18bc>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	2b06      	cmp	r3, #6
 8008c74:	d020      	beq.n	8008cb8 <UART_SetConfig+0x18b8>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	2b07      	cmp	r3, #7
 8008c7c:	d01a      	beq.n	8008cb4 <UART_SetConfig+0x18b4>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	2b08      	cmp	r3, #8
 8008c84:	d014      	beq.n	8008cb0 <UART_SetConfig+0x18b0>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	2b09      	cmp	r3, #9
 8008c8c:	d00e      	beq.n	8008cac <UART_SetConfig+0x18ac>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	2b0a      	cmp	r3, #10
 8008c94:	d008      	beq.n	8008ca8 <UART_SetConfig+0x18a8>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	2b0b      	cmp	r3, #11
 8008c9c:	d102      	bne.n	8008ca4 <UART_SetConfig+0x18a4>
 8008c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ca2:	e016      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e014      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008ca8:	2380      	movs	r3, #128	; 0x80
 8008caa:	e012      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008cac:	2340      	movs	r3, #64	; 0x40
 8008cae:	e010      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008cb0:	2320      	movs	r3, #32
 8008cb2:	e00e      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008cb4:	2310      	movs	r3, #16
 8008cb6:	e00c      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008cb8:	230c      	movs	r3, #12
 8008cba:	e00a      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008cbc:	230a      	movs	r3, #10
 8008cbe:	e008      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008cc0:	2308      	movs	r3, #8
 8008cc2:	e006      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008cc4:	2306      	movs	r3, #6
 8008cc6:	e004      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	e002      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e000      	b.n	8008cd2 <UART_SetConfig+0x18d2>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd6:	005a      	lsls	r2, r3, #1
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	085b      	lsrs	r3, r3, #1
 8008cde:	441a      	add	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008cec:	e133      	b.n	8008f56 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d043      	beq.n	8008d7e <UART_SetConfig+0x197e>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d03d      	beq.n	8008d7a <UART_SetConfig+0x197a>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d037      	beq.n	8008d76 <UART_SetConfig+0x1976>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d031      	beq.n	8008d72 <UART_SetConfig+0x1972>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d02b      	beq.n	8008d6e <UART_SetConfig+0x196e>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1a:	2b05      	cmp	r3, #5
 8008d1c:	d025      	beq.n	8008d6a <UART_SetConfig+0x196a>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d22:	2b06      	cmp	r3, #6
 8008d24:	d01f      	beq.n	8008d66 <UART_SetConfig+0x1966>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	2b07      	cmp	r3, #7
 8008d2c:	d019      	beq.n	8008d62 <UART_SetConfig+0x1962>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	2b08      	cmp	r3, #8
 8008d34:	d013      	beq.n	8008d5e <UART_SetConfig+0x195e>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	2b09      	cmp	r3, #9
 8008d3c:	d00d      	beq.n	8008d5a <UART_SetConfig+0x195a>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	2b0a      	cmp	r3, #10
 8008d44:	d007      	beq.n	8008d56 <UART_SetConfig+0x1956>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4a:	2b0b      	cmp	r3, #11
 8008d4c:	d101      	bne.n	8008d52 <UART_SetConfig+0x1952>
 8008d4e:	4b3f      	ldr	r3, [pc, #252]	; (8008e4c <UART_SetConfig+0x1a4c>)
 8008d50:	e016      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d52:	4b3f      	ldr	r3, [pc, #252]	; (8008e50 <UART_SetConfig+0x1a50>)
 8008d54:	e014      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d56:	4b3f      	ldr	r3, [pc, #252]	; (8008e54 <UART_SetConfig+0x1a54>)
 8008d58:	e012      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d5a:	4b3f      	ldr	r3, [pc, #252]	; (8008e58 <UART_SetConfig+0x1a58>)
 8008d5c:	e010      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d5e:	4b3f      	ldr	r3, [pc, #252]	; (8008e5c <UART_SetConfig+0x1a5c>)
 8008d60:	e00e      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d62:	4b3f      	ldr	r3, [pc, #252]	; (8008e60 <UART_SetConfig+0x1a60>)
 8008d64:	e00c      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d66:	4b3f      	ldr	r3, [pc, #252]	; (8008e64 <UART_SetConfig+0x1a64>)
 8008d68:	e00a      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d6a:	4b3f      	ldr	r3, [pc, #252]	; (8008e68 <UART_SetConfig+0x1a68>)
 8008d6c:	e008      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d6e:	4b3f      	ldr	r3, [pc, #252]	; (8008e6c <UART_SetConfig+0x1a6c>)
 8008d70:	e006      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d72:	4b3f      	ldr	r3, [pc, #252]	; (8008e70 <UART_SetConfig+0x1a70>)
 8008d74:	e004      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d76:	4b3f      	ldr	r3, [pc, #252]	; (8008e74 <UART_SetConfig+0x1a74>)
 8008d78:	e002      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d7a:	4b33      	ldr	r3, [pc, #204]	; (8008e48 <UART_SetConfig+0x1a48>)
 8008d7c:	e000      	b.n	8008d80 <UART_SetConfig+0x1980>
 8008d7e:	4b34      	ldr	r3, [pc, #208]	; (8008e50 <UART_SetConfig+0x1a50>)
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	6852      	ldr	r2, [r2, #4]
 8008d84:	0852      	lsrs	r2, r2, #1
 8008d86:	441a      	add	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d94:	e0df      	b.n	8008f56 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d045      	beq.n	8008e2a <UART_SetConfig+0x1a2a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d03f      	beq.n	8008e26 <UART_SetConfig+0x1a26>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d039      	beq.n	8008e22 <UART_SetConfig+0x1a22>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	2b03      	cmp	r3, #3
 8008db4:	d033      	beq.n	8008e1e <UART_SetConfig+0x1a1e>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dba:	2b04      	cmp	r3, #4
 8008dbc:	d02d      	beq.n	8008e1a <UART_SetConfig+0x1a1a>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc2:	2b05      	cmp	r3, #5
 8008dc4:	d027      	beq.n	8008e16 <UART_SetConfig+0x1a16>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	2b06      	cmp	r3, #6
 8008dcc:	d021      	beq.n	8008e12 <UART_SetConfig+0x1a12>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	2b07      	cmp	r3, #7
 8008dd4:	d01b      	beq.n	8008e0e <UART_SetConfig+0x1a0e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	2b08      	cmp	r3, #8
 8008ddc:	d015      	beq.n	8008e0a <UART_SetConfig+0x1a0a>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	2b09      	cmp	r3, #9
 8008de4:	d00f      	beq.n	8008e06 <UART_SetConfig+0x1a06>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	2b0a      	cmp	r3, #10
 8008dec:	d008      	beq.n	8008e00 <UART_SetConfig+0x1a00>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df2:	2b0b      	cmp	r3, #11
 8008df4:	d102      	bne.n	8008dfc <UART_SetConfig+0x19fc>
 8008df6:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008dfa:	e017      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008dfc:	4b18      	ldr	r3, [pc, #96]	; (8008e60 <UART_SetConfig+0x1a60>)
 8008dfe:	e015      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008e00:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008e04:	e012      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008e06:	4b1c      	ldr	r3, [pc, #112]	; (8008e78 <UART_SetConfig+0x1a78>)
 8008e08:	e010      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008e0a:	4b1c      	ldr	r3, [pc, #112]	; (8008e7c <UART_SetConfig+0x1a7c>)
 8008e0c:	e00e      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <UART_SetConfig+0x1a4c>)
 8008e10:	e00c      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008e12:	4b1b      	ldr	r3, [pc, #108]	; (8008e80 <UART_SetConfig+0x1a80>)
 8008e14:	e00a      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008e16:	4b1b      	ldr	r3, [pc, #108]	; (8008e84 <UART_SetConfig+0x1a84>)
 8008e18:	e008      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008e1a:	4b0e      	ldr	r3, [pc, #56]	; (8008e54 <UART_SetConfig+0x1a54>)
 8008e1c:	e006      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008e1e:	4b1a      	ldr	r3, [pc, #104]	; (8008e88 <UART_SetConfig+0x1a88>)
 8008e20:	e004      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008e22:	4b0d      	ldr	r3, [pc, #52]	; (8008e58 <UART_SetConfig+0x1a58>)
 8008e24:	e002      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008e26:	4b0d      	ldr	r3, [pc, #52]	; (8008e5c <UART_SetConfig+0x1a5c>)
 8008e28:	e000      	b.n	8008e2c <UART_SetConfig+0x1a2c>
 8008e2a:	4b0d      	ldr	r3, [pc, #52]	; (8008e60 <UART_SetConfig+0x1a60>)
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	6852      	ldr	r2, [r2, #4]
 8008e30:	0852      	lsrs	r2, r2, #1
 8008e32:	441a      	add	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e40:	e089      	b.n	8008f56 <UART_SetConfig+0x1b56>
 8008e42:	bf00      	nop
 8008e44:	58024400 	.word	0x58024400
 8008e48:	03d09000 	.word	0x03d09000
 8008e4c:	0007a120 	.word	0x0007a120
 8008e50:	07a12000 	.word	0x07a12000
 8008e54:	000f4240 	.word	0x000f4240
 8008e58:	001e8480 	.word	0x001e8480
 8008e5c:	003d0900 	.word	0x003d0900
 8008e60:	007a1200 	.word	0x007a1200
 8008e64:	00a2c2aa 	.word	0x00a2c2aa
 8008e68:	00c35000 	.word	0x00c35000
 8008e6c:	00f42400 	.word	0x00f42400
 8008e70:	01458554 	.word	0x01458554
 8008e74:	01e84800 	.word	0x01e84800
 8008e78:	0001e848 	.word	0x0001e848
 8008e7c:	0003d090 	.word	0x0003d090
 8008e80:	000a2c2a 	.word	0x000a2c2a
 8008e84:	000c3500 	.word	0x000c3500
 8008e88:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d04f      	beq.n	8008f34 <UART_SetConfig+0x1b34>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d048      	beq.n	8008f2e <UART_SetConfig+0x1b2e>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d041      	beq.n	8008f28 <UART_SetConfig+0x1b28>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d03a      	beq.n	8008f22 <UART_SetConfig+0x1b22>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	d033      	beq.n	8008f1c <UART_SetConfig+0x1b1c>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	2b05      	cmp	r3, #5
 8008eba:	d02c      	beq.n	8008f16 <UART_SetConfig+0x1b16>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	2b06      	cmp	r3, #6
 8008ec2:	d025      	beq.n	8008f10 <UART_SetConfig+0x1b10>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	2b07      	cmp	r3, #7
 8008eca:	d01e      	beq.n	8008f0a <UART_SetConfig+0x1b0a>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed0:	2b08      	cmp	r3, #8
 8008ed2:	d017      	beq.n	8008f04 <UART_SetConfig+0x1b04>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	2b09      	cmp	r3, #9
 8008eda:	d010      	beq.n	8008efe <UART_SetConfig+0x1afe>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	2b0a      	cmp	r3, #10
 8008ee2:	d009      	beq.n	8008ef8 <UART_SetConfig+0x1af8>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	2b0b      	cmp	r3, #11
 8008eea:	d102      	bne.n	8008ef2 <UART_SetConfig+0x1af2>
 8008eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef0:	e022      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ef6:	e01f      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008efc:	e01c      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f02:	e019      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008f04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f08:	e016      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f0e:	e013      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008f10:	f241 5354 	movw	r3, #5460	; 0x1554
 8008f14:	e010      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008f16:	f641 1398 	movw	r3, #6552	; 0x1998
 8008f1a:	e00d      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008f1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f20:	e00a      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008f22:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008f26:	e007      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008f28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f2c:	e004      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f32:	e001      	b.n	8008f38 <UART_SetConfig+0x1b38>
 8008f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	6852      	ldr	r2, [r2, #4]
 8008f3c:	0852      	lsrs	r2, r2, #1
 8008f3e:	441a      	add	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f4c:	e003      	b.n	8008f56 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008f54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f58:	2b0f      	cmp	r3, #15
 8008f5a:	d916      	bls.n	8008f8a <UART_SetConfig+0x1b8a>
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f62:	d212      	bcs.n	8008f8a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	f023 030f 	bic.w	r3, r3, #15
 8008f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f70:	085b      	lsrs	r3, r3, #1
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f003 0307 	and.w	r3, r3, #7
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008f86:	60da      	str	r2, [r3, #12]
 8008f88:	e3a3      	b.n	80096d2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f90:	e39f      	b.n	80096d2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8008f92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008f96:	2b40      	cmp	r3, #64	; 0x40
 8008f98:	f200 8388 	bhi.w	80096ac <UART_SetConfig+0x22ac>
 8008f9c:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <UART_SetConfig+0x1ba4>)
 8008f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa2:	bf00      	nop
 8008fa4:	080090a9 	.word	0x080090a9
 8008fa8:	0800915f 	.word	0x0800915f
 8008fac:	080096ad 	.word	0x080096ad
 8008fb0:	080096ad 	.word	0x080096ad
 8008fb4:	08009215 	.word	0x08009215
 8008fb8:	080096ad 	.word	0x080096ad
 8008fbc:	080096ad 	.word	0x080096ad
 8008fc0:	080096ad 	.word	0x080096ad
 8008fc4:	080092cf 	.word	0x080092cf
 8008fc8:	080096ad 	.word	0x080096ad
 8008fcc:	080096ad 	.word	0x080096ad
 8008fd0:	080096ad 	.word	0x080096ad
 8008fd4:	080096ad 	.word	0x080096ad
 8008fd8:	080096ad 	.word	0x080096ad
 8008fdc:	080096ad 	.word	0x080096ad
 8008fe0:	080096ad 	.word	0x080096ad
 8008fe4:	08009389 	.word	0x08009389
 8008fe8:	080096ad 	.word	0x080096ad
 8008fec:	080096ad 	.word	0x080096ad
 8008ff0:	080096ad 	.word	0x080096ad
 8008ff4:	080096ad 	.word	0x080096ad
 8008ff8:	080096ad 	.word	0x080096ad
 8008ffc:	080096ad 	.word	0x080096ad
 8009000:	080096ad 	.word	0x080096ad
 8009004:	080096ad 	.word	0x080096ad
 8009008:	080096ad 	.word	0x080096ad
 800900c:	080096ad 	.word	0x080096ad
 8009010:	080096ad 	.word	0x080096ad
 8009014:	080096ad 	.word	0x080096ad
 8009018:	080096ad 	.word	0x080096ad
 800901c:	080096ad 	.word	0x080096ad
 8009020:	080096ad 	.word	0x080096ad
 8009024:	080094f9 	.word	0x080094f9
 8009028:	080096ad 	.word	0x080096ad
 800902c:	080096ad 	.word	0x080096ad
 8009030:	080096ad 	.word	0x080096ad
 8009034:	080096ad 	.word	0x080096ad
 8009038:	080096ad 	.word	0x080096ad
 800903c:	080096ad 	.word	0x080096ad
 8009040:	080096ad 	.word	0x080096ad
 8009044:	080096ad 	.word	0x080096ad
 8009048:	080096ad 	.word	0x080096ad
 800904c:	080096ad 	.word	0x080096ad
 8009050:	080096ad 	.word	0x080096ad
 8009054:	080096ad 	.word	0x080096ad
 8009058:	080096ad 	.word	0x080096ad
 800905c:	080096ad 	.word	0x080096ad
 8009060:	080096ad 	.word	0x080096ad
 8009064:	080096ad 	.word	0x080096ad
 8009068:	080096ad 	.word	0x080096ad
 800906c:	080096ad 	.word	0x080096ad
 8009070:	080096ad 	.word	0x080096ad
 8009074:	080096ad 	.word	0x080096ad
 8009078:	080096ad 	.word	0x080096ad
 800907c:	080096ad 	.word	0x080096ad
 8009080:	080096ad 	.word	0x080096ad
 8009084:	080096ad 	.word	0x080096ad
 8009088:	080096ad 	.word	0x080096ad
 800908c:	080096ad 	.word	0x080096ad
 8009090:	080096ad 	.word	0x080096ad
 8009094:	080096ad 	.word	0x080096ad
 8009098:	080096ad 	.word	0x080096ad
 800909c:	080096ad 	.word	0x080096ad
 80090a0:	080096ad 	.word	0x080096ad
 80090a4:	080095ed 	.word	0x080095ed
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090a8:	f7fb f90a 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 80090ac:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d044      	beq.n	8009140 <UART_SetConfig+0x1d40>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d03e      	beq.n	800913c <UART_SetConfig+0x1d3c>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d038      	beq.n	8009138 <UART_SetConfig+0x1d38>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	2b03      	cmp	r3, #3
 80090cc:	d032      	beq.n	8009134 <UART_SetConfig+0x1d34>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d02c      	beq.n	8009130 <UART_SetConfig+0x1d30>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090da:	2b05      	cmp	r3, #5
 80090dc:	d026      	beq.n	800912c <UART_SetConfig+0x1d2c>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e2:	2b06      	cmp	r3, #6
 80090e4:	d020      	beq.n	8009128 <UART_SetConfig+0x1d28>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ea:	2b07      	cmp	r3, #7
 80090ec:	d01a      	beq.n	8009124 <UART_SetConfig+0x1d24>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	2b08      	cmp	r3, #8
 80090f4:	d014      	beq.n	8009120 <UART_SetConfig+0x1d20>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	2b09      	cmp	r3, #9
 80090fc:	d00e      	beq.n	800911c <UART_SetConfig+0x1d1c>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	2b0a      	cmp	r3, #10
 8009104:	d008      	beq.n	8009118 <UART_SetConfig+0x1d18>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	2b0b      	cmp	r3, #11
 800910c:	d102      	bne.n	8009114 <UART_SetConfig+0x1d14>
 800910e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009112:	e016      	b.n	8009142 <UART_SetConfig+0x1d42>
 8009114:	2301      	movs	r3, #1
 8009116:	e014      	b.n	8009142 <UART_SetConfig+0x1d42>
 8009118:	2380      	movs	r3, #128	; 0x80
 800911a:	e012      	b.n	8009142 <UART_SetConfig+0x1d42>
 800911c:	2340      	movs	r3, #64	; 0x40
 800911e:	e010      	b.n	8009142 <UART_SetConfig+0x1d42>
 8009120:	2320      	movs	r3, #32
 8009122:	e00e      	b.n	8009142 <UART_SetConfig+0x1d42>
 8009124:	2310      	movs	r3, #16
 8009126:	e00c      	b.n	8009142 <UART_SetConfig+0x1d42>
 8009128:	230c      	movs	r3, #12
 800912a:	e00a      	b.n	8009142 <UART_SetConfig+0x1d42>
 800912c:	230a      	movs	r3, #10
 800912e:	e008      	b.n	8009142 <UART_SetConfig+0x1d42>
 8009130:	2308      	movs	r3, #8
 8009132:	e006      	b.n	8009142 <UART_SetConfig+0x1d42>
 8009134:	2306      	movs	r3, #6
 8009136:	e004      	b.n	8009142 <UART_SetConfig+0x1d42>
 8009138:	2304      	movs	r3, #4
 800913a:	e002      	b.n	8009142 <UART_SetConfig+0x1d42>
 800913c:	2302      	movs	r3, #2
 800913e:	e000      	b.n	8009142 <UART_SetConfig+0x1d42>
 8009140:	2301      	movs	r3, #1
 8009142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009144:	fbb2 f2f3 	udiv	r2, r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	085b      	lsrs	r3, r3, #1
 800914e:	441a      	add	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	fbb2 f3f3 	udiv	r3, r2, r3
 8009158:	b29b      	uxth	r3, r3
 800915a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800915c:	e2aa      	b.n	80096b4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800915e:	f7fb f8c5 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 8009162:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	2b00      	cmp	r3, #0
 800916a:	d044      	beq.n	80091f6 <UART_SetConfig+0x1df6>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	2b01      	cmp	r3, #1
 8009172:	d03e      	beq.n	80091f2 <UART_SetConfig+0x1df2>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	2b02      	cmp	r3, #2
 800917a:	d038      	beq.n	80091ee <UART_SetConfig+0x1dee>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	2b03      	cmp	r3, #3
 8009182:	d032      	beq.n	80091ea <UART_SetConfig+0x1dea>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	2b04      	cmp	r3, #4
 800918a:	d02c      	beq.n	80091e6 <UART_SetConfig+0x1de6>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	2b05      	cmp	r3, #5
 8009192:	d026      	beq.n	80091e2 <UART_SetConfig+0x1de2>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009198:	2b06      	cmp	r3, #6
 800919a:	d020      	beq.n	80091de <UART_SetConfig+0x1dde>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	2b07      	cmp	r3, #7
 80091a2:	d01a      	beq.n	80091da <UART_SetConfig+0x1dda>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d014      	beq.n	80091d6 <UART_SetConfig+0x1dd6>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b0:	2b09      	cmp	r3, #9
 80091b2:	d00e      	beq.n	80091d2 <UART_SetConfig+0x1dd2>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	2b0a      	cmp	r3, #10
 80091ba:	d008      	beq.n	80091ce <UART_SetConfig+0x1dce>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	2b0b      	cmp	r3, #11
 80091c2:	d102      	bne.n	80091ca <UART_SetConfig+0x1dca>
 80091c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091c8:	e016      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e014      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091ce:	2380      	movs	r3, #128	; 0x80
 80091d0:	e012      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091d2:	2340      	movs	r3, #64	; 0x40
 80091d4:	e010      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091d6:	2320      	movs	r3, #32
 80091d8:	e00e      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091da:	2310      	movs	r3, #16
 80091dc:	e00c      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091de:	230c      	movs	r3, #12
 80091e0:	e00a      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091e2:	230a      	movs	r3, #10
 80091e4:	e008      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091e6:	2308      	movs	r3, #8
 80091e8:	e006      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091ea:	2306      	movs	r3, #6
 80091ec:	e004      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091ee:	2304      	movs	r3, #4
 80091f0:	e002      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e000      	b.n	80091f8 <UART_SetConfig+0x1df8>
 80091f6:	2301      	movs	r3, #1
 80091f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	085b      	lsrs	r3, r3, #1
 8009204:	441a      	add	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	fbb2 f3f3 	udiv	r3, r2, r3
 800920e:	b29b      	uxth	r3, r3
 8009210:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009212:	e24f      	b.n	80096b4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009214:	f107 0318 	add.w	r3, r7, #24
 8009218:	4618      	mov	r0, r3
 800921a:	f7fc f9b9 	bl	8005590 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800921e:	69fa      	ldr	r2, [r7, #28]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	2b00      	cmp	r3, #0
 8009226:	d044      	beq.n	80092b2 <UART_SetConfig+0x1eb2>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	2b01      	cmp	r3, #1
 800922e:	d03e      	beq.n	80092ae <UART_SetConfig+0x1eae>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	2b02      	cmp	r3, #2
 8009236:	d038      	beq.n	80092aa <UART_SetConfig+0x1eaa>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923c:	2b03      	cmp	r3, #3
 800923e:	d032      	beq.n	80092a6 <UART_SetConfig+0x1ea6>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009244:	2b04      	cmp	r3, #4
 8009246:	d02c      	beq.n	80092a2 <UART_SetConfig+0x1ea2>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	2b05      	cmp	r3, #5
 800924e:	d026      	beq.n	800929e <UART_SetConfig+0x1e9e>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	2b06      	cmp	r3, #6
 8009256:	d020      	beq.n	800929a <UART_SetConfig+0x1e9a>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925c:	2b07      	cmp	r3, #7
 800925e:	d01a      	beq.n	8009296 <UART_SetConfig+0x1e96>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	2b08      	cmp	r3, #8
 8009266:	d014      	beq.n	8009292 <UART_SetConfig+0x1e92>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926c:	2b09      	cmp	r3, #9
 800926e:	d00e      	beq.n	800928e <UART_SetConfig+0x1e8e>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009274:	2b0a      	cmp	r3, #10
 8009276:	d008      	beq.n	800928a <UART_SetConfig+0x1e8a>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	2b0b      	cmp	r3, #11
 800927e:	d102      	bne.n	8009286 <UART_SetConfig+0x1e86>
 8009280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009284:	e016      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 8009286:	2301      	movs	r3, #1
 8009288:	e014      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 800928a:	2380      	movs	r3, #128	; 0x80
 800928c:	e012      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 800928e:	2340      	movs	r3, #64	; 0x40
 8009290:	e010      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 8009292:	2320      	movs	r3, #32
 8009294:	e00e      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 8009296:	2310      	movs	r3, #16
 8009298:	e00c      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 800929a:	230c      	movs	r3, #12
 800929c:	e00a      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 800929e:	230a      	movs	r3, #10
 80092a0:	e008      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 80092a2:	2308      	movs	r3, #8
 80092a4:	e006      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 80092a6:	2306      	movs	r3, #6
 80092a8:	e004      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 80092aa:	2304      	movs	r3, #4
 80092ac:	e002      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 80092ae:	2302      	movs	r3, #2
 80092b0:	e000      	b.n	80092b4 <UART_SetConfig+0x1eb4>
 80092b2:	2301      	movs	r3, #1
 80092b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	085b      	lsrs	r3, r3, #1
 80092be:	441a      	add	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092cc:	e1f2      	b.n	80096b4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ce:	f107 030c 	add.w	r3, r7, #12
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fc faa8 	bl	8005828 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d044      	beq.n	800936c <UART_SetConfig+0x1f6c>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d03e      	beq.n	8009368 <UART_SetConfig+0x1f68>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d038      	beq.n	8009364 <UART_SetConfig+0x1f64>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	d032      	beq.n	8009360 <UART_SetConfig+0x1f60>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	2b04      	cmp	r3, #4
 8009300:	d02c      	beq.n	800935c <UART_SetConfig+0x1f5c>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009306:	2b05      	cmp	r3, #5
 8009308:	d026      	beq.n	8009358 <UART_SetConfig+0x1f58>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	2b06      	cmp	r3, #6
 8009310:	d020      	beq.n	8009354 <UART_SetConfig+0x1f54>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	2b07      	cmp	r3, #7
 8009318:	d01a      	beq.n	8009350 <UART_SetConfig+0x1f50>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	2b08      	cmp	r3, #8
 8009320:	d014      	beq.n	800934c <UART_SetConfig+0x1f4c>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009326:	2b09      	cmp	r3, #9
 8009328:	d00e      	beq.n	8009348 <UART_SetConfig+0x1f48>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932e:	2b0a      	cmp	r3, #10
 8009330:	d008      	beq.n	8009344 <UART_SetConfig+0x1f44>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009336:	2b0b      	cmp	r3, #11
 8009338:	d102      	bne.n	8009340 <UART_SetConfig+0x1f40>
 800933a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800933e:	e016      	b.n	800936e <UART_SetConfig+0x1f6e>
 8009340:	2301      	movs	r3, #1
 8009342:	e014      	b.n	800936e <UART_SetConfig+0x1f6e>
 8009344:	2380      	movs	r3, #128	; 0x80
 8009346:	e012      	b.n	800936e <UART_SetConfig+0x1f6e>
 8009348:	2340      	movs	r3, #64	; 0x40
 800934a:	e010      	b.n	800936e <UART_SetConfig+0x1f6e>
 800934c:	2320      	movs	r3, #32
 800934e:	e00e      	b.n	800936e <UART_SetConfig+0x1f6e>
 8009350:	2310      	movs	r3, #16
 8009352:	e00c      	b.n	800936e <UART_SetConfig+0x1f6e>
 8009354:	230c      	movs	r3, #12
 8009356:	e00a      	b.n	800936e <UART_SetConfig+0x1f6e>
 8009358:	230a      	movs	r3, #10
 800935a:	e008      	b.n	800936e <UART_SetConfig+0x1f6e>
 800935c:	2308      	movs	r3, #8
 800935e:	e006      	b.n	800936e <UART_SetConfig+0x1f6e>
 8009360:	2306      	movs	r3, #6
 8009362:	e004      	b.n	800936e <UART_SetConfig+0x1f6e>
 8009364:	2304      	movs	r3, #4
 8009366:	e002      	b.n	800936e <UART_SetConfig+0x1f6e>
 8009368:	2302      	movs	r3, #2
 800936a:	e000      	b.n	800936e <UART_SetConfig+0x1f6e>
 800936c:	2301      	movs	r3, #1
 800936e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	085b      	lsrs	r3, r3, #1
 8009378:	441a      	add	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009382:	b29b      	uxth	r3, r3
 8009384:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009386:	e195      	b.n	80096b4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009388:	4b87      	ldr	r3, [pc, #540]	; (80095a8 <UART_SetConfig+0x21a8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0320 	and.w	r3, r3, #32
 8009390:	2b00      	cmp	r3, #0
 8009392:	d05d      	beq.n	8009450 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009394:	4b84      	ldr	r3, [pc, #528]	; (80095a8 <UART_SetConfig+0x21a8>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	08db      	lsrs	r3, r3, #3
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	4a83      	ldr	r2, [pc, #524]	; (80095ac <UART_SetConfig+0x21ac>)
 80093a0:	40da      	lsrs	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d044      	beq.n	8009434 <UART_SetConfig+0x2034>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d03e      	beq.n	8009430 <UART_SetConfig+0x2030>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d038      	beq.n	800942c <UART_SetConfig+0x202c>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	2b03      	cmp	r3, #3
 80093c0:	d032      	beq.n	8009428 <UART_SetConfig+0x2028>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	d02c      	beq.n	8009424 <UART_SetConfig+0x2024>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ce:	2b05      	cmp	r3, #5
 80093d0:	d026      	beq.n	8009420 <UART_SetConfig+0x2020>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d6:	2b06      	cmp	r3, #6
 80093d8:	d020      	beq.n	800941c <UART_SetConfig+0x201c>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	2b07      	cmp	r3, #7
 80093e0:	d01a      	beq.n	8009418 <UART_SetConfig+0x2018>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	2b08      	cmp	r3, #8
 80093e8:	d014      	beq.n	8009414 <UART_SetConfig+0x2014>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	2b09      	cmp	r3, #9
 80093f0:	d00e      	beq.n	8009410 <UART_SetConfig+0x2010>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	2b0a      	cmp	r3, #10
 80093f8:	d008      	beq.n	800940c <UART_SetConfig+0x200c>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	2b0b      	cmp	r3, #11
 8009400:	d102      	bne.n	8009408 <UART_SetConfig+0x2008>
 8009402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009406:	e016      	b.n	8009436 <UART_SetConfig+0x2036>
 8009408:	2301      	movs	r3, #1
 800940a:	e014      	b.n	8009436 <UART_SetConfig+0x2036>
 800940c:	2380      	movs	r3, #128	; 0x80
 800940e:	e012      	b.n	8009436 <UART_SetConfig+0x2036>
 8009410:	2340      	movs	r3, #64	; 0x40
 8009412:	e010      	b.n	8009436 <UART_SetConfig+0x2036>
 8009414:	2320      	movs	r3, #32
 8009416:	e00e      	b.n	8009436 <UART_SetConfig+0x2036>
 8009418:	2310      	movs	r3, #16
 800941a:	e00c      	b.n	8009436 <UART_SetConfig+0x2036>
 800941c:	230c      	movs	r3, #12
 800941e:	e00a      	b.n	8009436 <UART_SetConfig+0x2036>
 8009420:	230a      	movs	r3, #10
 8009422:	e008      	b.n	8009436 <UART_SetConfig+0x2036>
 8009424:	2308      	movs	r3, #8
 8009426:	e006      	b.n	8009436 <UART_SetConfig+0x2036>
 8009428:	2306      	movs	r3, #6
 800942a:	e004      	b.n	8009436 <UART_SetConfig+0x2036>
 800942c:	2304      	movs	r3, #4
 800942e:	e002      	b.n	8009436 <UART_SetConfig+0x2036>
 8009430:	2302      	movs	r3, #2
 8009432:	e000      	b.n	8009436 <UART_SetConfig+0x2036>
 8009434:	2301      	movs	r3, #1
 8009436:	fbb2 f2f3 	udiv	r2, r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	085b      	lsrs	r3, r3, #1
 8009440:	441a      	add	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	fbb2 f3f3 	udiv	r3, r2, r3
 800944a:	b29b      	uxth	r3, r3
 800944c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800944e:	e131      	b.n	80096b4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	2b00      	cmp	r3, #0
 8009456:	d043      	beq.n	80094e0 <UART_SetConfig+0x20e0>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	2b01      	cmp	r3, #1
 800945e:	d03d      	beq.n	80094dc <UART_SetConfig+0x20dc>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009464:	2b02      	cmp	r3, #2
 8009466:	d037      	beq.n	80094d8 <UART_SetConfig+0x20d8>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946c:	2b03      	cmp	r3, #3
 800946e:	d031      	beq.n	80094d4 <UART_SetConfig+0x20d4>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	2b04      	cmp	r3, #4
 8009476:	d02b      	beq.n	80094d0 <UART_SetConfig+0x20d0>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947c:	2b05      	cmp	r3, #5
 800947e:	d025      	beq.n	80094cc <UART_SetConfig+0x20cc>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	2b06      	cmp	r3, #6
 8009486:	d01f      	beq.n	80094c8 <UART_SetConfig+0x20c8>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	2b07      	cmp	r3, #7
 800948e:	d019      	beq.n	80094c4 <UART_SetConfig+0x20c4>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	2b08      	cmp	r3, #8
 8009496:	d013      	beq.n	80094c0 <UART_SetConfig+0x20c0>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	2b09      	cmp	r3, #9
 800949e:	d00d      	beq.n	80094bc <UART_SetConfig+0x20bc>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	2b0a      	cmp	r3, #10
 80094a6:	d007      	beq.n	80094b8 <UART_SetConfig+0x20b8>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ac:	2b0b      	cmp	r3, #11
 80094ae:	d101      	bne.n	80094b4 <UART_SetConfig+0x20b4>
 80094b0:	4b3f      	ldr	r3, [pc, #252]	; (80095b0 <UART_SetConfig+0x21b0>)
 80094b2:	e016      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094b4:	4b3d      	ldr	r3, [pc, #244]	; (80095ac <UART_SetConfig+0x21ac>)
 80094b6:	e014      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094b8:	4b3e      	ldr	r3, [pc, #248]	; (80095b4 <UART_SetConfig+0x21b4>)
 80094ba:	e012      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094bc:	4b3e      	ldr	r3, [pc, #248]	; (80095b8 <UART_SetConfig+0x21b8>)
 80094be:	e010      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094c0:	4b3e      	ldr	r3, [pc, #248]	; (80095bc <UART_SetConfig+0x21bc>)
 80094c2:	e00e      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094c4:	4b3e      	ldr	r3, [pc, #248]	; (80095c0 <UART_SetConfig+0x21c0>)
 80094c6:	e00c      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094c8:	4b3e      	ldr	r3, [pc, #248]	; (80095c4 <UART_SetConfig+0x21c4>)
 80094ca:	e00a      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094cc:	4b3e      	ldr	r3, [pc, #248]	; (80095c8 <UART_SetConfig+0x21c8>)
 80094ce:	e008      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094d0:	4b3e      	ldr	r3, [pc, #248]	; (80095cc <UART_SetConfig+0x21cc>)
 80094d2:	e006      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094d4:	4b3e      	ldr	r3, [pc, #248]	; (80095d0 <UART_SetConfig+0x21d0>)
 80094d6:	e004      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094d8:	4b3e      	ldr	r3, [pc, #248]	; (80095d4 <UART_SetConfig+0x21d4>)
 80094da:	e002      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094dc:	4b3e      	ldr	r3, [pc, #248]	; (80095d8 <UART_SetConfig+0x21d8>)
 80094de:	e000      	b.n	80094e2 <UART_SetConfig+0x20e2>
 80094e0:	4b32      	ldr	r3, [pc, #200]	; (80095ac <UART_SetConfig+0x21ac>)
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	6852      	ldr	r2, [r2, #4]
 80094e6:	0852      	lsrs	r2, r2, #1
 80094e8:	441a      	add	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094f6:	e0dd      	b.n	80096b4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d046      	beq.n	800958e <UART_SetConfig+0x218e>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	2b01      	cmp	r3, #1
 8009506:	d040      	beq.n	800958a <UART_SetConfig+0x218a>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	2b02      	cmp	r3, #2
 800950e:	d03a      	beq.n	8009586 <UART_SetConfig+0x2186>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009514:	2b03      	cmp	r3, #3
 8009516:	d034      	beq.n	8009582 <UART_SetConfig+0x2182>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951c:	2b04      	cmp	r3, #4
 800951e:	d02e      	beq.n	800957e <UART_SetConfig+0x217e>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009524:	2b05      	cmp	r3, #5
 8009526:	d028      	beq.n	800957a <UART_SetConfig+0x217a>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	2b06      	cmp	r3, #6
 800952e:	d022      	beq.n	8009576 <UART_SetConfig+0x2176>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009534:	2b07      	cmp	r3, #7
 8009536:	d01c      	beq.n	8009572 <UART_SetConfig+0x2172>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	2b08      	cmp	r3, #8
 800953e:	d016      	beq.n	800956e <UART_SetConfig+0x216e>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009544:	2b09      	cmp	r3, #9
 8009546:	d00f      	beq.n	8009568 <UART_SetConfig+0x2168>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954c:	2b0a      	cmp	r3, #10
 800954e:	d008      	beq.n	8009562 <UART_SetConfig+0x2162>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009554:	2b0b      	cmp	r3, #11
 8009556:	d102      	bne.n	800955e <UART_SetConfig+0x215e>
 8009558:	f643 5309 	movw	r3, #15625	; 0x3d09
 800955c:	e018      	b.n	8009590 <UART_SetConfig+0x2190>
 800955e:	4b18      	ldr	r3, [pc, #96]	; (80095c0 <UART_SetConfig+0x21c0>)
 8009560:	e016      	b.n	8009590 <UART_SetConfig+0x2190>
 8009562:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009566:	e013      	b.n	8009590 <UART_SetConfig+0x2190>
 8009568:	f24f 4324 	movw	r3, #62500	; 0xf424
 800956c:	e010      	b.n	8009590 <UART_SetConfig+0x2190>
 800956e:	4b1b      	ldr	r3, [pc, #108]	; (80095dc <UART_SetConfig+0x21dc>)
 8009570:	e00e      	b.n	8009590 <UART_SetConfig+0x2190>
 8009572:	4b0f      	ldr	r3, [pc, #60]	; (80095b0 <UART_SetConfig+0x21b0>)
 8009574:	e00c      	b.n	8009590 <UART_SetConfig+0x2190>
 8009576:	4b1a      	ldr	r3, [pc, #104]	; (80095e0 <UART_SetConfig+0x21e0>)
 8009578:	e00a      	b.n	8009590 <UART_SetConfig+0x2190>
 800957a:	4b1a      	ldr	r3, [pc, #104]	; (80095e4 <UART_SetConfig+0x21e4>)
 800957c:	e008      	b.n	8009590 <UART_SetConfig+0x2190>
 800957e:	4b0d      	ldr	r3, [pc, #52]	; (80095b4 <UART_SetConfig+0x21b4>)
 8009580:	e006      	b.n	8009590 <UART_SetConfig+0x2190>
 8009582:	4b19      	ldr	r3, [pc, #100]	; (80095e8 <UART_SetConfig+0x21e8>)
 8009584:	e004      	b.n	8009590 <UART_SetConfig+0x2190>
 8009586:	4b0c      	ldr	r3, [pc, #48]	; (80095b8 <UART_SetConfig+0x21b8>)
 8009588:	e002      	b.n	8009590 <UART_SetConfig+0x2190>
 800958a:	4b0c      	ldr	r3, [pc, #48]	; (80095bc <UART_SetConfig+0x21bc>)
 800958c:	e000      	b.n	8009590 <UART_SetConfig+0x2190>
 800958e:	4b0c      	ldr	r3, [pc, #48]	; (80095c0 <UART_SetConfig+0x21c0>)
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	6852      	ldr	r2, [r2, #4]
 8009594:	0852      	lsrs	r2, r2, #1
 8009596:	441a      	add	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	fbb2 f3f3 	udiv	r3, r2, r3
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095a4:	e086      	b.n	80096b4 <UART_SetConfig+0x22b4>
 80095a6:	bf00      	nop
 80095a8:	58024400 	.word	0x58024400
 80095ac:	03d09000 	.word	0x03d09000
 80095b0:	0003d090 	.word	0x0003d090
 80095b4:	0007a120 	.word	0x0007a120
 80095b8:	000f4240 	.word	0x000f4240
 80095bc:	001e8480 	.word	0x001e8480
 80095c0:	003d0900 	.word	0x003d0900
 80095c4:	00516155 	.word	0x00516155
 80095c8:	0061a800 	.word	0x0061a800
 80095cc:	007a1200 	.word	0x007a1200
 80095d0:	00a2c2aa 	.word	0x00a2c2aa
 80095d4:	00f42400 	.word	0x00f42400
 80095d8:	01e84800 	.word	0x01e84800
 80095dc:	0001e848 	.word	0x0001e848
 80095e0:	00051615 	.word	0x00051615
 80095e4:	00061a80 	.word	0x00061a80
 80095e8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d04e      	beq.n	8009692 <UART_SetConfig+0x2292>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d047      	beq.n	800968c <UART_SetConfig+0x228c>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	2b02      	cmp	r3, #2
 8009602:	d040      	beq.n	8009686 <UART_SetConfig+0x2286>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	2b03      	cmp	r3, #3
 800960a:	d039      	beq.n	8009680 <UART_SetConfig+0x2280>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009610:	2b04      	cmp	r3, #4
 8009612:	d032      	beq.n	800967a <UART_SetConfig+0x227a>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	2b05      	cmp	r3, #5
 800961a:	d02b      	beq.n	8009674 <UART_SetConfig+0x2274>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	2b06      	cmp	r3, #6
 8009622:	d024      	beq.n	800966e <UART_SetConfig+0x226e>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	2b07      	cmp	r3, #7
 800962a:	d01d      	beq.n	8009668 <UART_SetConfig+0x2268>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	2b08      	cmp	r3, #8
 8009632:	d016      	beq.n	8009662 <UART_SetConfig+0x2262>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	2b09      	cmp	r3, #9
 800963a:	d00f      	beq.n	800965c <UART_SetConfig+0x225c>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009640:	2b0a      	cmp	r3, #10
 8009642:	d008      	beq.n	8009656 <UART_SetConfig+0x2256>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	2b0b      	cmp	r3, #11
 800964a:	d101      	bne.n	8009650 <UART_SetConfig+0x2250>
 800964c:	2380      	movs	r3, #128	; 0x80
 800964e:	e022      	b.n	8009696 <UART_SetConfig+0x2296>
 8009650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009654:	e01f      	b.n	8009696 <UART_SetConfig+0x2296>
 8009656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800965a:	e01c      	b.n	8009696 <UART_SetConfig+0x2296>
 800965c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009660:	e019      	b.n	8009696 <UART_SetConfig+0x2296>
 8009662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009666:	e016      	b.n	8009696 <UART_SetConfig+0x2296>
 8009668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800966c:	e013      	b.n	8009696 <UART_SetConfig+0x2296>
 800966e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009672:	e010      	b.n	8009696 <UART_SetConfig+0x2296>
 8009674:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009678:	e00d      	b.n	8009696 <UART_SetConfig+0x2296>
 800967a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800967e:	e00a      	b.n	8009696 <UART_SetConfig+0x2296>
 8009680:	f241 5355 	movw	r3, #5461	; 0x1555
 8009684:	e007      	b.n	8009696 <UART_SetConfig+0x2296>
 8009686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800968a:	e004      	b.n	8009696 <UART_SetConfig+0x2296>
 800968c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009690:	e001      	b.n	8009696 <UART_SetConfig+0x2296>
 8009692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	6852      	ldr	r2, [r2, #4]
 800969a:	0852      	lsrs	r2, r2, #1
 800969c:	441a      	add	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096aa:	e003      	b.n	80096b4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80096b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b6:	2b0f      	cmp	r3, #15
 80096b8:	d908      	bls.n	80096cc <UART_SetConfig+0x22cc>
 80096ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096c0:	d204      	bcs.n	80096cc <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096c8:	60da      	str	r2, [r3, #12]
 80096ca:	e002      	b.n	80096d2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80096ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3740      	adds	r7, #64	; 0x40
 80096f6:	46bd      	mov	sp, r7
 80096f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080096fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00a      	beq.n	8009726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972a:	f003 0302 	and.w	r3, r3, #2
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	430a      	orrs	r2, r1
 8009746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974c:	f003 0304 	and.w	r3, r3, #4
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00a      	beq.n	800976a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	430a      	orrs	r2, r1
 8009768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976e:	f003 0308 	and.w	r3, r3, #8
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00a      	beq.n	800978c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009790:	f003 0310 	and.w	r3, r3, #16
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00a      	beq.n	80097ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d01a      	beq.n	8009812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	430a      	orrs	r2, r1
 80097f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097fa:	d10a      	bne.n	8009812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00a      	beq.n	8009834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	430a      	orrs	r2, r1
 8009832:	605a      	str	r2, [r3, #4]
  }
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af02      	add	r7, sp, #8
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009850:	f7f8 fb8e 	bl	8001f70 <HAL_GetTick>
 8009854:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 0308 	and.w	r3, r3, #8
 8009860:	2b08      	cmp	r3, #8
 8009862:	d10e      	bne.n	8009882 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f82c 	bl	80098d0 <UART_WaitOnFlagUntilTimeout>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800987e:	2303      	movs	r3, #3
 8009880:	e022      	b.n	80098c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 0304 	and.w	r3, r3, #4
 800988c:	2b04      	cmp	r3, #4
 800988e:	d10e      	bne.n	80098ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f816 	bl	80098d0 <UART_WaitOnFlagUntilTimeout>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098aa:	2303      	movs	r3, #3
 80098ac:	e00c      	b.n	80098c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2220      	movs	r2, #32
 80098ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	4613      	mov	r3, r2
 80098de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098e0:	e062      	b.n	80099a8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098e8:	d05e      	beq.n	80099a8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ea:	f7f8 fb41 	bl	8001f70 <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	69ba      	ldr	r2, [r7, #24]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d302      	bcc.n	8009900 <UART_WaitOnFlagUntilTimeout+0x30>
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d11d      	bne.n	800993c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800990e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689a      	ldr	r2, [r3, #8]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f022 0201 	bic.w	r2, r2, #1
 800991e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2220      	movs	r2, #32
 8009924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2220      	movs	r2, #32
 800992c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e045      	b.n	80099c8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 0304 	and.w	r3, r3, #4
 8009946:	2b00      	cmp	r3, #0
 8009948:	d02e      	beq.n	80099a8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009958:	d126      	bne.n	80099a8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009962:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009972:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689a      	ldr	r2, [r3, #8]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 0201 	bic.w	r2, r2, #1
 8009982:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2220      	movs	r2, #32
 8009988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2220      	movs	r2, #32
 8009990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2220      	movs	r2, #32
 8009998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e00f      	b.n	80099c8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	69da      	ldr	r2, [r3, #28]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	4013      	ands	r3, r2
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	bf0c      	ite	eq
 80099b8:	2301      	moveq	r3, #1
 80099ba:	2300      	movne	r3, #0
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	461a      	mov	r2, r3
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d08d      	beq.n	80098e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d101      	bne.n	80099e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80099e2:	2302      	movs	r3, #2
 80099e4:	e027      	b.n	8009a36 <HAL_UARTEx_DisableFifoMode+0x66>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2224      	movs	r2, #36	; 0x24
 80099f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f022 0201 	bic.w	r2, r2, #1
 8009a0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2220      	movs	r2, #32
 8009a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3714      	adds	r7, #20
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d101      	bne.n	8009a5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a56:	2302      	movs	r3, #2
 8009a58:	e02d      	b.n	8009ab6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2224      	movs	r2, #36	; 0x24
 8009a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0201 	bic.w	r2, r2, #1
 8009a80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	430a      	orrs	r2, r1
 8009a94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f850 	bl	8009b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2220      	movs	r2, #32
 8009aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d101      	bne.n	8009ad6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	e02d      	b.n	8009b32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2224      	movs	r2, #36	; 0x24
 8009ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0201 	bic.w	r2, r2, #1
 8009afc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	430a      	orrs	r2, r1
 8009b10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f812 	bl	8009b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b089      	sub	sp, #36	; 0x24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009b44:	4a2f      	ldr	r2, [pc, #188]	; (8009c04 <UARTEx_SetNbDataToProcess+0xc8>)
 8009b46:	f107 0314 	add.w	r3, r7, #20
 8009b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b4e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009b52:	4a2d      	ldr	r2, [pc, #180]	; (8009c08 <UARTEx_SetNbDataToProcess+0xcc>)
 8009b54:	f107 030c 	add.w	r3, r7, #12
 8009b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b5c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d108      	bne.n	8009b7a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b78:	e03d      	b.n	8009bf6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b7a:	2308      	movs	r3, #8
 8009b7c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b7e:	2308      	movs	r3, #8
 8009b80:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	0e5b      	lsrs	r3, r3, #25
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 0307 	and.w	r3, r3, #7
 8009b90:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	0f5b      	lsrs	r3, r3, #29
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	f003 0307 	and.w	r3, r3, #7
 8009ba0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009ba2:	7fbb      	ldrb	r3, [r7, #30]
 8009ba4:	7f3a      	ldrb	r2, [r7, #28]
 8009ba6:	f107 0120 	add.w	r1, r7, #32
 8009baa:	440a      	add	r2, r1
 8009bac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009bb0:	fb02 f303 	mul.w	r3, r2, r3
 8009bb4:	7f3a      	ldrb	r2, [r7, #28]
 8009bb6:	f107 0120 	add.w	r1, r7, #32
 8009bba:	440a      	add	r2, r1
 8009bbc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009bc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009bcc:	7ffb      	ldrb	r3, [r7, #31]
 8009bce:	7f7a      	ldrb	r2, [r7, #29]
 8009bd0:	f107 0120 	add.w	r1, r7, #32
 8009bd4:	440a      	add	r2, r1
 8009bd6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009bda:	fb02 f303 	mul.w	r3, r2, r3
 8009bde:	7f7a      	ldrb	r2, [r7, #29]
 8009be0:	f107 0120 	add.w	r1, r7, #32
 8009be4:	440a      	add	r2, r1
 8009be6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009bea:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009bf6:	bf00      	nop
 8009bf8:	3724      	adds	r7, #36	; 0x24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	0800af5c 	.word	0x0800af5c
 8009c08:	0800af64 	.word	0x0800af64

08009c0c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d121      	bne.n	8009c62 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	4b27      	ldr	r3, [pc, #156]	; (8009cc0 <FMC_SDRAM_Init+0xb4>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	6851      	ldr	r1, [r2, #4]
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	6892      	ldr	r2, [r2, #8]
 8009c2e:	4311      	orrs	r1, r2
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	68d2      	ldr	r2, [r2, #12]
 8009c34:	4311      	orrs	r1, r2
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	6912      	ldr	r2, [r2, #16]
 8009c3a:	4311      	orrs	r1, r2
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	6952      	ldr	r2, [r2, #20]
 8009c40:	4311      	orrs	r1, r2
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	6992      	ldr	r2, [r2, #24]
 8009c46:	4311      	orrs	r1, r2
 8009c48:	683a      	ldr	r2, [r7, #0]
 8009c4a:	69d2      	ldr	r2, [r2, #28]
 8009c4c:	4311      	orrs	r1, r2
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	6a12      	ldr	r2, [r2, #32]
 8009c52:	4311      	orrs	r1, r2
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c58:	430a      	orrs	r2, r1
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	601a      	str	r2, [r3, #0]
 8009c60:	e026      	b.n	8009cb0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	69d9      	ldr	r1, [r3, #28]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	4319      	orrs	r1, r3
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	430b      	orrs	r3, r1
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	4b0e      	ldr	r3, [pc, #56]	; (8009cc0 <FMC_SDRAM_Init+0xb4>)
 8009c86:	4013      	ands	r3, r2
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	6851      	ldr	r1, [r2, #4]
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	6892      	ldr	r2, [r2, #8]
 8009c90:	4311      	orrs	r1, r2
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	68d2      	ldr	r2, [r2, #12]
 8009c96:	4311      	orrs	r1, r2
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	6912      	ldr	r2, [r2, #16]
 8009c9c:	4311      	orrs	r1, r2
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	6952      	ldr	r2, [r2, #20]
 8009ca2:	4311      	orrs	r1, r2
 8009ca4:	683a      	ldr	r2, [r7, #0]
 8009ca6:	6992      	ldr	r2, [r2, #24]
 8009ca8:	430a      	orrs	r2, r1
 8009caa:	431a      	orrs	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	ffff8000 	.word	0xffff8000

08009cc4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d128      	bne.n	8009d28 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	1e59      	subs	r1, r3, #1
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	4319      	orrs	r1, r3
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	021b      	lsls	r3, r3, #8
 8009cf6:	4319      	orrs	r1, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	031b      	lsls	r3, r3, #12
 8009d00:	4319      	orrs	r1, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	041b      	lsls	r3, r3, #16
 8009d0a:	4319      	orrs	r1, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	051b      	lsls	r3, r3, #20
 8009d14:	4319      	orrs	r1, r3
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	699b      	ldr	r3, [r3, #24]
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	061b      	lsls	r3, r3, #24
 8009d1e:	430b      	orrs	r3, r1
 8009d20:	431a      	orrs	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	609a      	str	r2, [r3, #8]
 8009d26:	e02d      	b.n	8009d84 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	4b19      	ldr	r3, [pc, #100]	; (8009d94 <FMC_SDRAM_Timing_Init+0xd0>)
 8009d2e:	4013      	ands	r3, r2
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	68d2      	ldr	r2, [r2, #12]
 8009d34:	3a01      	subs	r2, #1
 8009d36:	0311      	lsls	r1, r2, #12
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	6952      	ldr	r2, [r2, #20]
 8009d3c:	3a01      	subs	r2, #1
 8009d3e:	0512      	lsls	r2, r2, #20
 8009d40:	430a      	orrs	r2, r1
 8009d42:	431a      	orrs	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	1e59      	subs	r1, r3, #1
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	011b      	lsls	r3, r3, #4
 8009d5e:	4319      	orrs	r1, r3
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	021b      	lsls	r3, r3, #8
 8009d68:	4319      	orrs	r1, r3
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	041b      	lsls	r3, r3, #16
 8009d72:	4319      	orrs	r1, r3
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	061b      	lsls	r3, r3, #24
 8009d7c:	430b      	orrs	r3, r1
 8009d7e:	431a      	orrs	r2, r3
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	ff0f0fff 	.word	0xff0f0fff

08009d98 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009d98:	b084      	sub	sp, #16
 8009d9a:	b480      	push	{r7}
 8009d9c:	b085      	sub	sp, #20
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	f107 001c 	add.w	r0, r7, #28
 8009da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009dae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8009db0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009db2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8009db6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8009dba:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8009dbe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <SDMMC_Init+0x50>)
 8009dcc:	4013      	ands	r3, r2
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	b004      	add	sp, #16
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	ffc02c00 	.word	0xffc02c00

08009dec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009e06:	b480      	push	{r7}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f043 0203 	orr.w	r2, r3, #3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0303 	and.w	r3, r3, #3
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e62:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009e68:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009e6e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	68da      	ldr	r2, [r3, #12]
 8009e7a:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <SDMMC_SendCommand+0x50>)
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	431a      	orrs	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	fffee0c0 	.word	0xfffee0c0

08009e98 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	b2db      	uxtb	r3, r3
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b085      	sub	sp, #20
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3314      	adds	r3, #20
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009efe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009f04:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009f0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	431a      	orrs	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009f22:	2300      	movs	r3, #0

}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b088      	sub	sp, #32
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009f3e:	2310      	movs	r3, #16
 8009f40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f52:	f107 0308 	add.w	r3, r7, #8
 8009f56:	4619      	mov	r1, r3
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff ff73 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f62:	2110      	movs	r1, #16
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f9e3 	bl	800a330 <SDMMC_GetCmdResp1>
 8009f6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f6c:	69fb      	ldr	r3, [r7, #28]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3720      	adds	r7, #32
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b08a      	sub	sp, #40	; 0x28
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009f86:	2307      	movs	r3, #7
 8009f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f8e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f90:	2300      	movs	r3, #0
 8009f92:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f98:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f9a:	f107 0310 	add.w	r3, r7, #16
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f7ff ff4f 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009faa:	2107      	movs	r1, #7
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f000 f9bf 	bl	800a330 <SDMMC_GetCmdResp1>
 8009fb2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3728      	adds	r7, #40	; 0x28
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b088      	sub	sp, #32
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fdc:	f107 0308 	add.w	r3, r7, #8
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f7ff ff2e 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f977 	bl	800a2dc <SDMMC_GetCmdError>
 8009fee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ff0:	69fb      	ldr	r3, [r7, #28]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3720      	adds	r7, #32
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b088      	sub	sp, #32
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a002:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a008:	2308      	movs	r3, #8
 800a00a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a00c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a010:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a012:	2300      	movs	r3, #0
 800a014:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a01a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a01c:	f107 0308 	add.w	r3, r7, #8
 800a020:	4619      	mov	r1, r3
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7ff ff0e 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fb6b 	bl	800a704 <SDMMC_GetCmdResp7>
 800a02e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a030:	69fb      	ldr	r3, [r7, #28]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3720      	adds	r7, #32
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b088      	sub	sp, #32
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a048:	2337      	movs	r3, #55	; 0x37
 800a04a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a04c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a052:	2300      	movs	r3, #0
 800a054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a05a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a05c:	f107 0308 	add.w	r3, r7, #8
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7ff feee 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a068:	f241 3288 	movw	r2, #5000	; 0x1388
 800a06c:	2137      	movs	r1, #55	; 0x37
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f95e 	bl	800a330 <SDMMC_GetCmdResp1>
 800a074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a076:	69fb      	ldr	r3, [r7, #28]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3720      	adds	r7, #32
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b088      	sub	sp, #32
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a08e:	2329      	movs	r3, #41	; 0x29
 800a090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a092:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a096:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a098:	2300      	movs	r3, #0
 800a09a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a09c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0a2:	f107 0308 	add.w	r3, r7, #8
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff fecb 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fa76 	bl	800a5a0 <SDMMC_GetCmdResp3>
 800a0b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0b6:	69fb      	ldr	r3, [r7, #28]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3720      	adds	r7, #32
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b088      	sub	sp, #32
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a0ce:	2306      	movs	r3, #6
 800a0d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0e2:	f107 0308 	add.w	r3, r7, #8
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7ff feab 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a0ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0f2:	2106      	movs	r1, #6
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f91b 	bl	800a330 <SDMMC_GetCmdResp1>
 800a0fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0fc:	69fb      	ldr	r3, [r7, #28]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3720      	adds	r7, #32
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b088      	sub	sp, #32
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a112:	2333      	movs	r3, #51	; 0x33
 800a114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a11a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a11c:	2300      	movs	r3, #0
 800a11e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a124:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a126:	f107 0308 	add.w	r3, r7, #8
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff fe89 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a132:	f241 3288 	movw	r2, #5000	; 0x1388
 800a136:	2133      	movs	r1, #51	; 0x33
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f8f9 	bl	800a330 <SDMMC_GetCmdResp1>
 800a13e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a140:	69fb      	ldr	r3, [r7, #28]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3720      	adds	r7, #32
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b088      	sub	sp, #32
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a156:	2302      	movs	r3, #2
 800a158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a15a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a15e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a160:	2300      	movs	r3, #0
 800a162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a168:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a16a:	f107 0308 	add.w	r3, r7, #8
 800a16e:	4619      	mov	r1, r3
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff fe67 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f9ca 	bl	800a510 <SDMMC_GetCmdResp2>
 800a17c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a17e:	69fb      	ldr	r3, [r7, #28]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3720      	adds	r7, #32
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a196:	2309      	movs	r3, #9
 800a198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a19a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a19e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1aa:	f107 0308 	add.w	r3, r7, #8
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7ff fe47 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f9aa 	bl	800a510 <SDMMC_GetCmdResp2>
 800a1bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1be:	69fb      	ldr	r3, [r7, #28]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3720      	adds	r7, #32
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b088      	sub	sp, #32
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a1de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1ea:	f107 0308 	add.w	r3, r7, #8
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff fe27 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	2103      	movs	r1, #3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fa0c 	bl	800a618 <SDMMC_GetCmdResp6>
 800a200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a202:	69fb      	ldr	r3, [r7, #28]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3720      	adds	r7, #32
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b088      	sub	sp, #32
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a21a:	230d      	movs	r3, #13
 800a21c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a21e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a222:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a224:	2300      	movs	r3, #0
 800a226:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a22c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a22e:	f107 0308 	add.w	r3, r7, #8
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff fe05 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a23a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a23e:	210d      	movs	r1, #13
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f875 	bl	800a330 <SDMMC_GetCmdResp1>
 800a246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a248:	69fb      	ldr	r3, [r7, #28]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b088      	sub	sp, #32
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a25e:	230d      	movs	r3, #13
 800a260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a262:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a268:	2300      	movs	r3, #0
 800a26a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a26c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a270:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a272:	f107 0308 	add.w	r3, r7, #8
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7ff fde3 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a27e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a282:	210d      	movs	r1, #13
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f853 	bl	800a330 <SDMMC_GetCmdResp1>
 800a28a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a28c:	69fb      	ldr	r3, [r7, #28]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3720      	adds	r7, #32
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b088      	sub	sp, #32
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800a2a2:	230b      	movs	r3, #11
 800a2a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2b6:	f107 0308 	add.w	r3, r7, #8
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7ff fdc1 	bl	8009e44 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800a2c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2c6:	210b      	movs	r1, #11
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f831 	bl	800a330 <SDMMC_GetCmdResp1>
 800a2ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2d0:	69fb      	ldr	r3, [r7, #28]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3720      	adds	r7, #32
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a2dc:	b490      	push	{r4, r7}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2e4:	4b0f      	ldr	r3, [pc, #60]	; (800a324 <SDMMC_GetCmdError+0x48>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a0f      	ldr	r2, [pc, #60]	; (800a328 <SDMMC_GetCmdError+0x4c>)
 800a2ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ee:	0a5b      	lsrs	r3, r3, #9
 800a2f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2f4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a2f8:	4623      	mov	r3, r4
 800a2fa:	1e5c      	subs	r4, r3, #1
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d102      	bne.n	800a306 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a300:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a304:	e009      	b.n	800a31a <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d0f2      	beq.n	800a2f8 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a05      	ldr	r2, [pc, #20]	; (800a32c <SDMMC_GetCmdError+0x50>)
 800a316:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bc90      	pop	{r4, r7}
 800a322:	4770      	bx	lr
 800a324:	24000000 	.word	0x24000000
 800a328:	10624dd3 	.word	0x10624dd3
 800a32c:	002000c5 	.word	0x002000c5

0800a330 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a330:	b590      	push	{r4, r7, lr}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	460b      	mov	r3, r1
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a33e:	4b6f      	ldr	r3, [pc, #444]	; (800a4fc <SDMMC_GetCmdResp1+0x1cc>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a6f      	ldr	r2, [pc, #444]	; (800a500 <SDMMC_GetCmdResp1+0x1d0>)
 800a344:	fba2 2303 	umull	r2, r3, r2, r3
 800a348:	0a5b      	lsrs	r3, r3, #9
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a350:	4623      	mov	r3, r4
 800a352:	1e5c      	subs	r4, r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	d102      	bne.n	800a35e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a358:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a35c:	e0c9      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a362:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a364:	697a      	ldr	r2, [r7, #20]
 800a366:	4b67      	ldr	r3, [pc, #412]	; (800a504 <SDMMC_GetCmdResp1+0x1d4>)
 800a368:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0f0      	beq.n	800a350 <SDMMC_GetCmdResp1+0x20>
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1eb      	bne.n	800a350 <SDMMC_GetCmdResp1+0x20>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d004      	beq.n	800a38e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2204      	movs	r2, #4
 800a388:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a38a:	2304      	movs	r3, #4
 800a38c:	e0b1      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	2b00      	cmp	r3, #0
 800a398:	d004      	beq.n	800a3a4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2201      	movs	r2, #1
 800a39e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e0a6      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	4a58      	ldr	r2, [pc, #352]	; (800a508 <SDMMC_GetCmdResp1+0x1d8>)
 800a3a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7ff fd74 	bl	8009e98 <SDMMC_GetCommandResponse>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	7afb      	ldrb	r3, [r7, #11]
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d001      	beq.n	800a3be <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e099      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a3be:	2100      	movs	r1, #0
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7ff fd76 	bl	8009eb2 <SDMMC_GetResponse>
 800a3c6:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	4b50      	ldr	r3, [pc, #320]	; (800a50c <SDMMC_GetCmdResp1+0x1dc>)
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d101      	bne.n	800a3d6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	e08d      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	da02      	bge.n	800a3e2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a3dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3e0:	e087      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a3ec:	2340      	movs	r3, #64	; 0x40
 800a3ee:	e080      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a3fa:	2380      	movs	r3, #128	; 0x80
 800a3fc:	e079      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d002      	beq.n	800a40e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a40c:	e071      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a41c:	e069      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a42c:	e061      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a434:	2b00      	cmp	r3, #0
 800a436:	d002      	beq.n	800a43e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a43c:	e059      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a44c:	e051      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a45c:	e049      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a468:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a46c:	e041      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a47c:	e039      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d002      	beq.n	800a48e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a488:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a48c:	e031      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d002      	beq.n	800a49e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a498:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a49c:	e029      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d002      	beq.n	800a4ae <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a4ac:	e021      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a4b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a4bc:	e019      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a4c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a4cc:	e011      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a4d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a4dc:	e009      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a4de:	693b      	ldr	r3, [r7, #16]
 800a4e0:	f003 0308 	and.w	r3, r3, #8
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a4e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a4ec:	e001      	b.n	800a4f2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a4ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd90      	pop	{r4, r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	24000000 	.word	0x24000000
 800a500:	10624dd3 	.word	0x10624dd3
 800a504:	00200045 	.word	0x00200045
 800a508:	002000c5 	.word	0x002000c5
 800a50c:	fdffe008 	.word	0xfdffe008

0800a510 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a510:	b490      	push	{r4, r7}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a518:	4b1e      	ldr	r3, [pc, #120]	; (800a594 <SDMMC_GetCmdResp2+0x84>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a1e      	ldr	r2, [pc, #120]	; (800a598 <SDMMC_GetCmdResp2+0x88>)
 800a51e:	fba2 2303 	umull	r2, r3, r2, r3
 800a522:	0a5b      	lsrs	r3, r3, #9
 800a524:	f241 3288 	movw	r2, #5000	; 0x1388
 800a528:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a52c:	4623      	mov	r3, r4
 800a52e:	1e5c      	subs	r4, r3, #1
 800a530:	2b00      	cmp	r3, #0
 800a532:	d102      	bne.n	800a53a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a534:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a538:	e026      	b.n	800a588 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a53e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0f0      	beq.n	800a52c <SDMMC_GetCmdResp2+0x1c>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1eb      	bne.n	800a52c <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a558:	f003 0304 	and.w	r3, r3, #4
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d004      	beq.n	800a56a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2204      	movs	r2, #4
 800a564:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a566:	2304      	movs	r3, #4
 800a568:	e00e      	b.n	800a588 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56e:	f003 0301 	and.w	r3, r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	d004      	beq.n	800a580 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2201      	movs	r2, #1
 800a57a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e003      	b.n	800a588 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a06      	ldr	r2, [pc, #24]	; (800a59c <SDMMC_GetCmdResp2+0x8c>)
 800a584:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bc90      	pop	{r4, r7}
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	24000000 	.word	0x24000000
 800a598:	10624dd3 	.word	0x10624dd3
 800a59c:	002000c5 	.word	0x002000c5

0800a5a0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a5a0:	b490      	push	{r4, r7}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5a8:	4b18      	ldr	r3, [pc, #96]	; (800a60c <SDMMC_GetCmdResp3+0x6c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a18      	ldr	r2, [pc, #96]	; (800a610 <SDMMC_GetCmdResp3+0x70>)
 800a5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b2:	0a5b      	lsrs	r3, r3, #9
 800a5b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5b8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a5bc:	4623      	mov	r3, r4
 800a5be:	1e5c      	subs	r4, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d102      	bne.n	800a5ca <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5c8:	e01b      	b.n	800a602 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ce:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0f0      	beq.n	800a5bc <SDMMC_GetCmdResp3+0x1c>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1eb      	bne.n	800a5bc <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e8:	f003 0304 	and.w	r3, r3, #4
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d004      	beq.n	800a5fa <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2204      	movs	r2, #4
 800a5f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5f6:	2304      	movs	r3, #4
 800a5f8:	e003      	b.n	800a602 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	4a05      	ldr	r2, [pc, #20]	; (800a614 <SDMMC_GetCmdResp3+0x74>)
 800a5fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bc90      	pop	{r4, r7}
 800a60a:	4770      	bx	lr
 800a60c:	24000000 	.word	0x24000000
 800a610:	10624dd3 	.word	0x10624dd3
 800a614:	002000c5 	.word	0x002000c5

0800a618 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a618:	b590      	push	{r4, r7, lr}
 800a61a:	b087      	sub	sp, #28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	460b      	mov	r3, r1
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a626:	4b34      	ldr	r3, [pc, #208]	; (800a6f8 <SDMMC_GetCmdResp6+0xe0>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a34      	ldr	r2, [pc, #208]	; (800a6fc <SDMMC_GetCmdResp6+0xe4>)
 800a62c:	fba2 2303 	umull	r2, r3, r2, r3
 800a630:	0a5b      	lsrs	r3, r3, #9
 800a632:	f241 3288 	movw	r2, #5000	; 0x1388
 800a636:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a63a:	4623      	mov	r3, r4
 800a63c:	1e5c      	subs	r4, r3, #1
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d102      	bne.n	800a648 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a642:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a646:	e052      	b.n	800a6ee <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0f0      	beq.n	800a63a <SDMMC_GetCmdResp6+0x22>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1eb      	bne.n	800a63a <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a666:	f003 0304 	and.w	r3, r3, #4
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d004      	beq.n	800a678 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2204      	movs	r2, #4
 800a672:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a674:	2304      	movs	r3, #4
 800a676:	e03a      	b.n	800a6ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	2b00      	cmp	r3, #0
 800a682:	d004      	beq.n	800a68e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2201      	movs	r2, #1
 800a688:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e02f      	b.n	800a6ee <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f7ff fc02 	bl	8009e98 <SDMMC_GetCommandResponse>
 800a694:	4603      	mov	r3, r0
 800a696:	461a      	mov	r2, r3
 800a698:	7afb      	ldrb	r3, [r7, #11]
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d001      	beq.n	800a6a2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e025      	b.n	800a6ee <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	4a16      	ldr	r2, [pc, #88]	; (800a700 <SDMMC_GetCmdResp6+0xe8>)
 800a6a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f7ff fc01 	bl	8009eb2 <SDMMC_GetResponse>
 800a6b0:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d106      	bne.n	800a6ca <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	0c1b      	lsrs	r3, r3, #16
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e011      	b.n	800a6ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a6d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6d8:	e009      	b.n	800a6ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a6e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a6e8:	e001      	b.n	800a6ee <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	371c      	adds	r7, #28
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd90      	pop	{r4, r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	24000000 	.word	0x24000000
 800a6fc:	10624dd3 	.word	0x10624dd3
 800a700:	002000c5 	.word	0x002000c5

0800a704 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a704:	b490      	push	{r4, r7}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a70c:	4b21      	ldr	r3, [pc, #132]	; (800a794 <SDMMC_GetCmdResp7+0x90>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a21      	ldr	r2, [pc, #132]	; (800a798 <SDMMC_GetCmdResp7+0x94>)
 800a712:	fba2 2303 	umull	r2, r3, r2, r3
 800a716:	0a5b      	lsrs	r3, r3, #9
 800a718:	f241 3288 	movw	r2, #5000	; 0x1388
 800a71c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800a720:	4623      	mov	r3, r4
 800a722:	1e5c      	subs	r4, r3, #1
 800a724:	2b00      	cmp	r3, #0
 800a726:	d102      	bne.n	800a72e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a728:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a72c:	e02c      	b.n	800a788 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a732:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d0f0      	beq.n	800a720 <SDMMC_GetCmdResp7+0x1c>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1eb      	bne.n	800a720 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b00      	cmp	r3, #0
 800a752:	d004      	beq.n	800a75e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2204      	movs	r2, #4
 800a758:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a75a:	2304      	movs	r3, #4
 800a75c:	e014      	b.n	800a788 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a762:	f003 0301 	and.w	r3, r3, #1
 800a766:	2b00      	cmp	r3, #0
 800a768:	d004      	beq.n	800a774 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2201      	movs	r2, #1
 800a76e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a770:	2301      	movs	r3, #1
 800a772:	e009      	b.n	800a788 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2240      	movs	r2, #64	; 0x40
 800a784:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a786:	2300      	movs	r3, #0

}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bc90      	pop	{r4, r7}
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	24000000 	.word	0x24000000
 800a798:	10624dd3 	.word	0x10624dd3

0800a79c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a79c:	b084      	sub	sp, #16
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b084      	sub	sp, #16
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	f107 001c 	add.w	r0, r7, #28
 800a7aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d120      	bne.n	800a7f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68da      	ldr	r2, [r3, #12]
 800a7c4:	4b25      	ldr	r3, [pc, #148]	; (800a85c <USB_CoreInit+0xc0>)
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d105      	bne.n	800a7ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fa5a 	bl	800aca4 <USB_CoreReset>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73fb      	strb	r3, [r7, #15]
 800a7f4:	e01a      	b.n	800a82c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fa4e 	bl	800aca4 <USB_CoreReset>
 800a808:	4603      	mov	r3, r0
 800a80a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a80c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d106      	bne.n	800a820 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a816:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	639a      	str	r2, [r3, #56]	; 0x38
 800a81e:	e005      	b.n	800a82c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a824:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d10b      	bne.n	800a84a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f043 0208 	orr.w	r2, r3, #8
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f043 0220 	orr.w	r2, r3, #32
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a856:	b004      	add	sp, #16
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	ffbdffbf 	.word	0xffbdffbf

0800a860 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	f023 0201 	bic.w	r2, r3, #1
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b082      	sub	sp, #8
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a89a:	78fb      	ldrb	r3, [r7, #3]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d106      	bne.n	800a8ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	60da      	str	r2, [r3, #12]
 800a8ac:	e00b      	b.n	800a8c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8ae:	78fb      	ldrb	r3, [r7, #3]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d106      	bne.n	800a8c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	60da      	str	r2, [r3, #12]
 800a8c0:	e001      	b.n	800a8c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e003      	b.n	800a8ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a8c6:	2032      	movs	r0, #50	; 0x32
 800a8c8:	f7f7 fb5e 	bl	8001f88 <HAL_Delay>

  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
	...

0800a8d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8d8:	b084      	sub	sp, #16
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b086      	sub	sp, #24
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a8e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	613b      	str	r3, [r7, #16]
 800a8f6:	e009      	b.n	800a90c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	3340      	adds	r3, #64	; 0x40
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	2200      	movs	r2, #0
 800a904:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	3301      	adds	r3, #1
 800a90a:	613b      	str	r3, [r7, #16]
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2b0e      	cmp	r3, #14
 800a910:	d9f2      	bls.n	800a8f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a914:	2b00      	cmp	r3, #0
 800a916:	d112      	bne.n	800a93e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	e005      	b.n	800a94a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a942:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a950:	461a      	mov	r2, r3
 800a952:	2300      	movs	r3, #0
 800a954:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a95c:	4619      	mov	r1, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a964:	461a      	mov	r2, r3
 800a966:	680b      	ldr	r3, [r1, #0]
 800a968:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d10c      	bne.n	800a98a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	2b00      	cmp	r3, #0
 800a974:	d104      	bne.n	800a980 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a976:	2100      	movs	r1, #0
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f961 	bl	800ac40 <USB_SetDevSpeed>
 800a97e:	e008      	b.n	800a992 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a980:	2101      	movs	r1, #1
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f95c 	bl	800ac40 <USB_SetDevSpeed>
 800a988:	e003      	b.n	800a992 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a98a:	2103      	movs	r1, #3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f957 	bl	800ac40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a992:	2110      	movs	r1, #16
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f90b 	bl	800abb0 <USB_FlushTxFifo>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d001      	beq.n	800a9a4 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f929 	bl	800abfc <USB_FlushRxFifo>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	2300      	movs	r3, #0
 800a9be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	e043      	b.n	800aa66 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	015a      	lsls	r2, r3, #5
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9f4:	d118      	bne.n	800aa28 <USB_DevInit+0x150>
    {
      if (i == 0U)
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10a      	bne.n	800aa12 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	015a      	lsls	r2, r3, #5
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	4413      	add	r3, r2
 800aa04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa08:	461a      	mov	r2, r3
 800aa0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa0e:	6013      	str	r3, [r2, #0]
 800aa10:	e013      	b.n	800aa3a <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	015a      	lsls	r2, r3, #5
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	4413      	add	r3, r2
 800aa1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa24:	6013      	str	r3, [r2, #0]
 800aa26:	e008      	b.n	800aa3a <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa34:	461a      	mov	r2, r3
 800aa36:	2300      	movs	r3, #0
 800aa38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa46:	461a      	mov	r2, r3
 800aa48:	2300      	movs	r3, #0
 800aa4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	015a      	lsls	r2, r3, #5
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4413      	add	r3, r2
 800aa54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa58:	461a      	mov	r2, r3
 800aa5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	3301      	adds	r3, #1
 800aa64:	613b      	str	r3, [r7, #16]
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d3b7      	bcc.n	800a9de <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa6e:	2300      	movs	r3, #0
 800aa70:	613b      	str	r3, [r7, #16]
 800aa72:	e043      	b.n	800aafc <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa8a:	d118      	bne.n	800aabe <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10a      	bne.n	800aaa8 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	015a      	lsls	r2, r3, #5
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aaa4:	6013      	str	r3, [r2, #0]
 800aaa6:	e013      	b.n	800aad0 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab4:	461a      	mov	r2, r3
 800aab6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	e008      	b.n	800aad0 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	015a      	lsls	r2, r3, #5
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	4413      	add	r3, r2
 800aac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaca:	461a      	mov	r2, r3
 800aacc:	2300      	movs	r3, #0
 800aace:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	015a      	lsls	r2, r3, #5
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aadc:	461a      	mov	r2, r3
 800aade:	2300      	movs	r3, #0
 800aae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	015a      	lsls	r2, r3, #5
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	4413      	add	r3, r2
 800aaea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aaf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	613b      	str	r3, [r7, #16]
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d3b7      	bcc.n	800aa74 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab16:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d110      	bne.n	800ab40 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab24:	461a      	mov	r2, r3
 800ab26:	4b1e      	ldr	r3, [pc, #120]	; (800aba0 <USB_DevInit+0x2c8>)
 800ab28:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4b1a      	ldr	r3, [pc, #104]	; (800aba4 <USB_DevInit+0x2cc>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d105      	bne.n	800ab60 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	f043 0210 	orr.w	r2, r3, #16
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	699a      	ldr	r2, [r3, #24]
 800ab64:	4b10      	ldr	r3, [pc, #64]	; (800aba8 <USB_DevInit+0x2d0>)
 800ab66:	4313      	orrs	r3, r2
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d005      	beq.n	800ab7e <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	699b      	ldr	r3, [r3, #24]
 800ab76:	f043 0208 	orr.w	r2, r3, #8
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d105      	bne.n	800ab90 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	699a      	ldr	r2, [r3, #24]
 800ab88:	4b08      	ldr	r3, [pc, #32]	; (800abac <USB_DevInit+0x2d4>)
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3718      	adds	r7, #24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab9c:	b004      	add	sp, #16
 800ab9e:	4770      	bx	lr
 800aba0:	00800100 	.word	0x00800100
 800aba4:	00010003 	.word	0x00010003
 800aba8:	803c3800 	.word	0x803c3800
 800abac:	40000004 	.word	0x40000004

0800abb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800abba:	2300      	movs	r3, #0
 800abbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	019b      	lsls	r3, r3, #6
 800abc2:	f043 0220 	orr.w	r2, r3, #32
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3301      	adds	r3, #1
 800abce:	60fb      	str	r3, [r7, #12]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4a09      	ldr	r2, [pc, #36]	; (800abf8 <USB_FlushTxFifo+0x48>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d901      	bls.n	800abdc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800abd8:	2303      	movs	r3, #3
 800abda:	e006      	b.n	800abea <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	f003 0320 	and.w	r3, r3, #32
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	d0f0      	beq.n	800abca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	00030d40 	.word	0x00030d40

0800abfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2210      	movs	r2, #16
 800ac0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	3301      	adds	r3, #1
 800ac12:	60fb      	str	r3, [r7, #12]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4a09      	ldr	r2, [pc, #36]	; (800ac3c <USB_FlushRxFifo+0x40>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d901      	bls.n	800ac20 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e006      	b.n	800ac2e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	f003 0310 	and.w	r3, r3, #16
 800ac28:	2b10      	cmp	r3, #16
 800ac2a:	d0f0      	beq.n	800ac0e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	00030d40 	.word	0x00030d40

0800ac40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	78fb      	ldrb	r3, [r7, #3]
 800ac5a:	68f9      	ldr	r1, [r7, #12]
 800ac5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac60:	4313      	orrs	r3, r2
 800ac62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3714      	adds	r7, #20
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac8c:	f043 0302 	orr.w	r3, r3, #2
 800ac90:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ac92:	2003      	movs	r0, #3
 800ac94:	f7f7 f978 	bl	8001f88 <HAL_Delay>

  return HAL_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800acac:	2300      	movs	r3, #0
 800acae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	3301      	adds	r3, #1
 800acb4:	60fb      	str	r3, [r7, #12]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	4a13      	ldr	r2, [pc, #76]	; (800ad08 <USB_CoreReset+0x64>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d901      	bls.n	800acc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800acbe:	2303      	movs	r3, #3
 800acc0:	e01b      	b.n	800acfa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	daf2      	bge.n	800acb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800acca:	2300      	movs	r3, #0
 800accc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	f043 0201 	orr.w	r2, r3, #1
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	3301      	adds	r3, #1
 800acde:	60fb      	str	r3, [r7, #12]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	4a09      	ldr	r2, [pc, #36]	; (800ad08 <USB_CoreReset+0x64>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d901      	bls.n	800acec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ace8:	2303      	movs	r3, #3
 800acea:	e006      	b.n	800acfa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d0f0      	beq.n	800acda <USB_CoreReset+0x36>

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	00030d40 	.word	0x00030d40

0800ad0c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b084      	sub	sp, #16
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	f107 001c 	add.w	r0, r7, #28
 800ad1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad28:	461a      	mov	r2, r3
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d018      	beq.n	800ad84 <USB_HostInit+0x78>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800ad52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d10a      	bne.n	800ad6e <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68ba      	ldr	r2, [r7, #8]
 800ad62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad66:	f043 0304 	orr.w	r3, r3, #4
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	e014      	b.n	800ad98 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad7c:	f023 0304 	bic.w	r3, r3, #4
 800ad80:	6013      	str	r3, [r2, #0]
 800ad82:	e009      	b.n	800ad98 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad92:	f023 0304 	bic.w	r3, r3, #4
 800ad96:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800ad98:	2110      	movs	r1, #16
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7ff ff08 	bl	800abb0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7ff ff2b 	bl	800abfc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ada6:	2300      	movs	r3, #0
 800ada8:	60fb      	str	r3, [r7, #12]
 800adaa:	e015      	b.n	800add8 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	015a      	lsls	r2, r3, #5
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	4413      	add	r3, r2
 800adb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adb8:	461a      	mov	r2, r3
 800adba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adbe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adcc:	461a      	mov	r2, r3
 800adce:	2300      	movs	r3, #0
 800add0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3301      	adds	r3, #1
 800add6:	60fb      	str	r3, [r7, #12]
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	429a      	cmp	r2, r3
 800adde:	d3e5      	bcc.n	800adac <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800ade0:	2101      	movs	r1, #1
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f848 	bl	800ae78 <USB_DriveVbus>

  HAL_Delay(200U);
 800ade8:	20c8      	movs	r0, #200	; 0xc8
 800adea:	f7f7 f8cd 	bl	8001f88 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adfa:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00b      	beq.n	800ae20 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae0e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a14      	ldr	r2, [pc, #80]	; (800ae64 <USB_HostInit+0x158>)
 800ae14:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	4a13      	ldr	r2, [pc, #76]	; (800ae68 <USB_HostInit+0x15c>)
 800ae1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800ae1e:	e009      	b.n	800ae34 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2280      	movs	r2, #128	; 0x80
 800ae24:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a10      	ldr	r2, [pc, #64]	; (800ae6c <USB_HostInit+0x160>)
 800ae2a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a10      	ldr	r2, [pc, #64]	; (800ae70 <USB_HostInit+0x164>)
 800ae30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d105      	bne.n	800ae46 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	f043 0210 	orr.w	r2, r3, #16
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	699a      	ldr	r2, [r3, #24]
 800ae4a:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <USB_HostInit+0x168>)
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800ae52:	2300      	movs	r3, #0
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae5e:	b004      	add	sp, #16
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	01000200 	.word	0x01000200
 800ae68:	00e00300 	.word	0x00e00300
 800ae6c:	00600080 	.word	0x00600080
 800ae70:	004000e0 	.word	0x004000e0
 800ae74:	a3200008 	.word	0xa3200008

0800ae78 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	460b      	mov	r3, r1
 800ae82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ae9c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d109      	bne.n	800aebc <USB_DriveVbus+0x44>
 800aea8:	78fb      	ldrb	r3, [r7, #3]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d106      	bne.n	800aebc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aeb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aeba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aec6:	d109      	bne.n	800aedc <USB_DriveVbus+0x64>
 800aec8:	78fb      	ldrb	r3, [r7, #3]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aed6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeda:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
	...

0800aeec <__libc_init_array>:
 800aeec:	b570      	push	{r4, r5, r6, lr}
 800aeee:	4e0d      	ldr	r6, [pc, #52]	; (800af24 <__libc_init_array+0x38>)
 800aef0:	4c0d      	ldr	r4, [pc, #52]	; (800af28 <__libc_init_array+0x3c>)
 800aef2:	1ba4      	subs	r4, r4, r6
 800aef4:	10a4      	asrs	r4, r4, #2
 800aef6:	2500      	movs	r5, #0
 800aef8:	42a5      	cmp	r5, r4
 800aefa:	d109      	bne.n	800af10 <__libc_init_array+0x24>
 800aefc:	4e0b      	ldr	r6, [pc, #44]	; (800af2c <__libc_init_array+0x40>)
 800aefe:	4c0c      	ldr	r4, [pc, #48]	; (800af30 <__libc_init_array+0x44>)
 800af00:	f000 f820 	bl	800af44 <_init>
 800af04:	1ba4      	subs	r4, r4, r6
 800af06:	10a4      	asrs	r4, r4, #2
 800af08:	2500      	movs	r5, #0
 800af0a:	42a5      	cmp	r5, r4
 800af0c:	d105      	bne.n	800af1a <__libc_init_array+0x2e>
 800af0e:	bd70      	pop	{r4, r5, r6, pc}
 800af10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af14:	4798      	blx	r3
 800af16:	3501      	adds	r5, #1
 800af18:	e7ee      	b.n	800aef8 <__libc_init_array+0xc>
 800af1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af1e:	4798      	blx	r3
 800af20:	3501      	adds	r5, #1
 800af22:	e7f2      	b.n	800af0a <__libc_init_array+0x1e>
 800af24:	0800af84 	.word	0x0800af84
 800af28:	0800af84 	.word	0x0800af84
 800af2c:	0800af84 	.word	0x0800af84
 800af30:	0800af88 	.word	0x0800af88

0800af34 <memset>:
 800af34:	4402      	add	r2, r0
 800af36:	4603      	mov	r3, r0
 800af38:	4293      	cmp	r3, r2
 800af3a:	d100      	bne.n	800af3e <memset+0xa>
 800af3c:	4770      	bx	lr
 800af3e:	f803 1b01 	strb.w	r1, [r3], #1
 800af42:	e7f9      	b.n	800af38 <memset+0x4>

0800af44 <_init>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	bf00      	nop
 800af48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4a:	bc08      	pop	{r3}
 800af4c:	469e      	mov	lr, r3
 800af4e:	4770      	bx	lr

0800af50 <_fini>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	bf00      	nop
 800af54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af56:	bc08      	pop	{r3}
 800af58:	469e      	mov	lr, r3
 800af5a:	4770      	bx	lr
